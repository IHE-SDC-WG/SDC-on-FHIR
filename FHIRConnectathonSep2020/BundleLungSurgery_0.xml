<?xml version="1.0" encoding="UTF-8"?>
<Bundle xmlns="http://hl7.org/fhir">
    <meta> 
        <lastUpdated value="2020-05-14T11:43:30Z"/> 
    </meta> 
    <type value="transaction"></type>
    <!-- Patient -->
    <!-- DocumentReference -->
    <entry>
        <fullUrl value="urn:uuid:f96d3fea-62b3-47e9-8443-f199c2f946f9"/>
        <resource>
        <DocumentReference xmlns="http://hl7.org/fhir">
            <meta>
                <profile value="http://ihe.net/fhir/StructureDefinition/IHE_MHD_Provide_Minimal_DocumentReference"/>
            </meta>
            <text> 
                <status value="generated"/> 
                <div xmlns="http://www.w3.org/1999/xhtml">Lung Cancer Surgery form</div> 
            </text>
            <masterIdentifier>
                <system value="https://cap.org"/>
                <value value="Lung.Res.119_3.005.021.REL1234513"/>
            </masterIdentifier>
            <!-- ID for this resource appended FormID.FormInstanceVersionURI -->
            <identifier>
                <system value="https://cap.org"/>
                <value value="Lung.Res.119_3.005.021.REL"/>
            </identifier>
            <!-- Matches SDC Lineage -->
            <identifier>
                <system value="https://cap.org"/>
                <value value="1.0.0DRAFT"/>
            </identifier>
            <!-- Matches SDC form Version -->
            <identifier>
                <system value="https://cap.org"/>
                <value value="Lung.Res.119_3.005.021.REL_sdcFDF1"/>
            </identifier>
            <!-- Matches SDC FormID; should be unique to this Form -->
            <identifier>
                <system value="https://cap.org"/>
                <value value="1234513"/>
            </identifier>
            <!-- Matches SDC FormInstanceURI -->
            <status value="current"/>
            <docStatus value="final"/>
            <type>
                <coding>
                    <system value="http://loinc.org"/>
                    <code value="60568-3"/>
                    <display value="Synoptic Report"/>
                </coding>
            </type>
            <category>
                <coding>
                    <system value="urn:oid:1.3.6.1.4.1.19376.1.2.6.1"/>
                    <code value="REPORTS"/>
                    <display value="REPORTS"/>
                </coding>
            </category>
            <!-- Must us FHIR statuses for docStatus -->
            <subject>
                <reference value="Patient/f201"/>
                <display value="Roel"/>
            </subject>
            <date value="2019-10-24T09:43:41+11:00"/>
            <author>
                <reference value="Practitioner/f202"/>
                <display value="Luigi Maas"/>
            </author>
            <securityLabel>
                <coding>
                    <system value="http://terminology.hl7.org/CodeSystem/v3-Confidentiality"/> 
                    <code value="N"/> 
                    <display value="normal"/> 
                </coding>
            </securityLabel>
            <content>
                <attachment>
                    <contentType value="application/xml"/>
                    <language value="en-CA"/>
                    <data value="<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns:sr="http://www.cap.org/pert/2009/01/" xmlns:x="urn:ihe:qrph:sdc:2016">
  <head>
    <META http-equiv="Content-Type" content="text/html; charset=us-ascii">
    <title>
    </title><script type="text/javascript" src="https://ajax.googleapis.com/ajax/libs/jquery/1.12.0/jquery.min.js"></script><script type="text/javascript">
			
			$(document).ready(function () {	
				$('.mustImplement').parent().toggle();
			
			    var toggle_all = true;
				$(".collapse_all_control").click(function(){
					$(".collapsable_q").each(function(){
					    if ($(this).siblings().is( ":visible" ) && toggle_all === true) {
						   $(this).siblings().toggle(false);
						   $(this).toggleClass("Question collapsed_q");
						} else if (!$(this).siblings().is( ":visible" ) && toggle_all === false) {
						   $(this).siblings().toggle(true);
						   $(this).toggleClass("Question collapsed_q");
						}
					});
					
					$(".collapsable").each(function(){
						if ($(this).siblings().is( ":visible" ) && toggle_all === true) {
							$(this).siblings().toggle(false);
							$(this).toggleClass("HeaderGroup collapsed");
						} else if (!$(this).siblings().is( ":visible" ) && toggle_all === false) {
							$(this).siblings().toggle(true);
							$(this).toggleClass("HeaderGroup collapsed");
						}
					});
					
					if (toggle_all) {
					    toggle_all = false;
					} else {
					    toggle_all = true;
					}
				});
				
				$(".collapsable").click(function(){
					$(this).siblings().toggle();
					$(this).toggleClass("HeaderGroup collapsed");									
				});	
				
				var toggle_section = true;
				$(".collapse_control").click(function(){
					$(".collapsable").each(function(){
						if ($(this).siblings().is( ":visible" ) && toggle_section === true) {
							$(this).siblings().toggle(false);
							$(this).toggleClass("HeaderGroup collapsed");
						} else if (!$(this).siblings().is( ":visible" ) && toggle_section === false) {
							$(this).siblings().toggle(true);
							$(this).toggleClass("HeaderGroup collapsed");
						}
					});
					
					if (toggle_section) {
					    toggle_section = false;
					} else {
					    toggle_section = true;
					}
				});
				
				var toggle_question  = true;
				$(".collapse_q_control").click(function(){
					$(".collapsable_q").each(function(){
					    if ($(this).siblings().is( ":visible" ) && toggle_question === true) {
						   $(this).siblings().toggle(false);
						   $(this).toggleClass("Question collapsed_q");
						} else if (!$(this).siblings().is( ":visible" ) && toggle_question === false) {
						   $(this).siblings().toggle(true);
						   $(this).toggleClass("Question collapsed_q");
						}
					});
					
					if (toggle_question)
					    toggle_question = false;
				    else
					    toggle_question = true;
				});
				
				//support toggle - sections
				$(".collapsable").click(function(){
					$(this).siblings().toggle();
					$(this).toggleClass("HeaderGroup collapsed");									
				});	

				// support toggle - questions
				$(".collapsable_q").click(function(){
					$(this).siblings().toggle();
					$(this).toggleClass("Question collapsed_q");									
				});	
			});
			
					
						
						
							$(document).ready(function () {
							
								//link CSS based on whether runing from disk or from server
								
								if (window.location.protocol=='file:')
								{
									//$('<script type="text/javascript" src="sdctemplate.js"/>').appendTo('head');
									$('<link type="text/css" rel="stylesheet" href="//code.jquery.com/ui/1.12.1/themes/base/jquery-ui.css"/>').appendTo('head');
									$("<link rel='stylesheet' href='sdctemplate.css' type='text/css' />").appendTo('head');
									
								}
								else{
									//$('<script type="text/javascript" src="Transforms/working/sdctemplate.js"/>').appendTo('head');
									$("<link rel='stylesheet' href='Transforms/working/sdctemplate.css' type='text/css' />").appendTo('head');
								}
								
								});
								
								
var xmlDoc;
var repeatIndex = 0;   //used to generate unique ids, names in repeated elements
var _debug = true;
	var $xml;
$(document).ready(function () {
	
	// 2018-08-02
	// alert($('#checklist').length);
								
	//hide all notRequired
	//toggle_notRequired();
	toggle_mustImplement();
	
	jQuery.support.cors = true;  //not sure if needed because cors setting is on the server
	
	$("#btnParameters").click(function(){
		$("#options").toggle();
	});
	
	$("#btnParameters").click();
	
	//support toggle
	$(".collapsable").click(function(){
		$(this).siblings().toggle();
		$(this).toggleClass("HeaderGroup collapsed");									
	});								
	
	var endpoints;
	var successIndex = 0;
	
	/*
		save original xml in jquery variable  
		server or xslt puts original xml in #rawxml, issue with xslt putting in xml is copy-of function decodes special characters, thus 
		making xml invalid
	*/
	
	var xmlstring = $("#rawxml").val();   
	// 2018-08-02
	// alert($("#rawxml").length);
	
	//load into xml dom
	try{
		xmlDoc = $.parseXML(xmlstring);
		
		$xml = $(xmlDoc);

		//allow submit
		if($("#allowsubmit").val()=='no')
		{
			$("#send").css("display","none");
			
		}
	}
	catch(err)
	{
		alert('Error loading xml: ' + err.message);
	}
	
	//disable all fill-in boxes
	/*
	var $fillins = $xml.find("ListItemResponseField");
	$fillins.each(function(){
		var answerid = $(this).parent().attr("ID");
		var $answerElement = getAnswerItemByID(answerid, $("html"))
		if(!$answerElement.prop('checked'))
			$answerElement.parent().find('.AnswerTextBox').prop('disabled',true);
	})
	*/
});

function validateDate(value)
{
	//2015-1-11 13:57:24
	var pattern = /^\d\d\d\d-(0?[1-9]|1[0-2])-(0?[1-9]|[12][0-9]|3[01]) (00|[0-9]|1[0-9]|2[0-3]):([0-9]|[0-5][0-9]):([0-9]|[0-5][0-9])$/g;
	
}

function doConfirm(msg, yesFn, noFn)
{
	var confirmBox = $("#confirmBox");
	confirmBox.find(".message").text(msg);
	confirmBox.find(".yes,.no").unbind().click(function()
	{
		confirmBox.hide();
	});
	confirmBox.find(".yes").click(yesFn);
	confirmBox.find(".no").click(noFn);
	confirmBox.show();
}

function isLocalMode()
{
	if (window.location.protocol=='file:')
	{
		return true;
	}
	else
	{
		return false;
	}
}

function loadXml(){
	
	if (isLocalMode())
	{
		// 2018-08-02 change: 
	    // alert('local');
		
		$('#rawxml').remove();
		$('<textarea id="rawxml" rows="20" style="-webkit-box-sizing: border-box;-moz-box-sizing: border-box;box-sizing: border-box;width: 100%;"/>').appendTo('body');
		readTextFile(window.location.href);
		if(_debug)
		{
			$('#rawxml').show();
		}
		else{
		    
			$('#rawxml').hide();
		}								
	}
}

function readTextFile(file)
{
		
	var rawFile = new XMLHttpRequest();
	rawFile.open("GET", file, false);
	rawFile.onreadystatechange = function ()
	{
		if(rawFile.readyState === 4)
		{
			if(rawFile.status === 200 || rawFile.status == 0)
			{
				var allText = rawFile.responseText;
				$('#rawxml').val(allText);
			}
		}
	}
	rawFile.send(null);
}

function sayHello(name) {
	alert("sayHello function in javascripts says - hello, " + name);
	return window.external.ShowMessage("If you can see this message sayHello successfully called ShowMessage function in this desktop client app.");
}

function toggle_metadata() 
{
   var divsMD = document.getElementsByClassName('MetadataDisplay')
   var divsMDH = document.getElementsByClassName('MetadataDisplayHeader')           
	  
	  var display = 'none'
	  if (divsMD[0].style.display)
	  {                  
		 if (divsMD[0].style.display == 'inline' )
		 { display = 'none' }
			else
		 { display = 'inline' }
	  }
	  
	  for (var i = 0; i < divsMD.length; i++)
	  { divsMD[i].style.display = display ;}
	  for (var i = 0; i < divsMDH.length; i++) 
	  { divsMDH[i].style.display = display; } 
	  
	  
	  //Toggle ids too
	  var divs = document.getElementsByClassName('idDisplay')   
	  for (var i = 0; i < divs.length; i++)
	  { 
		 divs[i].style.display = display ;
	  }
	  
	  //Toggle deprecated items                 
	  var dis = document.getElementsByClassName('TopHeader')
	  var searchText = "(Deprecated Items)"
	  
	  for (var i = 0; i < dis.length; i++) 
	  { 
	  if (dis[i].textContent.indexOf(searchText) >=0) 
		 {
			var divHeader = dis[i].parentElement.parentElement.parentElement //the tbody element
			if (display == 'inline') {display = ''}
			divHeader.style.display = display;
			break;                         
		 }                     
	  }                

   }
   
 function toggle_name() 
   {
   var nameDiv = document.getElementsByClassName('nameDiv');
 
	  var display = 'none'
	  if (nameDiv[0].style.display)
	  {                  
		 if (nameDiv[0].style.display == 'inline' )
		 { display = 'none' }
			else
		 { display = 'inline' }
	  }
	  
	  for (var i = 0; i < nameDiv.length; i++)
	  { nameDiv[i].style.display = display }         
   }
   
function toggle_mustImplement()
{
	//alert('here');
	// $('.mustImplement').parent().toggle();
	if($('.mustImplement').parent().is(":visible")){
		$('#mnuRequired').text('Toggle optional items');
		$('.mustImplement').parent().toggle();
	}
	else{
		$('#mnuRequired').text('Hide optional items');
		$('.mustImplement').parent().toggle();
	}
}

function toggle_id() {
		  var divs = document.getElementsByClassName('idDisplay');
			var display = 'none';
			
		  if (divs[0].style.display)
		  {                  
			  if (divs[0].style.display == 'inline' )
				{ display = 'none'; }
			  else
				{ display = 'inline'; }
		  }
		  
		  for (var i = 0; i < divs.length; i++)
		  { 
		  divs[i].style.display = display;
		  }
	   }
	   function resetAnswer(obj)
	   {
	   
	   	var button = $(obj);
		
		//find question div
		var questionToRemove = button.closest('.question');  //closest parent div with class='question'
		//alert(questionToRemove.attr('id'))		;												
		var currentQuestionId = questionToRemove.attr('id').substring(1);
		//alert(currentQuestionId);
		 var answers = document.getElementsByName(currentQuestionId);
	  
	   //alert(questionId.split("..")[0]);
	   for (var i = 0; i < answers.length; i++) {
			var selecttype = $(answers[i]).attr('type');
			
			if(selecttype=="checkbox" || selecttype=="radio" || selecttype=="text")
			{
				answers[i].checked = false;
				answers[i].value="";
				// fire onchange on this answer choice	
				//answers[i].onchange();
			}
					}
		//return false;
	   }

function ShowHideDemo() {
	$('#divdemo').toggle();
	if (($('#divdemo')).css("display")=='none')
		$('#demshowhide').text('+ Demographics');
	else
		$('#demshowhide').text('- Demographics');
}

//adds a new repeat of a section
function addSection(obj) {
	//obj is btnAdd
	/*
		UI: Clone the block
			Get new guid for block (section)
			Change names of each element (textbox, hiddenbox, checkbox, radio) in the block to original id + ":" + blockguid
		XML:    
			Clone the current section in xml
			Add new attribute called Guid = blockguid to the top level element
			Add new attribute called ParentGuid and set it equal to blockguid
			Change Id of each child to original id + ":" + blockguid
			
		Each question and answer choices in repeated block will have their ids changed to their original id + ": " + blockguid 
		
	*/
	
	//we need to clone table, so get table
	var td = obj.parentElement;
	var table = td.parentElement  //tr
				   .parentElement  //tbody
				   .parentElement //table
	
	/*if current section is the first occurrence, it's ID is from the xml
	if current section is a repeat it's ID = ID from the xml + Guid*/
	var currentSectionId = table.id; 
	
	var blockGuid = generateShortUid();  // generateGuid();  //to distinguish each repeat of parent element which is section for now
	repeatIndex++;
	
	var max = table.parentElement.firstChild.value;  //maxcardinality								
	
	try
	{
		var parentTable =  table.parentElement.
						   parentElement.
						   parentElement.
						   parentElement.
						   parentElement;
	}
	catch(err)
	{
		alert("Error when getting parent table: " + err);
		return;
	}
	
	if(countSectionRepeats(parentTable,currentSectionId.split("..")[0])==max)
	{
		alert("max repeat = " + max + " reached ");
		repeatIndex--;
		return;
	}
	
	var newtable = table.cloneNode(true);    							
	
	//newtable.id = currentSectionId.split(":")[0] + ":" + blockGuid;   //each repeated section id has the same ID from xml + blockGuid							
	newtable.id = currentSectionId.split("..")[0] + ".." + repeatIndex
								
	//set new ids to each nested table 
	var newtableitems = newtable.getElementsByTagName('*');										
	for(i=0; i< newtableitems.length; i++)		{	
		if(newtableitems[i].tagName=="TABLE"){
			newtableitems[i].id = newtableitems[i].id.split("..")[0] + ".." + repeatIndex;
}
if(newtableitems[i].className=="question"){
			newtableitems[i].id = newtableitems[i].id.split("..")[0] + ".." + repeatIndex;
}
if(newtableitems[i].tagName=="input"){
			newtableitems[i].name = newtableitems[i].name.split("..")[0] + ".." + repeatIndex;
}
}

	var trace = 0;
	var newname;
	var i;
	var ID;

	//add the new repeat
	try {
		
		/*find section in xml corresponding to this block (ID=currentSectionId.substring(1)) and clone it, then assign new ID*/
		//alert(currentSectionId.substring(1));
		var $sectionCurrent = $xml.find('Section[ID="' + currentSectionId.substring(1) + '"]:first');  //first is redundant since there is only one section with this ID
		if($sectionCurrent.length==0)
		{
			//alert("Section ID = " + currentSectionId.substring(1) + " not found");
			//return;
		}
		
		var $sectionNew = $sectionCurrent.clone(true);
		
		//$sectionNew.attr('ID',currentSectionId.split(":")[0].substring(1)+":" + blockGuid);
		$sectionNew.attr('ID',currentSectionId.split("..")[0].substring(1)+".." + repeatIndex);								
		
		//xml: set IDs of all children sections
		$sectionNew.find('Section').each(function(index){
			//var secid = $(this).attr("ID").split(":")[0] + ":" + blockGuid;	
			var secid = $(this).attr("ID").split("..")[0] + ".." + repeatIndex;	
			$(this).attr("ID",secid);			
		});
										
		var oldtableitems = td.getElementsByTagName("input");  //get hidden input, radio buttons, checkboxes and input text boxes
		
		//iterate through oldtableitems and assign new unique ids to them
		for (i = 0; i < oldtableitems.length; i++) {
			
			if (oldtableitems[i].type == "hidden" || oldtableitems[i].type == "text" || oldtableitems[i].type=="radio") {
				oldname = oldtableitems[i].name;  //name of the first instance is ID from xml, repeats have ID + ":" + Guid

				if(oldtableitems[i].id=="maxcardinality")
					  continue;

				if(oldtableitems[i].name=="")
				{
					alert("error: a " + oldtableitems[i].type + " box without name is found at " + i);
					continue;
				}
					   
				//newname = oldtableitems[i].name.split(":")[0] + ':' + blockGuid;
				newname = oldtableitems[i].name.split("..")[0] + '..' + repeatIndex;
									
										
				//find the element in the new table
				
				newtableitems = newtable.getElementsByTagName('*');										
					//debugger;
				for(k=0;k<newtableitems.length;k++)
				{												
				   if(newtableitems[k].name == oldtableitems[i].name)
				   {
						newtableitems[k].name = newname;													
						if(newtableitems[k].class=="question")
						{
						
						}
						if(newtableitems[k].type=="hidden")   //question will have Q as the first letter
						{  
						   //find question in xml fragment and change ID
						   
						   $question = $sectionNew.find('Question[ID="' + oldtableitems[i].name.substring(1)  + '"]');
						   //alert($question.length);
						   if($question.length==0)
						   {
								//alert("Qusetion ID = " + oldtableitems[i].name.substring(1) + " not found.");
								$sectionNew.find('Question').each(function(index){
									//alert($(this).attr("ID"));
								})
								//return;
							}
							else
							{
								//$question.attr("ID", newtableitems[k].name.split(":")[0].substring(1) + ':' + blockGuid); 
								//$question.attr("ID", newtableitems[k].name.split("..")[0].substring(1) + '..' + repeatIndex); 
								
							}
						   
						   /* 12/18/2016
						   New constraints
						   Property name, ResponseField name and Value name have to be unique 
						   */
						   
						   if (typeof $question.find("Property").attr("name") != 'undefined')
						   {
								//new property name
								//var propname = $question.find("Property").attr("name") + "_" + blockGuid; // repeat;
								var propname = $question.find("Property").attr("name").split('..')[0] + ".." + repeatIndex;
								$question.find("Property").attr("name",propname);
						   }
						   
						   if (typeof $question.find("ResponseField").attr("name") != 'undefined')
						   {
								//new response name
								//propname = $question.find("ResponseField").attr("name") + "_" + blockGuid;  // repeat;
								propname = $question.find("ResponseField").attr("name").split('..')[0] + ".." + repeatIndex;  // repeat;
								$question.find("ResponseField").attr("name",propname);
						   }
						   
						   if (typeof $question.find("Response").children(0).attr("name") != 'undefined')
						   {
								//new name on value field
								//propname = $question.find("Response").children(0).attr("name") + "_" + blockGuid;  // repeat;
								propname = $question.find("Response").children(0).attr("name").split('..')[0] + ".." + repeatIndex;  // repeat;
								$question.find("Response").children(0).attr("name", propname);
						   }
						}
						else 
						{                   //answers do not have Q											
								if(newtableitems[k].type=="radio" || newtableitems[k].type == "checkbox")
								{
									 newtableitems[k].checked = false;														  
								}
								 else
								{
									 newtableitems[k].value = "";
								}
						}												   
					}
				}	
			}
		}
	
		newtable.getElementsByClassName("btnRemove")[0].style.visibility="visible";
		//var clonedItems = newtable.getElementsByClassName("question");  
		
		//better to append new table after setting properties of individual controls
		table.parentElement.appendChild(newtable);
								
		//insert newsec after last section
		
		//$xml.find('Section[ID="' + table.id.substring(1) + '"]').after($sectionNew);
		
		var $orgsecid = table.id.substring(1).split('..')[0];
		
		var $lastindex = $xml.find('Section[ID*="' + $orgsecid + '"]').length - 1;		
		//debugger;
		//alert($xml);
		if($lastindex>=0)
		{
			$xml.find('Section[ID*="' + $orgsecid + '"]').last().after($sectionNew);
		}
		else
		{
			//alert("error adding section repeat");
			return;
		}
			
		//remove all nested repeats
		newtable = removeNestedTableRepeats(newtable);
	
		//update rawxml for view							
		$('#rawxml').val(xmlToString(xmlDoc));												
		
		repeat = countSectionRepeats(parentTable, currentSectionId.split("..")[0])																	
		
		showHideButtons(newtable);	
		
		//make sure + is visible on the first repeat of nested section
		nestedtables = getChildTables(newtable);
		
		for(i=0;i<nestedtables.length;i++)
		{
			elements = nestedtables[i].getElementsByTagName('*');	
			for(j=0;j<elements.length;j++)
			{
			
				if(elements[j].className=="btnAdd")
					{
					elements[j].style.visibility="visible";
					}
			}
		}
		
	}
	catch (err) 
	{
		alert(err.message + "\n" + trace + "\n" + newname + "n" + i);
	}
}

var repeatIndexQuestion=0;
//adds a new repeat of a question
function addQuestion(obj) {
	//obj is btnAdd inside command div
	/*
		UI: Clone .question div, update id of this div to original id + '..' + repeatIndex
		change names of children to name + '..' + repeatIndex 
		
		XML:    
			Clone the current question node in xml
			Change Id of the question and its children to original id + ":" + blockguid
		Each question and answer choices in repeated block will have their ids changed to their original id + ": " + blockguid 
	*/
	
	try
	{
		var button = $(obj);
		
		//find question div
		var questionToRepeat = button.closest('.question');  //closest parent div with class='question'
		
			//alert(questionToRepeat.html())
			
		var currentQuestionId = questionToRepeat.attr('id');
		
		var count=0;
		
		var test=document.getElementsByClassName("question").length;
		for (i=0;i<test;i++)
		{
		if(document.getElementsByClassName("question")[i].id.substring(1).split('..')[0]==currentQuestionId.substring(1).split('..')[0]){
		count++;}
		}
		
		currentQuestionId = currentQuestionId.substring(1).split('..')[0];
		
		var max = questionToRepeat.find("input[id='maxcardinality']").first().val();  //maxcardinality	
		
		//alert(max);
		
		 var repeats = countQuestionRepeats(currentQuestionId);
				repeatIndexQuestion++;
				
		if(count> max)
		{
			alert('max repeat value ' + max + ' reached.');
			repeatIndexQuestion--;
			return;
		}
				
		var clonedBlock = questionToRepeat.clone();
		//alert(clonedBlock.html());
		//alert(currentQuestionId);
		clonedBlock.attr("id", 'q' + currentQuestionId + '..' + repeatIndexQuestion);
		
		//alert(clonedBlock.html());
		
		//find the top level question node in xml and clone it
		var elementToClone = $xml.find("Question[ID='" + currentQuestionId + "']");
		
		var clonedXml = elementToClone.clone();
		
		
		//change name attributes 
		clonedXml.find("Property").each(function(){
				var prop = $(this);
				if(typeof prop.attr("name") != "undefined")
					prop.attr("name",prop.attr("name").split('..')[0] + ".." + repeatIndexQuestion);
		});
		
		clonedXml.find("ResponseField").each(function(){
				var temp = $(this);
				if(typeof temp.attr("name") != "undefined")
				temp.attr("name",temp.attr("name").split('..')[0] + ".." + repeatIndexQuestion);
		});
		
		clonedXml.find("Response").each(function(){
				var temp = $(this).children(0);
				if(typeof temp.attr("name") != "undefined")
				temp.attr("name",temp.attr("name").split('..')[0] + ".." + repeatIndexQuestion);
		});
		
		clonedXml.find("ListItemResponseField").each(function(){
				var temp = $(this);
				if(typeof temp.attr("name") != "undefined")
				temp.attr("name",temp.attr("name").split('..')[0] + ".." + repeatIndexQuestion);
		});
		
		//update names of cloned elements
		var clonedItems = clonedBlock.find("input");  //get hidden input, radio buttons, checkboxes and input text boxes
		var clonedItems1 = clonedBlock.find(".question");  
		clonedItems1.each(function(){
			var item = $(this);
			var id = item.attr('id');
			
			if(typeof id != 'undefined')
			{	   
				if(id.substring(0,1)=='q')
				{
					var questionId = id.substring(1).split('..')[0];
					item.attr('id','q' + questionId + '..' + repeatIndexQuestion);
					//alert(questionId + ':' + clonedXml.find("Question[ID='" + questionId + "']").length);
					if(clonedXml.attr("ID")==questionId)
					{
						//alert('here')
						clonedXml.attr("ID",questionId + '..' + repeatIndexQuestion);	
					}
					else
					{
						clonedXml.find("Question[ID='" + name.substring(1) + "']").attr('ID',questionId + '..' + repeatIndexQuestion);	
						//alert(questionId + '..' + repeatIndexQuestion);
					}
				}
				else
				{
					//answer choices do not have 'q'
					var questionId = name.split('..')[0];
					item.attr('name',questionId + '..' + repeatIndexQuestion);
					//alert(item.attr('type'));
					if(item.attr('type')=='text')
					{
						item.val('');
					}
					item.attr('checked',false);
				}
			}	
		});
		//iterate through clonedItems and assign new unique ids to them
		clonedItems.each(function(){
			var item = $(this);
			var name = item.attr('name');
			
			if(typeof name != 'undefined')
			{	   
				if(name.substring(0,1)=='q')
				{
					var questionId = name.substring(1).split('..')[0];
					item.attr('name','q' + questionId + '..' + repeatIndexQuestion);
					//alert(questionId + ':' + clonedXml.find("Question[ID='" + questionId + "']").length);
					if(clonedXml.attr("ID")==questionId)
					{
						//alert('here')
						clonedXml.attr("ID",questionId + '..' + repeatIndexQuestion);	
					}
					else
					{
						clonedXml.find("Question[ID='" + name.substring(1) + "']").attr('ID',questionId + '..' + repeatIndexQuestion);	
						//alert(questionId + '..' + repeatIndexQuestion);
					}
				}
				else
				{
					//answer choices do not have 'q'
					var questionId = name.split('..')[0];
					item.attr('name',questionId + '..' + repeatIndexQuestion);
					//alert(item.attr('type'));
					if(item.attr('type')=='text')
					{
						item.val('');
					}
					item.attr('checked',false);
				}
			}	
		});
		
		//append cloned node to xml
		clonedXml.appendTo(elementToClone.parent());
		
		//append cloned UI block in display
		clonedBlock.find('.btnRemove').css('visibility', 'visible');  //show does not work
		//clonedBlock.appendTo(questionToRepeat.after());   
		questionToRepeat.after(	clonedBlock);	
	}
	catch (err) 
	{
		alert(err.message );
	}
}

function removeQuestion(obj)
{
	try 
	{
	
		var button = $(obj);
		
		//find question div
		var questionToRemove = button.closest('.question');  //closest parent div with class='question'
		//alert(questionToRemove.attr('id'))		;												
		var currentQuestionId = questionToRemove.attr('id').substring(1);
	repeatIndexQuestion--;
		//remove
		questionToRemove.remove();
		//alert('now removing ' + currentQuestionId);
		//alert(countQuestionRepeats(currentQuestionId));
		//if($xml.find("Question [ID='" + currentQuestionId + "']").length==0)
		//{
		//	alert("ID = " + currentQuestionId + " not found");
		//}
		//debugger;
		//alert(currentQuestionId);
		//alert($xml.find("Question [ID='" + currentQuestionId + "']"));
		//$xml.find("Question [ID='" + currentQuestionId + "']").remove();
	}
	catch(err)
	{
		alert(err.message);
	}
}

function getRepeats(id)
{
	var id = id.split('_')[0];
	var count = 0;
	$('input').each(function(){
		var name = $(this).attr('name');
		if(name==id)
		{
			count++;
		}
	});
	
	return count;
}

function generateShortUid() 
{
		return ("0000" + (Math.random()*Math.pow(36,4) << 0).toString(36)).slice(-4)
}

function generateGuid()
{
	var result, i, j;
	result = '';
	for (j = 0; j < 32; j++) {
		if (j == 8 || j == 12 || j == 16 || j == 20)
			result = result + '-';
		i = Math.floor(Math.random() * 16).toString(16).toUpperCase();
		result = result + i;
	}
	return result;
}

/*
Counts the number of repeats of a block (table)
Each repeated block (table) has id that has two parts
1. id that is the same for each repeat.
2. a guid that is different for each repeat 
*/
function countSectionRepeats(parentT, sectionid)
{
	var tables = parentT.getElementsByTagName('TABLE');
	var count = 0;
	for(i=0; i<tables.length; i++)
	{
	   checkid = tables[i].id.split("..")[0];
	   if(checkid == sectionid) count++;
	}
	return count;
}

/*
count question repeats 
*/
function countQuestionRepeats(questionid)
{

	//questionid = questionid.split('.')[0];
	//alert(questionid);
	//alert(questionid + ':' + $xml.find('Question[ID^="' + questionid + '"]').length);
	return $xml.find('Question[ID^="' + questionid + '"]').length;
}

function getMaxCount(sectionid)
{
	alert(document.getElementById(sectionid).length);

}

function getSiblingTables(parentT) {								
	
	return tables = parentT.getElementsByTagName('TABLE');								
}

function getChildTables(table)
{
	return table = table.getElementsByTagName('TABLE');
}

function getLastRepeat(sectionid) {
	var section = document.getElementById(sectionid);
	var tables = section.parentElement.getElementsByTagName('TABLE');
	var ret = null;
	for(i=0;i<tables.length;i++)
	{
	   if(tables[i].id.split("..")[0]==sectionid)
		 ret = tables[i];
	}
	return ret;
}

function getFirstRepeat(sectionid) {
	var section = document.getElementById(sectionid);
	var tables = section.parentElement.getElementsByTagName('TABLE');
	var ret = null;
	for(i=0;i<tables.length;i++)
	{
	   if(tables[i].id.split("..")[0]==sectionid)
	   {
		 ret = tables[i];
		 break;
		}
	}
	return ret;
}

function removeNestedTableRepeats(table)
{
	var all = table.getElementsByTagName("*");
	for(i=0; i<all.length-1; i++)
	{
		if(all[i].id.indexOf("s")==0 & all[i].tagName=="TABLE") //nested table
		{										
			var id = all[i].id;
			//alert("delete id = " + id);
			for(j=i+1; j<all.length-1; j++)
			{
				if(all[j].id.split("..")[0]==id.split("..")[0])
				{
					v = all[j].id;
					
					//remove table
					all[j].parentElement.removeChild(all[j]);
					
					//remove xmlnode
					
					$j = $xml.find('Section[ID="' + v.substring(1) + '"]');
					
					if($j.length==0)
						alert("removeNestedTableRepeats - not found: " + v.substring(1));
					
					if($j.length > 1 )
					{
						try
						{
							$j.slice(1).remove();  //remove from index = 1 down
						}
						catch(err)
						{
							alert("Error in removeNestedTableRepeats: " + err);
						}
					}
					removeNestedTableRepeats(table);
				}
			}
		}
	}
	return table;
}

//gets the id parentSection of +, - buttons
function getParentSectionId(button)
{
	if(button.parentElement.parentElement.parentElement.parentElement.tagName=="TABLE")
		return button.parentElement.parentElement.parentElement.parentElement.id;
	else
		alert("Unexpected tagName");
}

function getParentTable(table)
{
	//get parentTable
	try{
	var parentTable =  table.parentElement.
						   parentElement.
						   parentElement.
						   parentElement.
						   parentElement;
	return parentTable;
	}
	catch(err)
	{
		alert("Error in getParentTable: " + err);
		return;
	}
}

function showHideButtons(table)
{
	//get parentTable
	var parentTable =  getParentTable(table);
	
	//show/hide buttons
	
	//get all siblings of this table
	var siblings = getSiblingTables(parentTable);
	
	//get max repeat for this table - get parent which is DIV and the firstChild of DIV is maxcount
	var max = table.parentElement.firstChild.value;  
	
	//how many repeats are there for this table currently
	var repeat = countSectionRepeats(parentTable, table.id.split("..")[0]);
	
	var inputs = "";
	if(siblings.length==0)
	{
		alert("error in getting siblings");
		return;
	}
	
	if(repeat<max)   
	{
		for (k=0;k<siblings.length; k++)
		{										
			if(siblings[k].id.split("..")[0]==table.id.split("..")[0])
			{	
				inputs = siblings[k].getElementsByTagName('*');
		
				for(m=0;m<inputs.length;m++)
				{
					if(inputs[m].className=="btnAdd")
					{														
						//which section does it belong?
						sectionid = getParentSectionId(inputs[m]);
						
						if(table.id.split("..")[0] != sectionid.split("..")[0])
						{
							//alert(table.id);
							//alert(sectionid);
							continue;
						}													
					
						if(k>0)
						{
							inputs[m].nextSibling.style.visibility = "visible";
							inputs[m].style.visibility = "visible";
						}
						else
						{
							
							inputs[m].nextSibling.style.visibility = "hidden";
							inputs[m].style.visibility = "visible";
						}											
					}
				}
			}
		}
	}
	else
	{
		for (k=0;k<siblings.length; k++)
		{
			if(siblings[k].id.split("..")[0]==table.id.split("..")[0])
			{
				inputs = siblings[k].getElementsByTagName('*');
				for(m=0;m<inputs.length;m++)
				{
					if(inputs[m].className=="btnAdd")
					{
						inputs[m].style.visibility = "hidden";
						
						if(k>0)
							inputs[m].nextSibling.style.visibility = "visible";
					}
				}
			}
		}				
	}								
}
							
function removeSection(obj)
{
	td = obj.parentElement;
	tr = td.parentElement;
	tbody = tr.parentElement;
	table = tbody.parentElement;
	var section = table.parentElement;
	var id = table.id;
	
	parentTable = getParentTable(table);
					   
	//do not let user remove the first instance
	if(table.id.indexOf("..")==-1)
	{
		alert("Cannot remove the first instance.");
		return;
	}
	section.removeChild(table);
							
	id = section.id;
									
	$todelete = $xml.find('Section[ID="' + table.id.substring(1) + '"]');
	if($todelete.length==0)
	{
		//alert("Could not find section with ID = " + table.id.substring(1) + " to delete");
		//return;
	}
	
	$todelete.remove();
	
	$todelete = $xml.find('Section[ID="' + table.id.substring(1) + '"]');
	if($todelete.length!=0)
	{
		//alert("Could not delete Section ID = " + table.id.substring(1));									
	}
	repeatIndex--;
	//update rawxml
	$('#rawxml').val(xmlToString(xmlDoc));
								
	//current table is deleted, so get the first table by going upto the parent, then the first Table
	table = document.getElementById(parentTable.id);
	
	if(table.tagName=="DIV")   //first table is inside DIV element
	{
		table = table.childNodes[1];  //parentTable
		table = table.getElementsByTagName("TABLE")[0]  //firstChild table																		
		
	}
	else  //subsequent repeats are nested inside parent TABLE directly
	{
		
		table = table.getElementsByTagName("TABLE")[0]  //first child table
	}
		
	showHideButtons(table);	
	
}


/*
Helper functions
*/
function trim(input) {
input = input.replace(/^\s+|\s+$/g, '');
return input;
}

function findElementById(parentId, Id) {
   //finds an element among descedants of a given node
   var parent = document.getElementById(parentId);

   var children = parent.getElementsByTagName('*');

   for (i = 0; i < children.length; i++) {

	  if (children[i].id == Id) {
		 return children[i];
	  }
   }
}

function findElementByName(parentName, Name) {
  //finds an element among descedants of a given node
  var parent = document.getElementById(parentName);
  var children = parent.getElementsByTagName('*');
  
  for (i = 0; i < children.length; i++) {
	 if (children[i].name == Name) {
		 return children[i];
	 }
  }
}

function validateSubmit()
{
	//alert('in validate');
	$('input').removeClass('error');
	document.getElementById('navBar').style.display = 'none';
	var retval = false;
	var $allinputs = $("#FormData").find(":input:not([type=hidden], [type=button], [type=submit])")
	$allinputs.each(function() {
		var $test = $(this);
		
		if($test.is(':checkbox') || $test.is(':radio'))
		{
			if($test.prop('checked')==true)
			{
					//alert($test.attr('id'));
				retval = true;
			}
		}
		else
		{
			if($test.val()!='')
			{
				retval = true;
				//alert($test.attr('id'));
			}
		}
	});
	
	//alert(retval);
	if(!retval)
	{
		alert('Error: You have not selected/entered any response on the form.');
		return false; //so 
	}
	
	retval = true;
	
	var $fillins = $(xmlDoc).find("ListItemResponseField")
	
	$fillins.each(function(){
		var answerid = $(this).parent().attr("ID");
		var $answerElement = getAnswerItemByID(answerid, $("#FormData"));
		
		if(!$answerElement.prop('checked') & $answerElement.parent().find(".AnswerTextBox").val()!=''){
				//alert('error');
				$answerElement.parent().find('.AnswerTextBox').addClass('error');
				retval = false;
		}
	})
	//alert(retval);
	if(!retval)
	{
		alert('Error: You have entered text in fill-in box)(es) without selecting the corresponding choice(s)');
		return false;
	}
	
	var requiredResponses = $xml.find("ListItemResponseField[responseRequired='true']");
	retval = true;
	requiredResponses.each(function(){
		var test = $(this);
		var id = test.parent().attr('ID');
		
		var response = test.find('>Response');
		
		if(response.length>0)
		{
			var box = $(document).find(':input[value^="' + id + '"]'); //check/option 
			if(box.length>0)
			{
				var testval = box.siblings('input').val();									
			
				if(testval=='')
				{												
					if(box.is(':checked'))
					{
						box.siblings('input').addClass('error');
						retval = false;
					}													
				}
			}
		}
	});
	
	if(!retval)
	{
		alert('Error: You have not answered all required questions.');
		return false
	}
	return true;
}

function xmlToString(xmlData) 
{
	var xmlString;
	//alert(xmlData);
	xmlString = (new XMLSerializer()).serializeToString(xmlData);
	
	return xmlString;
}

//helper functions end

//submit form calls this function
/*
Builds flatXml, updates the original xml with answers.
Note that new section nodes for repeat sections have already been added (upon clicking btnAdd - addSection function) 
*/
var flatXml;
function openMessageData(submit)
{
	var sb = "";
	var answer = "";
	
	try {
	if(document.getElementById("checklist")==null)
	{
       alert('checklist not found');	
	   //return;
	}
	if(document.getElementById("FormData")==null)
	{
       alert('checklist not found');	
	   return;
	}
	var elem = document.getElementById("checklist").elements;
	//var elem = document.getElementById("FormData").elements;
	var response = "<response>";
	var html = "";
	
	for (var i = 0; i < elem.length; i++) {
		html = "";
		var name = elem[i].name;

		var value;

		var instanceGuid = '';
		
		var id = name;
		var guid = "";
		if (name.indexOf("q") == 0) {
			
			value = elem[i].value;
			
			//make answer xml safe
			answer = GetAnswer(name.substring(1));

			if (answer != "") {
				
				response += "<question ID=\"" + id + "\" display-name=\"" + value.replace(/</g, "&lt;").replace(/>/g, "&gt;") 
						 + "\">";
				response += answer + "</question>";               

				
				newid = id.split('..')[0].substring(1);									
				
				if(id.split('..').length==2)
					guid=id.split('..')[1]
				
				//html += "<div class=\"MessageDataQuestion\">&lt;question ID=\"" + id + "\" guid=\"" + guid + "\" display-name=\"" + value + "";
				html += "<div class=\"MessageDataQuestion\">&lt;question ID=\"" + id.substring(1) +  "\" display-name=\"" + value + "";
				html += "&gt;<br><div class=\"MessageDataAnswer\">" + answer.replace(/</g,"&lt;").replace(/>/g,"&gt;") + "</div>&lt;/question&gt;</div>";
			}
			sb += html;
			answer = "";
		}
	}
	response = response.replace(/<br>/g, "");
	response = response + "</response>";															
	flatXml = response;

	sb = "<div style='font-weight:bold; color:purple'>Flat Xml response</div>" 
		 + "<div class=\"MessageDataChecklist\">&lt;response&gt;" + sb + "&lt;/response&gt;</div>"
		 + "<br/><div style='font-weight:bold; color:purple'>Response xml sent to web service.</div>"
	
	//update Xml with answers
	updateXml();
	
	if(!validateSubmit())
	{
	
		if (confirm('Do you want to submit this form with errors? Click Ok to submit or Cancel to fix errors.')==false)
		{
			return;
		}
	}								
	
	document.getElementById('MessageDataResult').innerHTML = sb;
	document.getElementById('MessageData').style.display = 'block';
	document.getElementById('FormData').style.display = 'none';
	
	//if running from disk 
	if(isLocalMode()) return;

	var test = xmlToString(xmlDoc);
	document.getElementById('rawxml').innerText = test;
	
	if($('#scriptsubmit').is(':checked'))
	{
		//Ajax call to web service
		CallSoapSubmit2(xmlToString(xmlDoc));
		return false;
	}
	else
	{
		//call formreceiver from server side code
		//alert('calling server submit');
		ServerSubmit();

	}
	}
	catch(err)
	{
		alert(err);
	}
}

/* start of functions to call .NET serverside methods*/
function ServerSubmit()
{
	//alert('trace1');
	var xml = document.getElementById("rawxml").value;
	var submiturls = document.getElementById("submiturl").value
	//alert(submiturls);
	//alert('trace2');
	var responsetext = PageMethods.submitform(xml, submiturls, OnServerSucceed, OnServerError);
	//alert('trace3');
	return false;
}

function OnServerSucceed(result)
{
	//alert('Server submit succeded.');
   //server response includes SoapResponse and SoapRequest strings delimited by #!#2#3
	var response = result.split('#!#2#3')[0];
	var request = result.split('#!#2#3')[1];

	//request = formatXml(request);
	$("#submitsoap").val(request);

	response = formatXml(response);
	xml_escaped = response.replace(/&/g, '&amp;').replace(/</g, '&lt;').replace(/>/g, '&gt;').replace(/ /g, '&nbsp;').replace(/\n/g, '<br />');
	
	$("#response").html("<PRE>" + xml_escaped + '</PRE>');
	$("#response").css("background-color", "yellow");
	$("#response").css("display", "block");								
}

function OnServerError(error)
{
	var result = error.get_message();
	alert("Error on server submit: " + result);
	document.getElementById("response").innerText = result;
	document.getElementById("response").style.backgroundColor = "yellow";
	document.getElementById("response").style.color = "red";
}

/* end of functions to call .NET serverside methods */
function closeMessageData() 
{
	document.getElementById('MessageData').style.display = 'none';
	document.getElementById('response').style.display = 'none';
	document.getElementById('FormData').style.display = 'block';
	document.getElementById('navBar').style.display = 'block';
}

function GetAnswer(qCkey) 
{
	
	var elem = document.getElementById("checklist").elements;
	var str = "";
	var name, value;

	for (var i = 0; i < elem.length; i++) {
		name = elem[i].name;
		value = elem[i].value;

		//if (name.indexOf(qCkey) == 0) {
		if (name==qCkey) {	
			if (elem[i].checked || (elem[i].type == "text" && value != "")) {
				{
					var k = value.split(',');

					if (elem[i].type == "text" && value != "") {
						value = value.replace(/&/g,"&amp;")
									 .replace(/</g,"&lt;")
									 .replace(/>/g,"&gt;")
									 .replace(/"/g,"&quot;")
									 .replace(/'/g,"&apos;");
												 
					//alert(answer);
						
						str += "<answer value=\"" + value + "\"/><br>";
					}
					else if (elem[i].type != "text") {
						//str += "&lt;answer ID=\"" + k[0] + "\" display-name=\"" + GetDisplayName(value) + "\"/&gt;<br>";
						str += "<answer ID=\"" + k[0] + "\" display-name=\"" + GetDisplayName(value) + "\"/><br>";
					}
				}
			}
		}
	}
	return str;
}

function GetDisplayName(value) {
	
	var strArray = value.split(',');
	var returnStr = "";
	if (strArray.length > 1) {
		for (var i = 1; i < strArray.length; i++) {
			if (i != strArray.length) {
				returnStr += strArray[i] + ",";
			}
			else {
				returnStr += strArray[i];
			}
		}
	}
	returnStr = returnStr.replace(/</g,"&lt;").replace(/>/g,"&gt;");
	return returnStr.substr(0, returnStr.length - 1);
}


//updates answers in full xml
function updateXml() {
	var $xml = $(xmlDoc);  //full xml
	FlatDoc = $.parseXML(flatXml);
	$xmlFlatDoc = $(FlatDoc);
	$xmlFlatDoc.find('question').each(function () {
		var $question = $(this);
		var questionid = $question.attr("ID");

		questionid = questionid.substring(1);

		var repeat = 0;
		
		//there may be multiple answers per question
		$question.find('answer').each(function () {
			var $test = $(this);
			var id = $test.attr("ID");
			var val = $test.attr("value");

			var $targetQuestion = $(xmlDoc).find("Question[ID='" + questionid + "']");
			var targetQuestionId = $targetQuestion.attr("ID");

			if (id != null) {				 
				var $targetAnswer = $targetQuestion.find("ListItem[ID='" + id + "']");
				$targetAnswer.attr("selected", "true");
				//alert("set selected to true");
				if ($targetAnswer.find("ListItemResponseField") != null) {
					val = $question.find('answer').next().attr("value");
					$response = $targetAnswer.find("Response").children(0);
					$response.attr("val", val);
				}
			}
			else {  //free response
				
				$targetAnswer = $targetQuestion.find("ResponseField").find("Response");
				$targetAnswer.children(0).attr("val", val);
			}
		});
	});
}

function padLeft (str, max) {
  str = str.toString();
  return str.length < max ? padLeft("0" + str, max) : str;
}

//soap 1.2
function CallSoapSubmit2(data) 
{
	if($('#scriptsubmit').length == 0 | (!$('#scriptsubmit').is(':checked')))
	{
		alert("Script Submit is not supported.");
		//serverSubmit(data);
		return;
	}
	
	try
	{
		//get DemogFormDesign and FormDesign element only
	xmlDoc = $.parseXML(data);
	$xml = $(xmlDoc);
	
	var $formdesignelement = $xml.find('FormDesign');
			   
	if($xml.find('DemogFormDesign'))
	{	
		$demog = $xml.find('DemogFormDesign'); 
		$demogNew = $demog.clone(true);
	}

	var $designNew = $formdesignelement.clone(true);
	newDoc = $.parseXML("<SDCSubmissionPackage xmlns='urn:ihe:qrph:sdc:2016'></SDCSubmissionPackage>")
	test = $(newDoc).find("SDCSubmissionPackage");
	
	//add 2018 - pkgInstanceURI, pkgInstanceVersionURI, pkgPreviousInstanceVersionURI, pkgDateTimeStamp
	test.attr("pkgInstanceURI","1223456");
	test.attr("pkgInstanceVersionURI","1223456");
	test.attr("pkgPreviousInstanceVersionURI","1223456");
	
	var d = new Date();

	var month = padLeft(d.getMonth()+1,2);
	var day = padLeft(d.getDate(),2);
	var year = d.getFullYear();
	var hr = padLeft(d.getHours(),2);
	var min = padLeft(d.getMinutes(),2);
	var sec = padLeft(d.getSeconds(),2);
	var fulldate = year + '-' + month + '-' + day + 'T' + hr + ':' + min + ':' + sec;
	//alert(fulldate);
	var dt = new Date("30 July 2010 15:05 UTC");
	//document.write(dt.toISOString());
	//test.attr("pkgDateTimeStamp","2017-11-18T07:53:01");
	//2017-11-18T8:7:34
	test.attr("pkgDateTimeStamp",fulldate);
	test.append($designNew);
	if($demogNew)
	{
		test.prepend($demogNew);						
	}

	data = xmlToString(newDoc);

	//read destination url from xml if present
	var webServiceURL = "";

	$destinations = $xml.find('Destination');
	
	if($destinations.length>0)								
	{
		$.each($destinations, function()
		{	
			webServiceURL = webServiceURL + "|" + $(this).find('Endpoint').attr('val');
		});
	
		webServiceURL = webServiceURL.substring(1);															
	}
	else
	{
		alert('submiturl = ' + $("#submiturl").val());
		webServiceURL = $("#submiturl").val();
		if(webServiceURL=='')
		{
			alert("destination not found.");
			return;
			}
	}
									
	var ns = 'urn:ihe:iti:rfd:2007';

	$.support.cors = true;
	var xmldata = encodeURIComponent(data);
	
	var soapRequest =
						'<soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope"' + 
						' xmlns:urn="' + ns + '">'  + 
						'<soap:Header/>' +
							' <soap:Body>' +
									' <urn:SubmitFormRequest>' +
									 data +
									'</urn:SubmitFormRequest>' +
							' </soap:Body>' +
						' </soap:Envelope>';
								

	$("#submitsoap").val(soapRequest);
	endpoints = webServiceURL.split('|')  //multiple endpoints are separated by |
	numEndpoints = endpoints.length;
	
	//clear before submit
	$("#response").html('');
	
	var currEndpoint='';
	for(i=0;i<numEndpoints;i++)
	{
		currEndpoint = endpoints[i].trim();
		try
		{
			$.ajax({
			type: "POST",
			context:{test:currEndpoint},  //test is the value when call was made and is available in success and error
			url: currEndpoint,
			//contentType: "application/soap+xml;charset=utf-8;",
			contentType: "application/soap+xml;",
			dataType: "xml",
			processData: false,									
			data: soapRequest,
			success: function (response) {OnSuccess(response,this.test)},
			error: function (xhr, message, exception ) {OnError(xhr, message, exception, this.test)}
			});
		}
		catch(err)
		{
			alert("Error when posting submit request to " + currEndpoint + ": " + err);
		}
	}
	return false;
	}
	catch (err)
	{
		alert(err.message);
		return false;
	}
}

//soap 1.1
function CallSoapSubmit1(data) 
{	
	$("#response").val("************");
	
	//get DemogFormDesign and FormDesign element only
	xmlDoc = $.parseXML(data);
	$xml = $(xmlDoc);

	var $formdesignelement = $xml.find('FormDesign');
			   
	if($xml.find('DemogFormDesign'))
	{	
		$demog = $xml.find('DemogFormDesign'); 
		$demogNew = $demog.clone(true);
	}

	var $designNew = $formdesignelement.clone(true);
	newDoc = $.parseXML("<SDCSubmissionPackage xmlns='urn:ihe:qrph:sdc:2016'></SDCSubmissionPackage>")
	test = $(newDoc).find("SDCSubmissionPackage");
	test.append($designNew);
	if($demogNew)
	{
		test.prepend($demogNew);						
	}

	data = xmlToString(newDoc);

	//read destination url from xml if present
	var webServiceURL = "";

	//webServiceURLFromPackage = $xml.find('Destination').find('Endpoint').attr('val');
	$destinations = $xml.find('Destination');
	
	if($destinations.length>0)								
	{
		for(i=0;i<$destinations.length;i++)
		{
			webServiceURL = webServiceURL + "|" + $destinations.find('Endpoint').attr('val');									
			
		}
		webServiceURL = webServiceURL.substring(1);															
	}
	else
	{
		alert('1.1');
		alert("destination not found.");
		return;
	}
	
	if(webServiceURL!="" & $("#submiturl").val()=="")
		$("#submiturl").val(webServiceURL);
	
	webServiceURL = $("#submiturl").val();  
	
	var ns = $("#submitnamespace").val();
	
	$.support.cors = true;
	var xmldata = encodeURIComponent(data);
	
	var soapRequest =
						'<soap:Envelope xmlns:soap="http://schemas.xmlsoap.org/soap/envelope/"' + 
						' xmlns:urn="' + ns + '">'  + 
						'<soap:Header/>' +
							' <soap:Body>' +
									' <urn:SubmitFormRequest>' +
									//' <SDCSubmissionPackage xmlns="urn:ihe:qrph:sdc:2016">' +
									 data +
									// ' </SDCSubmissionPackage>' +
									'</urn:SubmitFormRequest>' +
							' </soap:Body>' +
						' </soap:Envelope>';

	$("#submitsoap").val(soapRequest);

	//soapAction = "SubmitForm";  
	soapAction = $("#submitaction").val();
	
	endpoints = webServiceURL.split('|')  //multiple endpoints are separated by |
	numEndpoints = endpoints.length;
	
	var currEndpoint='';
	
	//clear before submit
	$("#response")='';
	
	//soapRequest='<soap:Envelope xmlns:soap="http://schemas.xmlsoap.org/soap/envelope/" xmlns:urn="urn:ihe:iti:rfd:2007"> <soap:Header/><soap:Body><urn:SubmitFormRequest>test</urn:SubmitFormRequest> </soap:Body></soap:Envelope>'
	//alert(soapRequest);
	for(i=0;i<numEndpoints;i++)
	{
		currEndpoint = endpoints[i].trim();
		
		$.ajax({
		type: "POST",
		context:{test:currEndpoint},  //test is the value when call was made and is available in success and error
		url: currEndpoint,
		contentType: "text/xml",
		dataType: "xml",
		processData: false,
		headers: {
			"SOAPAction": soapAction  
		},
		data: soapRequest,
		success: function (response) {OnSuccess(response,this.test)},
		error: function (response) {OnError(response, this.test)}
	});
	}
	return false;
}

function OnSuccess(data, url) 
{	
	var xmlstring = xmlToString(data);

	xmlstring = formatXml(xmlstring);
	xml_escaped = xmlstring.replace(/&/g,'&amp;').replace(/</g,'&lt;').replace(/>/g,'&gt;').replace(/ /g, '&nbsp;').replace(/\n/g,'<br />');

	if (document.getElementById("response") != null)
	{       	
		$("#response").append("Received Response from " + url  + " - <PRE>" + xml_escaped + '</PRE>');
		$("#response").css("background-color", "yellow");
		$("#response").css("display", "block");
	}	
}

function OnError(xhr, textStatus, errThrown, url) 
{
	//CORS error can only be see in Chrome 
	var xmlstring = xhr.responseText;
		
	if (document.getElementById("response") != null) {       
		$("#response").append("Receiver Response from " + url + " - <PRE>" + xmlstring + '</PRE>');
		$("#response").css("background-color", "white");
		$("#response").css("color", "red");
		$("#response").css("display", "block");
	}
}

//https://gist.github.com/sente/1083506
function formatXml(xml) {
	var formatted = '';
	var reg = /(>)(<)(\/*)/g;
	xml = xml.replace(reg, '$1\r\n$2$3');
	var pad = 0;
	jQuery.each(xml.split('\r\n'), function(index, node) {
		var indent = 0;
		if (node.match( /.+<\/\w[^>]*>$/ )) {
			indent = 0;
		} else if (node.match( /^<\/\w/ )) {
			if (pad != 0) {
				pad -= 1;
			}
		} else if (node.match( /^<\w([^>]*[^\/])?>.*$/ )) {
			indent = 1;
		} else {
			indent = 0;
		}

		var padding = '';
		for (var i = 0; i < pad; i++) {
			padding += '  ';
		}

		formatted += padding + node + '\r\n';
		pad += indent;
	});
	return formatted;
}

function getAnswerItemByID(ID, container)
{
	//finds an answer item within container element
	try{
		//alert(ID + ':' + $(container).find(':input[value^="' + ID + '"]').length);
		return $(container).find(':input[value^="' + ID + '"]');
		}
	catch(e)
	{
		alert(e + ", ID = " + ID);
	}
}


function getAnswerID(answerElement)
{
	var id = $(answerElement).attr('value');
	if (id === undefined || id === null) {
		 // do something 
		 alert("Error in getAnswerID: value attribute not found.");
		 alert($(answerElement).length);
	}
	if(id.indexOf(',')>0)
		id = id.substring(0, id.indexOf(','));
	return id;
}

/*
function getQuestionID(answerElement)
{
	var id = answerElement.attr('name');
	return id;
}
*/

function getSectionID(answerElement)
{
	var $section = $(answerElement).parentsUntil('table').parent();
	//alert($section.get(0).nodeName);
	var sectionid = '';
	if($section.length>0)
	{
		sectionid = $section.get(0).id.substring(1);
	}
	return sectionid;
}

function getAnswerSection(answerElement)
{
   //returns DOM element
	var $section = $(answerElement).parentsUntil('table').parent();
	
	//return the first in the list
	return $($section.get(0));
}

function isSDSAnswer(answerElement)
{
	//alert('isSDS');
	var answerid = getAnswerID(answerElement);
	var sectionid = getSectionID(answerElement);
	var $answer = $xml.find('Section[ID="' + sectionid + '"]').find('ListItem[ID="' + answerid + '"]');
	var attr = $answer.attr('selectionDeselectsSiblings');

	// For some browsers, 'attr' is undefined; for others,
	// 'attr' is false.  Check for both.
	if (typeof attr !== typeof undefined && attr !== false) {
		return true;
	}
	else
	{
		return false;
	}
}

function isFillinAnswerChoice(answerElement)
{
//checks if the checkbox or radio button has fillin-abswer box
	var answerid = getAnswerID(answerElement);
	var sectionid = getSectionID(answerElement);
	var $answer = $xml.find('Section[ID="' + sectionid + '"]').find('ListItem[ID="' + answerid + '"]');
	//alert($answer.child().attr(
	if ($answer.has('> ListItemResponseField').length>0)
		return true;
	else
		return false;	
}

function isFillinInput(answerElement)
{
	//checks if the input box is a fill-in answer input box
	alert($(answerElement).prev().type());
}

function isSDCAnswer(answerElement)
{
	//alert('isSDC');
	var answerid = getAnswerID(answerElement);
	var sectionid = getSectionID(answerElement);
	var $answer = $xml.find('Section[ID="' + sectionid + '"]').find('ListItem[ID="' + answerid + '"]');
	var attr = $answer.attr('selectionDisablesChildren');

	// For some browsers, 'attr' is undefined; for others,
	// 'attr' is false.  Check for both.
	if (typeof attr !== typeof undefined && attr !== false) {
		return true;
	}
	else{
		return false;
	}		
}

function isNestedAnswer(answerElement)
{
	var answerid = getAnswerID(answerElement);
	var sectionid = getSectionID(answerElement);
	var $answer = $xml.find('Section[ID="' + sectionid + '"]').find('ListItem[ID="' + answerid + '"]');
	if($answer.length==0)
		alert('Error in isNestedAnswer');
	var $parent = $answer.parentsUntil('Question').parent();
	if($parent.length==0)
		alert('Error in isNestedAnswer');
	
	if($parent.parent().get(0).nodeName=='ChildItems')
	{
		if($parent.parent().parent().get(0).nodeName=='ListItem')
			return true;
		else
			return false;
	}
	else
	{
		return false;
	}
}

function getAnswerSiblings(answerElement)
{
	//returns xml nodes
	var answerid = getAnswerID(answerElement);
	var sectionid = getSectionID(answerElement);
	var $answer = $xml.find('Section[ID="' + sectionid + '"]').find('ListItem[ID="' + answerid + '"]');
	return $answer.siblings('ListItem');
}

function getNestedAnswers(answerElement)
{
	//return xml nodes
	var answerid = getAnswerID(answerElement);
	var sectionid = getSectionID(answerElement);
	var $answer = $xml.find('Section[ID="' + sectionid + '"]').find('ListItem[ID="' + answerid + '"]');
	return $answer.children("ChildItems").children("Question").children("ListField").children("List").children("ListItem");
}

/*
function getParentAnswerID(answerElement)
{
	//finds answer in xml and returns parentAnswerID
	var answerid = getAnswerID(answerElement);
	var sectionid = getSectionID(answerElement);
	var $answer = $xml.find('Section[ID="' + sectionid + '"]').find('ListItem[ID="' + answerid + '"]');
	if($answer.length==0)
	{
		alert('Error in getParentAnswerID: answerElement not found.answerid=' + answerid);
	}
	var $parent = $answer.parentsUntil('Question').parent();
	if($parent.length==0)
		alert('Error in getParentAnswerID: Question element not found.');
	if($parent.parent().get(0).nodeName=='ChildItems')
	{
		if($parent.parent().parent().get(0).nodeName=='ListItem')
		{
			return $parent.parent().parent().attr('ID');
		}
		else{
			//no parent answer
			return "";
		}
	}
	else
		alert('Error in getParentAnswerID');
}
*/

function isAnswerSelected(answerElement)
{
	return $(answerElement).is(':checked');
}

function SelectAnswer(answerElement, section)
{
	$(answerElement).prop('checked',true);
	$(answerElement).parent().find('.AnswerTextBox').prop('disabled',false);
	
	//if there are any SDS answers they will need to be unchecked
	var $siblings = getAnswerSiblings(answerElement);
	$siblings.each(function() {
		var id = $(this).attr("ID");
		var testElement = getAnswerItemByID(id, section);
		if(isSDSAnswer($(answerElement)))  //if this answer element is SDS, unselect all siblings
		{
			UnSelectAnswer(testElement, section);
		}
		else if(isSDSAnswer(testElement))//if this sibling is SDS 
		{
		   UnSelectAnswer(testElement, section);
		}
		else if ($(answerElement).is(":radio"))  //if this is a single select make sure the siblings and their children are unselected
		{
			
			UnSelectAnswer(testElement, section);
		}
	}
	)
}

function UnSelectAnswer(answerElement, section)
{
	//unselects answerElement and its children recursively
	if(!$(answerElement).is(":checkbox, :radio")) return;
	
		$(answerElement).prop('checked',false);
		
	//unselect all child answers
	var $childanswers = getNestedAnswers(answerElement);
	
	$childanswers.each(function(){
		var childid = $(this).attr("ID");									
		var childelement = getAnswerItemByID(childid, section);
		UnSelectAnswer(childelement,section);
	})
}

function DisableAnswer(answerElement)
{
	$(answerElement).prop('disabled',true);
	//disble children
	$(answerElement).find('*').prop('disabled', true);
}

function EnableAnswer(answerElement)
{
	$(answerElement).prop('disabled',false);
}

function getSelectedListItems(listitems, section)
{
	var $selecteditems = [];
	listitems.each(function() {
		var $answeritem = getAnswerItemByID($(this).attr('ID'),section);
		if(($answeritem).is(':checked'))
			$selecteditems.push($answeritem);
	});
	return $selecteditems;
}

function UncheckChildAnswers(currentInput)
{
	var test;
	$(currentInput).find(':input:checked').prop('checked', false);
}

function UncheckSiblings(currentInput)
{

}
function getSelectedSiblings(currentInput)
{
	var count =0 ;
	var siblings = $(currentInput).parent().siblings();
	siblings.each(function() {
		if($(this).get(0).className=='Answer')
		{
			
			if ($(this).find(':input').is(':checked'))
				count++;
		}	
	});
	if($(currentInput).is(':checked'))
		count++;
	return count;
}

function SelectUnselectDescendents(parentQuestion, event)
{

}

function SelectUnselectChoiceOnBlur(choiceID, element)
{
	var $section = getAnswerSection(element);
	var $answeritem = getAnswerItemByID(choiceID, $section);
	return;
	
	if($(element).val()!='')
		SelectAnswer($answeritem, $section);
	else
		UnSelectAnswer($answeritem, $section);
}

function OnChoiceBlur(choiceID, element)
{
	var $section = getAnswerSection(element);
	//alert(choiceID);
	var $answeritem = getAnswerItemByID(choiceID, $section);
	var $input = $answeritem.parent().find('.AnswerTextBox');
	
	$input.removeClass('error');
	
	if(!$answeritem.is(':checked'))
	{
		if($input.val()!='')
		{
			//$answeritem.siblings('input').addClass('error');
			//$input.removeClass('error');
			//$input.addClass('error');
			//alert($input.val());
		}
		//$input.prop('disabled',true);
	}
}

//changing fill-in value calls this function
function SelectChoiceOnKeyPress(choiceID, element, event)
{
	//if control characters return
	var keycode = (event.keyCode ? event.keyCode : event.which);
	
	if(keycode==8) return;
	var $answeritem = $(element).parent().parent().find('input:radio, input:checkbox');
	$($answeritem).prop('checked',true);
	
	var $section = getAnswerSection($answeritem.get(0));
	var parentid = getParentAnswerID($answeritem.get(0));
	if(parentid==null || parentid=='')
		return;
		
	var parent = getAnswerItemByID(parentid, $section);
	
	SelectAnswer(parent, $section);	
}

function SelectUnselectParents(parentQuestion, element)
{
	/* parentQuestion: questionid of the answer clicked */
	if (!$(element).is(":checkbox, :radio"))  //only if the element is a radio or a checkbox
	{
		return;
	}
	var issingleselect = $(element).is(":radio");
	var answerid = getAnswerID(element);  //$(event.target).attr("name");
	//alert(answerid);
	var selecttype = $(element).attr('type');
	var $section = getAnswerSection(element);
	var $answeritem = getAnswerItemByID(answerid, $section);
	var selected = $answeritem.is(':checked');  //value is true or false
	var sectionId = getSectionID(element);
	
	var $siblings = getAnswerSiblings(element);
	var $childanswers = getNestedAnswers(element);
	
	var parentid = getParentAnswerID(element);
	
	var selectedsiblings = $(getSelectedListItems($siblings,$section)).length;
	
	/*
	SELECT/UNSELECT PARENT ANSWER
	if current item or one or more of its siblings are selected
	  select the parent answer
	*/
	if( selected || (selectedsiblings > 0))
	{
		//select parent answer
		
		if(parentid=="")
		{
			//alert('no parent answer');
		}
		else{
			var parent = getAnswerItemByID(parentid, $section);	
			
			//if parent is SDC, don't select it 
			if(!isSDCAnswer(parent))
			{	
				SelectAnswer(parent, $section);											
			}
		}									
	}
	else  //neither this answer nor any of its siblings are selected, unselect parent
	{
		//unselect parent answer
		UnSelectAnswer(getAnswerItemByID(parentid, $section),$section);
	}
	
	/*
	 UNSELECT all child answers if current answer is not selected
	*/
	
	if(selected==false){
		//unckeck all children
		
		$childanswers.each(function(){
			var childid = $(this).attr("ID");
			UnSelectAnswer(getAnswerItemByID(childid, $section),$section);
		})
	}
	
	//selection disables children
	if (isSDCAnswer(element) & selected)
	{
	   try{
			//go to the Answer level and disable all answer choices at first
			$(element).parent().parent().find('* [type=checkbox], [type=radio], [type=text]').prop('disabled', true);
			//uncheck all answers
			$(element).parent().parent().find('* [type=checkbox],[type=radio]').prop('checked', false);
			//enable just this answer
			EnableAnswer(element);  //EnableAnswer will enable checkbox/radio and fill-in box 
			//check just this answer
			SelectAnswer(element, $section);
	   }
	   catch(err)
	   {
			alert(err);
	   }
	}
	else 
	{
		//enable children								
		try{
			$(element).parent().parent().find('* [type=checkbox], [type=radio]').prop('disabled', false);	
	   }
	   
	   catch(err)
	   {
			alert(err);
	   }
	}
	
	//selection deselects siblings
	if(isSDSAnswer(element) & selected)
	{
		//unselect all siblings
		$siblings.each(function() {
	
			var id = $(this).attr("ID");
			UnSelectAnswer(getAnswerItemByID(id, $section), $section);  //unselect will disable fill-in also
		})
	}
	else if(!isSDSAnswer(element) & selected)
	{
		//all SDSAnswers must be unselected
		$siblings.each(function()
		{
			var id = $(this).attr("ID");
			var testElement = getAnswerItemByID(id, $section);
			
			if(isSDSAnswer(testElement))
			   UnSelectAnswer(testElement, $section);    //unselect will disable fill-in also
		})
	}
	
	//enable/disable fillin boxes
	if(selected & isFillinAnswerChoice(element))
	{
		//enable fillin box
		//var $input = $(element).parent().find('.AnswerTextBox');
		//$input.prop('disabled',false);
		
	}
	else if (!selected & isFillinAnswerChoice(element))
	{
		//disable fillin box
		//var $input = $(element).parent().find('.AnswerTextBox');
		//$input.prop('disabled',true);
	}
	
	if(selected & $(element).is(":radio"))
	{ 
		$siblings.each(function(){
			var sibling = $(this);
		UnSelectAnswer(sibling, $section);		
		});
	}
}							
						
					</script><script></script></head>
  <body align="left"><nav style="position: fixed; font-size:smaller;" id="navBar"><a href="##" onclick="toggle_metadata();">
                  Toggle Metadata
               </a><br><a href="##" onclick="toggle_id();">
                  Toggle IDs
               </a><br><a style="display:inline-block; max-width:100px" href="##" id="mnuRequired" onclick="toggle_mustImplement();">
                  Toggle optional items
              </a><br><a href="##" class="collapse_all_control">
				Toggle All
			  </a><br><a href="##" class="collapse_control">
				Toggle Sections
			 </a><br><a href="##" class="collapse_q_control">
				Toggle Questions
			 </a><br><a href="##" class="collapse_name" onclick="toggle_name();"> 
					Toggle Name
				</a></nav><div class="BodyGroup">
      <div id="confirmBox">
        <div class="message"></div><span class="yes">Yes</span><span class="no">No</span></div>
      <div id="MessageData" style="display:none;">
        <table class="HeaderGroup" align="center">
          <tr>
            <td>
              <div class="TopHeader">
										Structured Report Data
									</div>
              <div id="MessageDataResult" class="MessageDataResult"></div>
              <div class="SubmitButton"><input type="button" value="Back" onClick="javascript:closeMessageData()"></div>
            </td>
          </tr>
        </table>
      </div><br style="clear:both"><div id="response" style="display:none;"></div>
      <div id="FormData">
        <form id="checklist" name="checklist" method="post" action="">
          <div class="form-version"></div>
          <div class="formTitle">LUNG</div>
          <div>
            <div id="columnarblock">
              <div id="left-column">
                <p class=""><b>GenericHeaderText</b>
													:
												Surgical Pathology Cancer Case Summary</p>
                <p class=""><b>Category</b>
													:
												Thorax</p>
                <p class=""><b>OfficialName</b>
													:
												LUNG</p>
                <p class=""><b>CAP_ProtocolName</b>
													:
												Lung: Resection</p>
                <p class=""><b>CAP_ProtocolShortName</b>
													:
												Lung</p>
                <p class=""><b>CAP_ProtocolVersion</b>
													:
												4.1.0.1</p>
                <p class=""><b>TemplateID</b>
													:
												119.100004300</p>
                <p class=""><b>Restrictions</b>
													:
												Please refer to the cancer protocol cover page (www.cap.org/cancerprotocols) for information about which tumor types and procedures can be reported using this template.</p>
                <p class=""><b>CAP_Required</b>
													:
												true</p>
                <p class=""><b>AccreditationDate</b>
													:
												11/1/2020</p>
                <p class=""><b>WebPostingDate</b>
													:
												4/29/2020</p>
                <p class=""><b>ReleaseStatus</b>
													:
												REL</p>
                <p class=""><b>AJCC_Version</b>
													:
												8th Edition</p>
              </div>
              <div id="right-column"></div>
            </div>
          </div>
          <div style="clear:both"></div>
          <hr>
          <div id="s15656.100004300"><input id="maxcardinality" type="hidden" value=""><table class="HeaderTable" align="center" id="s15656.100004300">
              <tr>
                <td>
                  <div class="TopHeader collapsable">
                    <div style="display:inline" class="idDisplay"><a onClick="javascript:syncItem(this)" name="15656">15656
            	-  
			</a></div>SPECIMEN<div style="display:inline" class="MetadataDisplay">
                      <div class="MetadataDisplay" style="display:inline">
					&#xA0;<div class="nameDiv">
                          <div class="name">name: </div>
                          <div class="nameValue">S_15656</div>
                        </div>
                      </div>
                      <div class="ChangeDisplay"></div>
                    </div>
                  </div>
                  <div style="clear:both"></div>
                  <div class="question" id="q43094.100004300"><input type="hidden" class="TextBox" name="q43094.100004300" value="?Synchronous Tumors (required if morphologically distinct unrelated multiple primary tumors are present)"><input id="maxcardinality" type="hidden" value=""><div class="QuestionInSection">
                      <div class="QuestionTitle collapsable_q">
                        <div style="display:inline" class="idDisplay"><a onClick="javascript:syncItem(this)" name="43094">43094
            	-  
			</a></div>?Synchronous Tumors (required if morphologically distinct unrelated multiple primary tumors are present)<div style="display:inline-block" class="metadata"></div>
                        <div class="MetadataDisplay" style="display:inline-block"></div>
                        <div class="MetadataDisplay" style="display:inline">
         				&#xA0;<div class="reportText">
         			rptText:
         				</div>
                          <div class="metadataTextValue">Synchronous Tumors</div>
         		&#xA0;<div class="nameDiv">
                            <div class="name">name: </div>
                            <div class="metadataTextValue">
                              <div class="nameValue">Q_43094</div>
                            </div>
                          </div>
                        </div>
                        <div class="ChangeDisplay"></div>
                        <div class="MetadataDisplay"></div>
                        <div class="ChangeDisplay"></div>
                      </div><a class="QuestionReset" onclick="resetAnswer(this);return false" href="&#xA;								#&#xA;							">(reset)</a><div class="command"></div>
                      <div style="clear:both;"></div>
                      <div class="Answer"><input type="radio" style="float:left" name="43094.100004300" value="41654.100004300,?Not applicable" onchange="&#xA;						javascript:SelectUnselectParents('q43094.100004300', this);&#xA;					" onblur="&#xA;						javascript:OnChoiceBlur('41654.100004300', this)&#xA;					"><div class="itemTitle">
                          <div style="display:inline" class="idDisplay"><a onClick="javascript:syncItem(this)" name="41654">41654
            	-  
			</a></div>?Not applicable<div class="MetadataDisplay">
               &#xA0;<div class="omitWhenSel">ows </div>
                          </div>
                          <div class="ChangeDisplay"></div>
                          <div class="MetadataDisplay" style="display:inline">
         				&#xA0;<div class="reportText">
         			rptText:
         				</div>
                            <div class="metadataTextValue">Not applicable</div>
         		&#xA0;<div class="nameDiv">
                              <div class="name">name: </div>
                              <div class="metadataTextValue">
                                <div class="nameValue">LI_41654</div>
                              </div>
                            </div>
                          </div>
                          <div class="ChangeDisplay"></div>
                          <div style="display:inline" class="MetadataDisplay"></div>
                        </div>
                      </div>
                      <div>
                        <div class="ListNote">
                          <div style="display:inline" class="idDisplay"><a onClick="javascript:syncItem(this)" name="41671">41671
            	-  
			</a></div># Morphologically distinct tumors that are considered to represent separate primary lung cancers should have separate synoptic reports<div style="display:inline" class="MetadataDisplay">
                            <div class="MetadataDisplay" style="display:inline">
						&#xA0;<div class="reportText">
							rptText:
						</div>
                              <div class="metadataTextValue">{no text}</div>
					&#xA0;<div class="nameDiv">
                                <div class="name">name: </div>
                                <div class="metadataTextValue">
                                  <div class="nameValue">DI_41671</div>
                                </div>
                              </div>
                            </div>
                            <div class="ChangeDisplay"></div>
                          </div>
                        </div>
                        <div style="clear:both;"></div>
                      </div>
                      <div class="Answer"><input type="radio" style="float:left" name="43094.100004300" value="43088.100004300,Present#" onchange="&#xA;						javascript:SelectUnselectParents('q43094.100004300', this);&#xA;					" onblur="&#xA;						javascript:OnChoiceBlur('43088.100004300', this)&#xA;					"><div class="itemTitle">
                          <div style="display:inline" class="idDisplay"><a onClick="javascript:syncItem(this)" name="43088">43088
            	-  
			</a></div>Present#<div class="MetadataDisplay"></div>
                          <div class="ChangeDisplay"></div>
                          <div class="MetadataDisplay" style="display:inline">
         				&#xA0;<div class="reportText">
         			rptText:
         				</div>
                            <div class="metadataTextValue">Present</div>
         		&#xA0;<div class="nameDiv">
                              <div class="name">name: </div>
                              <div class="metadataTextValue">
                                <div class="nameValue">LI_43088</div>
                              </div>
                            </div>
                          </div>
                          <div class="ChangeDisplay"></div>
                          <div style="display:inline" class="MetadataDisplay"></div>
                        </div>
                      </div>
                      <div class="question" id="q41677.100004300"><input type="hidden" class="TextBox" name="q41677.100004300" value="Specify Total Number of Primary Tumors Identified"><input id="maxcardinality" type="hidden" value=""><div class="QuestionInListItem">
                          <div class="QuestionTitle collapsable_q">
                            <div style="display:inline" class="idDisplay"><a onClick="javascript:syncItem(this)" name="41677">41677
            	-  
			</a></div>Specify Total Number of Primary Tumors Identified<div style="display:inline" class="MetadataDisplay">
                              <div class="MetadataDisplay" style="display:inline-block"></div>
                              <div class="MetadataDisplay" style="display:inline">
         				&#xA0;<div class="reportText">
         			rptText:
         				</div>
                                <div class="metadataTextValue">Total Number of Primary Tumors Identified</div>
         		&#xA0;<div class="nameDiv">
                                  <div class="name">name: </div>
                                  <div class="metadataTextValue">
                                    <div class="nameValue">Q_41677</div>
                                  </div>
                                </div>
                              </div>
                              <div class="ChangeDisplay"></div>
                              <div class="MetadataDisplay">
         		&#xA0;<div class="ResponseUnits">dt: </div>
                                <div class="metadataTextValue">integer</div>
         		&#xA0;	</div>
                              <div class="ChangeDisplay"></div>
                            </div><input type="text" class="TextBox" name="41677.100004300" value=""></div>
                          <div class="command"></div>
                          <div style="clear:both;"></div>
                          <div style="clear:both;"></div>
                        </div>
                      </div>
                      <div class="question" id="q41680.100004300"><input type="hidden" class="TextBox" name="q41680.100004300" value="Specimen ID(s)"><input id="maxcardinality" type="hidden" value=""><div class="QuestionInListItem">
                          <div class="QuestionTitle collapsable_q">
                            <div style="display:inline" class="idDisplay"><a onClick="javascript:syncItem(this)" name="41680">41680
            	-  
			</a></div>Specimen ID(s)<div style="display:inline" class="MetadataDisplay">
                              <div class="MetadataDisplay" style="display:inline-block"></div>
                              <div class="MetadataDisplay" style="display:inline">
         		&#xA0;<div class="nameDiv">
                                  <div class="name">name: </div>
                                  <div class="metadataTextValue">
                                    <div class="nameValue">Q_41680</div>
                                  </div>
                                </div>
                              </div>
                              <div class="ChangeDisplay"></div>
                              <div class="MetadataDisplay">
         		&#xA0;<div class="ResponseUnits">dt: </div>
                                <div class="metadataTextValue">string</div>
         		&#xA0;	</div>
                              <div class="ChangeDisplay"></div>
                            </div><input type="text" class="TextBox" name="41680.100004300" value=""></div>
                          <div class="command"></div>
                          <div style="clear:both;"></div>
                          <div style="clear:both;"></div>
                        </div>
                      </div>
                      <div class="Answer"><input type="radio" style="float:left" name="43094.100004300" value="43097.100004300,Cannot be determined" onchange="&#xA;						javascript:SelectUnselectParents('q43094.100004300', this);&#xA;					" onblur="&#xA;						javascript:OnChoiceBlur('43097.100004300', this)&#xA;					"><div class="itemTitle">
                          <div style="display:inline" class="idDisplay"><a onClick="javascript:syncItem(this)" name="43097">43097
            	-  
			</a></div>Cannot be determined<div class="MetadataDisplay"></div>
                          <div class="ChangeDisplay"></div>
                          <div class="MetadataDisplay" style="display:inline">
         		&#xA0;<div class="nameDiv">
                              <div class="name">name: </div>
                              <div class="metadataTextValue">
                                <div class="nameValue">LI_43097</div>
                              </div>
                            </div>
                          </div>
                          <div class="ChangeDisplay"></div>
                          <div style="display:inline" class="MetadataDisplay"></div>
                        </div>
                      </div>
                      <div style="clear:both;"></div>
                    </div>
                  </div>
                  <div class="question" id="q55856.100004300"><input type="hidden" class="TextBox" name="q55856.100004300" value="Procedure"><input id="maxcardinality" type="hidden" value=""><div class="QuestionInSection">
                      <div class="QuestionTitle collapsable_q">
                        <div style="display:inline" class="idDisplay"><a onClick="javascript:syncItem(this)" name="55856">55856
            	-  
			</a></div>Procedure<div style="display:inline-block" class="metadata"></div>
                        <div class="MetadataDisplay" style="display:inline-block"></div>
                        <div class="MetadataDisplay" style="display:inline">
         		&#xA0;<div class="nameDiv">
                            <div class="name">name: </div>
                            <div class="metadataTextValue">
                              <div class="nameValue">Q_55856</div>
                            </div>
                          </div>
                        </div>
                        <div class="ChangeDisplay"></div>
                        <div class="MetadataDisplay"></div>
                        <div class="ChangeDisplay"></div>
                      </div><a class="QuestionReset" onclick="resetAnswer(this);return false" href="&#xA;								#&#xA;							">(reset)</a><div class="command"></div>
                      <div style="clear:both;"></div>
                      <div class="Answer"><input type="checkbox" style="float:left;" name="55856.100004300" value="1687.100004300,Wedge resection" onchange="&#xA;						javascript:SelectUnselectParents('q55856.100004300', this)&#xA;					" onblur="&#xA;						javascript:OnChoiceBlur('1687.100004300', this)&#xA;					"><div class="itemTitle">
                          <div style="display:inline" class="idDisplay"><a onClick="javascript:syncItem(this)" name="1687">1687
            	-  
			</a></div>Wedge resection<div class="MetadataDisplay"></div>
                          <div class="ChangeDisplay"></div>
                          <div class="MetadataDisplay" style="display:inline">
         		&#xA0;<div class="nameDiv">
                              <div class="name">name: </div>
                              <div class="metadataTextValue">
                                <div class="nameValue">LI_1687</div>
                              </div>
                            </div>
                          </div>
                          <div class="ChangeDisplay"></div>
                          <div style="display:inline" class="MetadataDisplay"></div>
                        </div>
                      </div>
                      <div class="Answer"><input type="checkbox" style="float:left;" name="55856.100004300" value="1688.100004300,Segmentectomy" onchange="&#xA;						javascript:SelectUnselectParents('q55856.100004300', this)&#xA;					" onblur="&#xA;						javascript:OnChoiceBlur('1688.100004300', this)&#xA;					"><div class="itemTitle">
                          <div style="display:inline" class="idDisplay"><a onClick="javascript:syncItem(this)" name="1688">1688
            	-  
			</a></div>Segmentectomy<div class="MetadataDisplay"></div>
                          <div class="ChangeDisplay"></div>
                          <div class="MetadataDisplay" style="display:inline">
         		&#xA0;<div class="nameDiv">
                              <div class="name">name: </div>
                              <div class="metadataTextValue">
                                <div class="nameValue">LI_1688</div>
                              </div>
                            </div>
                          </div>
                          <div class="ChangeDisplay"></div>
                          <div style="display:inline" class="MetadataDisplay"></div>
                        </div>
                      </div>
                      <div class="Answer"><input type="checkbox" style="float:left;" name="55856.100004300" value="1689.100004300,Lobectomy" onchange="&#xA;						javascript:SelectUnselectParents('q55856.100004300', this)&#xA;					" onblur="&#xA;						javascript:OnChoiceBlur('1689.100004300', this)&#xA;					"><div class="itemTitle">
                          <div style="display:inline" class="idDisplay"><a onClick="javascript:syncItem(this)" name="1689">1689
            	-  
			</a></div>Lobectomy<div class="MetadataDisplay"></div>
                          <div class="ChangeDisplay"></div>
                          <div class="MetadataDisplay" style="display:inline">
         		&#xA0;<div class="nameDiv">
                              <div class="name">name: </div>
                              <div class="metadataTextValue">
                                <div class="nameValue">LI_1689</div>
                              </div>
                            </div>
                          </div>
                          <div class="ChangeDisplay"></div>
                          <div style="display:inline" class="MetadataDisplay"></div>
                        </div>
                      </div>
                      <div class="Answer"><input type="checkbox" style="float:left;" name="55856.100004300" value="53752.100004300,Completion lobectomy" onchange="&#xA;						javascript:SelectUnselectParents('q55856.100004300', this)&#xA;					" onblur="&#xA;						javascript:OnChoiceBlur('53752.100004300', this)&#xA;					"><div class="itemTitle">
                          <div style="display:inline" class="idDisplay"><a onClick="javascript:syncItem(this)" name="53752">53752
            	-  
			</a></div>Completion lobectomy<div class="MetadataDisplay"></div>
                          <div class="ChangeDisplay"></div>
                          <div class="MetadataDisplay" style="display:inline">
         		&#xA0;<div class="nameDiv">
                              <div class="name">name: </div>
                              <div class="metadataTextValue">
                                <div class="nameValue">LI_53752</div>
                              </div>
                            </div>
                          </div>
                          <div class="ChangeDisplay"></div>
                          <div style="display:inline" class="MetadataDisplay"></div>
                        </div>
                      </div>
                      <div class="Answer"><input type="checkbox" style="float:left;" name="55856.100004300" value="43281.100004300,Sleeve lobectomy" onchange="&#xA;						javascript:SelectUnselectParents('q55856.100004300', this)&#xA;					" onblur="&#xA;						javascript:OnChoiceBlur('43281.100004300', this)&#xA;					"><div class="itemTitle">
                          <div style="display:inline" class="idDisplay"><a onClick="javascript:syncItem(this)" name="43281">43281
            	-  
			</a></div>Sleeve lobectomy<div class="MetadataDisplay"></div>
                          <div class="ChangeDisplay"></div>
                          <div class="MetadataDisplay" style="display:inline">
         		&#xA0;<div class="nameDiv">
                              <div class="name">name: </div>
                              <div class="metadataTextValue">
                                <div class="nameValue">LI_43281</div>
                              </div>
                            </div>
                          </div>
                          <div class="ChangeDisplay"></div>
                          <div style="display:inline" class="MetadataDisplay"></div>
                        </div>
                      </div>
                      <div class="Answer"><input type="checkbox" style="float:left;" name="55856.100004300" value="15717.100004300,Bilobectomy" onchange="&#xA;						javascript:SelectUnselectParents('q55856.100004300', this)&#xA;					" onblur="&#xA;						javascript:OnChoiceBlur('15717.100004300', this)&#xA;					"><div class="itemTitle">
                          <div style="display:inline" class="idDisplay"><a onClick="javascript:syncItem(this)" name="15717">15717
            	-  
			</a></div>Bilobectomy<div class="MetadataDisplay"></div>
                          <div class="ChangeDisplay"></div>
                          <div class="MetadataDisplay" style="display:inline">
         		&#xA0;<div class="nameDiv">
                              <div class="name">name: </div>
                              <div class="metadataTextValue">
                                <div class="nameValue">LI_15717</div>
                              </div>
                            </div>
                          </div>
                          <div class="ChangeDisplay"></div>
                          <div style="display:inline" class="MetadataDisplay"></div>
                        </div>
                      </div>
                      <div class="Answer"><input type="checkbox" style="float:left;" name="55856.100004300" value="1690.100004300,Pneumonectomy" onchange="&#xA;						javascript:SelectUnselectParents('q55856.100004300', this)&#xA;					" onblur="&#xA;						javascript:OnChoiceBlur('1690.100004300', this)&#xA;					"><div class="itemTitle">
                          <div style="display:inline" class="idDisplay"><a onClick="javascript:syncItem(this)" name="1690">1690
            	-  
			</a></div>Pneumonectomy<div class="MetadataDisplay"></div>
                          <div class="ChangeDisplay"></div>
                          <div class="MetadataDisplay" style="display:inline">
         		&#xA0;<div class="nameDiv">
                              <div class="name">name: </div>
                              <div class="metadataTextValue">
                                <div class="nameValue">LI_1690</div>
                              </div>
                            </div>
                          </div>
                          <div class="ChangeDisplay"></div>
                          <div style="display:inline" class="MetadataDisplay"></div>
                        </div>
                      </div>
                      <div class="Answer"><input type="checkbox" style="float:left;" name="55856.100004300" value="1686.100004300,Major airway resection (specify)" onchange="&#xA;						javascript:SelectUnselectParents('q55856.100004300', this)&#xA;					" onblur="&#xA;						javascript:OnChoiceBlur('1686.100004300', this)&#xA;					"><div class="itemTitle">
                          <div style="display:inline" class="idDisplay"><a onClick="javascript:syncItem(this)" name="1686">1686
            	-  
			</a></div>Major airway resection (specify)<div class="MetadataDisplay"></div>
                          <div class="ChangeDisplay"></div>
                          <div class="MetadataDisplay" style="display:inline">
         				&#xA0;<div class="reportText">
         			rptText:
         				</div>
                            <div class="metadataTextValue">Major airway resection</div>
         		&#xA0;<div class="nameDiv">
                              <div class="name">name: </div>
                              <div class="metadataTextValue">
                                <div class="nameValue">LI_1686</div>
                              </div>
                            </div>
                          </div>
                          <div class="ChangeDisplay"></div>
                          <div style="display:inline" class="MetadataDisplay"></div>
                          <div class="MetadataDisplay">
               &#xA0;<div class="responseRequired">respReq: </div>
         		&#xA0;<div class="ResponseUnits">dt: </div>
                            <div class="metadataTextValue">string</div>
         		&#xA0;	</div>
                          <div class="ChangeDisplay"></div><input type="text" class="AnswerTextBox" name="55856.100004300" value="" onkeydown="&#xA;							javascript:SelectChoiceOnKeyPress('1686.100004300', this, event)&#xA;						" onblur="&#xA;							javascript:SelectUnselectChoiceOnBlur('1686.100004300', this)&#xA;						"></div>
                      </div>
                      <div class="Answer"><input type="checkbox" style="float:left;" name="55856.100004300" value="1691.100004300,Other (specify)" onchange="&#xA;						javascript:SelectUnselectParents('q55856.100004300', this)&#xA;					" onblur="&#xA;						javascript:OnChoiceBlur('1691.100004300', this)&#xA;					"><div class="itemTitle">
                          <div style="display:inline" class="idDisplay"><a onClick="javascript:syncItem(this)" name="1691">1691
            	-  
			</a></div>Other (specify)<div class="MetadataDisplay"></div>
                          <div class="ChangeDisplay"></div>
                          <div class="MetadataDisplay" style="display:inline">
         				&#xA0;<div class="reportText">
         			rptText:
         				</div>
                            <div class="metadataTextValue">{no text}</div>
         		&#xA0;<div class="nameDiv">
                              <div class="name">name: </div>
                              <div class="metadataTextValue">
                                <div class="nameValue">LI_1691</div>
                              </div>
                            </div>
                          </div>
                          <div class="ChangeDisplay"></div>
                          <div style="display:inline" class="MetadataDisplay"></div>
                          <div class="MetadataDisplay">
               &#xA0;<div class="responseRequired">respReq: </div>
         		&#xA0;<div class="ResponseUnits">dt: </div>
                            <div class="metadataTextValue">string</div>
         		&#xA0;	</div>
                          <div class="ChangeDisplay"></div><input type="text" class="AnswerTextBox" name="55856.100004300" value="" onkeydown="&#xA;							javascript:SelectChoiceOnKeyPress('1691.100004300', this, event)&#xA;						" onblur="&#xA;							javascript:SelectUnselectChoiceOnBlur('1691.100004300', this)&#xA;						"></div>
                      </div>
                      <div class="Answer"><input type="checkbox" style="float:left;" name="55856.100004300" value="1692.100004300,Not specified" onchange="&#xA;						javascript:SelectUnselectParents('q55856.100004300', this)&#xA;					" onblur="&#xA;						javascript:OnChoiceBlur('1692.100004300', this)&#xA;					"><div class="itemTitle">
                          <div style="display:inline" class="idDisplay"><a onClick="javascript:syncItem(this)" name="1692">1692
            	-  
			</a></div>Not specified<div class="MetadataDisplay">
               &#xA0;<div class="sds">sds </div>
                          </div>
                          <div class="ChangeDisplay"></div>
                          <div class="MetadataDisplay" style="display:inline">
         		&#xA0;<div class="nameDiv">
                              <div class="name">name: </div>
                              <div class="metadataTextValue">
                                <div class="nameValue">LI_1692</div>
                              </div>
                            </div>
                          </div>
                          <div class="ChangeDisplay"></div>
                          <div style="display:inline" class="MetadataDisplay"></div>
                        </div>
                      </div>
                      <div style="clear:both;"></div>
                    </div>
                  </div>
                  <div class="question" id="q1693.100004300"><input type="hidden" class="TextBox" name="q1693.100004300" value="Specimen Laterality"><input id="maxcardinality" type="hidden" value=""><div class="QuestionInSection">
                      <div class="QuestionTitle collapsable_q">
                        <div style="display:inline" class="idDisplay"><a onClick="javascript:syncItem(this)" name="1693">1693
            	-  
			</a></div>Specimen Laterality<div style="display:inline-block" class="metadata"></div>
                        <div class="MetadataDisplay" style="display:inline-block"></div>
                        <div class="MetadataDisplay" style="display:inline">
         		&#xA0;<div class="nameDiv">
                            <div class="name">name: </div>
                            <div class="metadataTextValue">
                              <div class="nameValue">Q_1693</div>
                            </div>
                          </div>
                        </div>
                        <div class="ChangeDisplay"></div>
                        <div class="MetadataDisplay"></div>
                        <div class="ChangeDisplay"></div>
                      </div><a class="QuestionReset" onclick="resetAnswer(this);return false" href="&#xA;								#&#xA;							">(reset)</a><div class="command"></div>
                      <div style="clear:both;"></div>
                      <div class="Answer"><input type="radio" style="float:left" name="1693.100004300" value="1694.100004300,Right" onchange="&#xA;						javascript:SelectUnselectParents('q1693.100004300', this);&#xA;					" onblur="&#xA;						javascript:OnChoiceBlur('1694.100004300', this)&#xA;					"><div class="itemTitle">
                          <div style="display:inline" class="idDisplay"><a onClick="javascript:syncItem(this)" name="1694">1694
            	-  
			</a></div>Right<div class="MetadataDisplay"></div>
                          <div class="ChangeDisplay"></div>
                          <div class="MetadataDisplay" style="display:inline">
         		&#xA0;<div class="nameDiv">
                              <div class="name">name: </div>
                              <div class="metadataTextValue">
                                <div class="nameValue">LI_1694</div>
                              </div>
                            </div>
                          </div>
                          <div class="ChangeDisplay"></div>
                          <div style="display:inline" class="MetadataDisplay"></div>
                        </div>
                      </div>
                      <div class="Answer"><input type="radio" style="float:left" name="1693.100004300" value="1695.100004300,Left" onchange="&#xA;						javascript:SelectUnselectParents('q1693.100004300', this);&#xA;					" onblur="&#xA;						javascript:OnChoiceBlur('1695.100004300', this)&#xA;					"><div class="itemTitle">
                          <div style="display:inline" class="idDisplay"><a onClick="javascript:syncItem(this)" name="1695">1695
            	-  
			</a></div>Left<div class="MetadataDisplay"></div>
                          <div class="ChangeDisplay"></div>
                          <div class="MetadataDisplay" style="display:inline">
         		&#xA0;<div class="nameDiv">
                              <div class="name">name: </div>
                              <div class="metadataTextValue">
                                <div class="nameValue">LI_1695</div>
                              </div>
                            </div>
                          </div>
                          <div class="ChangeDisplay"></div>
                          <div style="display:inline" class="MetadataDisplay"></div>
                        </div>
                      </div>
                      <div class="Answer"><input type="radio" style="float:left" name="1693.100004300" value="1696.100004300,Not specified" onchange="&#xA;						javascript:SelectUnselectParents('q1693.100004300', this);&#xA;					" onblur="&#xA;						javascript:OnChoiceBlur('1696.100004300', this)&#xA;					"><div class="itemTitle">
                          <div style="display:inline" class="idDisplay"><a onClick="javascript:syncItem(this)" name="1696">1696
            	-  
			</a></div>Not specified<div class="MetadataDisplay"></div>
                          <div class="ChangeDisplay"></div>
                          <div class="MetadataDisplay" style="display:inline">
         		&#xA0;<div class="nameDiv">
                              <div class="name">name: </div>
                              <div class="metadataTextValue">
                                <div class="nameValue">LI_1696</div>
                              </div>
                            </div>
                          </div>
                          <div class="ChangeDisplay"></div>
                          <div style="display:inline" class="MetadataDisplay"></div>
                        </div>
                      </div>
                      <div style="clear:both;"></div>
                    </div>
                  </div>
                  <div style="clear:both"></div>
                </td>
              </tr>
            </table>
          </div>
          <div id="s15657.100004300"><input id="maxcardinality" type="hidden" value=""><table class="HeaderTable" align="center" id="s15657.100004300">
              <tr>
                <td>
                  <div class="TopHeader collapsable">
                    <div style="display:inline" class="idDisplay"><a onClick="javascript:syncItem(this)" name="15657">15657
            	-  
			</a></div>TUMOR<div style="display:inline" class="MetadataDisplay">
                      <div class="MetadataDisplay" style="display:inline">
					&#xA0;<div class="nameDiv">
                          <div class="name">name: </div>
                          <div class="nameValue">S_15657</div>
                        </div>
                      </div>
                      <div class="ChangeDisplay"></div>
                    </div>
                  </div>
                  <div style="clear:both"></div>
                  <div class="question" id="q54193.100004300"><input type="hidden" class="TextBox" name="q54193.100004300" value="Tumor Site"><input id="maxcardinality" type="hidden" value=""><div class="QuestionInSection">
                      <div class="QuestionTitle collapsable_q">
                        <div style="display:inline" class="idDisplay"><a onClick="javascript:syncItem(this)" name="54193">54193
            	-  
			</a></div>Tumor Site<div style="display:inline-block" class="metadata"></div>
                        <div class="MetadataDisplay" style="display:inline-block"></div>
                        <div class="MetadataDisplay" style="display:inline">
         		&#xA0;<div class="nameDiv">
                            <div class="name">name: </div>
                            <div class="metadataTextValue">
                              <div class="nameValue">Q_54193</div>
                            </div>
                          </div>
                        </div>
                        <div class="ChangeDisplay"></div>
                        <div class="MetadataDisplay"></div>
                        <div class="ChangeDisplay"></div>
                      </div><a class="QuestionReset" onclick="resetAnswer(this);return false" href="&#xA;								#&#xA;							">(reset)</a><div class="command"></div>
                      <div style="clear:both;"></div>
                      <div class="Answer"><input type="checkbox" style="float:left;" name="54193.100004300" value="1698.100004300,Upper lobe of lung" onchange="&#xA;						javascript:SelectUnselectParents('q54193.100004300', this)&#xA;					" onblur="&#xA;						javascript:OnChoiceBlur('1698.100004300', this)&#xA;					"><div class="itemTitle">
                          <div style="display:inline" class="idDisplay"><a onClick="javascript:syncItem(this)" name="1698">1698
            	-  
			</a></div>Upper lobe of lung<div class="MetadataDisplay"></div>
                          <div class="ChangeDisplay"></div>
                          <div class="MetadataDisplay" style="display:inline">
         		&#xA0;<div class="nameDiv">
                              <div class="name">name: </div>
                              <div class="metadataTextValue">
                                <div class="nameValue">LI_1698</div>
                              </div>
                            </div>
                          </div>
                          <div class="ChangeDisplay"></div>
                          <div style="display:inline" class="MetadataDisplay"></div>
                          <div class="MetadataDisplay">
         		&#xA0;<div class="ResponseUnits">dt: </div>
                            <div class="metadataTextValue">string</div>
         		&#xA0;	</div>
                          <div class="ChangeDisplay"></div><input type="text" class="AnswerTextBox" name="54193.100004300" value="" onkeydown="&#xA;							javascript:SelectChoiceOnKeyPress('1698.100004300', this, event)&#xA;						" onblur="&#xA;							javascript:SelectUnselectChoiceOnBlur('1698.100004300', this)&#xA;						"></div>
                      </div>
                      <div class="Answer"><input type="checkbox" style="float:left;" name="54193.100004300" value="1699.100004300,Middle lobe of lung" onchange="&#xA;						javascript:SelectUnselectParents('q54193.100004300', this)&#xA;					" onblur="&#xA;						javascript:OnChoiceBlur('1699.100004300', this)&#xA;					"><div class="itemTitle">
                          <div style="display:inline" class="idDisplay"><a onClick="javascript:syncItem(this)" name="1699">1699
            	-  
			</a></div>Middle lobe of lung<div class="MetadataDisplay"></div>
                          <div class="ChangeDisplay"></div>
                          <div class="MetadataDisplay" style="display:inline">
         		&#xA0;<div class="nameDiv">
                              <div class="name">name: </div>
                              <div class="metadataTextValue">
                                <div class="nameValue">LI_1699</div>
                              </div>
                            </div>
                          </div>
                          <div class="ChangeDisplay"></div>
                          <div style="display:inline" class="MetadataDisplay"></div>
                          <div class="MetadataDisplay">
         		&#xA0;<div class="ResponseUnits">dt: </div>
                            <div class="metadataTextValue">string</div>
         		&#xA0;	</div>
                          <div class="ChangeDisplay"></div><input type="text" class="AnswerTextBox" name="54193.100004300" value="" onkeydown="&#xA;							javascript:SelectChoiceOnKeyPress('1699.100004300', this, event)&#xA;						" onblur="&#xA;							javascript:SelectUnselectChoiceOnBlur('1699.100004300', this)&#xA;						"></div>
                      </div>
                      <div class="Answer"><input type="checkbox" style="float:left;" name="54193.100004300" value="1700.100004300,Lower lobe of lung" onchange="&#xA;						javascript:SelectUnselectParents('q54193.100004300', this)&#xA;					" onblur="&#xA;						javascript:OnChoiceBlur('1700.100004300', this)&#xA;					"><div class="itemTitle">
                          <div style="display:inline" class="idDisplay"><a onClick="javascript:syncItem(this)" name="1700">1700
            	-  
			</a></div>Lower lobe of lung<div class="MetadataDisplay"></div>
                          <div class="ChangeDisplay"></div>
                          <div class="MetadataDisplay" style="display:inline">
         		&#xA0;<div class="nameDiv">
                              <div class="name">name: </div>
                              <div class="metadataTextValue">
                                <div class="nameValue">LI_1700</div>
                              </div>
                            </div>
                          </div>
                          <div class="ChangeDisplay"></div>
                          <div style="display:inline" class="MetadataDisplay"></div>
                          <div class="MetadataDisplay">
         		&#xA0;<div class="ResponseUnits">dt: </div>
                            <div class="metadataTextValue">string</div>
         		&#xA0;	</div>
                          <div class="ChangeDisplay"></div><input type="text" class="AnswerTextBox" name="54193.100004300" value="" onkeydown="&#xA;							javascript:SelectChoiceOnKeyPress('1700.100004300', this, event)&#xA;						" onblur="&#xA;							javascript:SelectUnselectChoiceOnBlur('1700.100004300', this)&#xA;						"></div>
                      </div>
                      <div class="Answer"><input type="checkbox" style="float:left;" name="54193.100004300" value="20478.100004300,Bronchus, main" onchange="&#xA;						javascript:SelectUnselectParents('q54193.100004300', this)&#xA;					" onblur="&#xA;						javascript:OnChoiceBlur('20478.100004300', this)&#xA;					"><div class="itemTitle">
                          <div style="display:inline" class="idDisplay"><a onClick="javascript:syncItem(this)" name="20478">20478
            	-  
			</a></div>Bronchus, main<div class="MetadataDisplay"></div>
                          <div class="ChangeDisplay"></div>
                          <div class="MetadataDisplay" style="display:inline">
         		&#xA0;<div class="nameDiv">
                              <div class="name">name: </div>
                              <div class="metadataTextValue">
                                <div class="nameValue">LI_20478</div>
                              </div>
                            </div>
                          </div>
                          <div class="ChangeDisplay"></div>
                          <div style="display:inline" class="MetadataDisplay"></div>
                          <div class="MetadataDisplay">
         		&#xA0;<div class="ResponseUnits">dt: </div>
                            <div class="metadataTextValue">string</div>
         		&#xA0;	</div>
                          <div class="ChangeDisplay"></div><input type="text" class="AnswerTextBox" name="54193.100004300" value="" onkeydown="&#xA;							javascript:SelectChoiceOnKeyPress('20478.100004300', this, event)&#xA;						" onblur="&#xA;							javascript:SelectUnselectChoiceOnBlur('20478.100004300', this)&#xA;						"></div>
                      </div>
                      <div class="Answer"><input type="checkbox" style="float:left;" name="54193.100004300" value="41346.100004300,Bronchus intermedius" onchange="&#xA;						javascript:SelectUnselectParents('q54193.100004300', this)&#xA;					" onblur="&#xA;						javascript:OnChoiceBlur('41346.100004300', this)&#xA;					"><div class="itemTitle">
                          <div style="display:inline" class="idDisplay"><a onClick="javascript:syncItem(this)" name="41346">41346
            	-  
			</a></div>Bronchus intermedius<div class="MetadataDisplay"></div>
                          <div class="ChangeDisplay"></div>
                          <div class="MetadataDisplay" style="display:inline">
         		&#xA0;<div class="nameDiv">
                              <div class="name">name: </div>
                              <div class="metadataTextValue">
                                <div class="nameValue">LI_41346</div>
                              </div>
                            </div>
                          </div>
                          <div class="ChangeDisplay"></div>
                          <div style="display:inline" class="MetadataDisplay"></div>
                          <div class="MetadataDisplay">
         		&#xA0;<div class="ResponseUnits">dt: </div>
                            <div class="metadataTextValue">string</div>
         		&#xA0;	</div>
                          <div class="ChangeDisplay"></div><input type="text" class="AnswerTextBox" name="54193.100004300" value="" onkeydown="&#xA;							javascript:SelectChoiceOnKeyPress('41346.100004300', this, event)&#xA;						" onblur="&#xA;							javascript:SelectUnselectChoiceOnBlur('41346.100004300', this)&#xA;						"></div>
                      </div>
                      <div class="Answer"><input type="checkbox" style="float:left;" name="54193.100004300" value="41807.100004300,Bronchus, lobar (specify)" onchange="&#xA;						javascript:SelectUnselectParents('q54193.100004300', this)&#xA;					" onblur="&#xA;						javascript:OnChoiceBlur('41807.100004300', this)&#xA;					"><div class="itemTitle">
                          <div style="display:inline" class="idDisplay"><a onClick="javascript:syncItem(this)" name="41807">41807
            	-  
			</a></div>Bronchus, lobar (specify)<div class="MetadataDisplay"></div>
                          <div class="ChangeDisplay"></div>
                          <div class="MetadataDisplay" style="display:inline">
         				&#xA0;<div class="reportText">
         			rptText:
         				</div>
                            <div class="metadataTextValue">Bronchus, lobar</div>
         		&#xA0;<div class="nameDiv">
                              <div class="name">name: </div>
                              <div class="metadataTextValue">
                                <div class="nameValue">LI_41807</div>
                              </div>
                            </div>
                          </div>
                          <div class="ChangeDisplay"></div>
                          <div style="display:inline" class="MetadataDisplay"></div>
                          <div class="MetadataDisplay">
               &#xA0;<div class="responseRequired">respReq: </div>
         		&#xA0;<div class="ResponseUnits">dt: </div>
                            <div class="metadataTextValue">string</div>
         		&#xA0;	</div>
                          <div class="ChangeDisplay"></div><input type="text" class="AnswerTextBox" name="54193.100004300" value="" onkeydown="&#xA;							javascript:SelectChoiceOnKeyPress('41807.100004300', this, event)&#xA;						" onblur="&#xA;							javascript:SelectUnselectChoiceOnBlur('41807.100004300', this)&#xA;						"></div>
                      </div>
                      <div class="Answer"><input type="checkbox" style="float:left;" name="54193.100004300" value="1701.100004300,Other(s) (specify)" onchange="&#xA;						javascript:SelectUnselectParents('q54193.100004300', this)&#xA;					" onblur="&#xA;						javascript:OnChoiceBlur('1701.100004300', this)&#xA;					"><div class="itemTitle">
                          <div style="display:inline" class="idDisplay"><a onClick="javascript:syncItem(this)" name="1701">1701
            	-  
			</a></div>Other(s) (specify)<div class="MetadataDisplay"></div>
                          <div class="ChangeDisplay"></div>
                          <div class="MetadataDisplay" style="display:inline">
         				&#xA0;<div class="reportText">
         			rptText:
         				</div>
                            <div class="metadataTextValue">{no text}</div>
         		&#xA0;<div class="nameDiv">
                              <div class="name">name: </div>
                              <div class="metadataTextValue">
                                <div class="nameValue">LI_1701</div>
                              </div>
                            </div>
                          </div>
                          <div class="ChangeDisplay"></div>
                          <div style="display:inline" class="MetadataDisplay"></div>
                          <div class="MetadataDisplay">
               &#xA0;<div class="responseRequired">respReq: </div>
         		&#xA0;<div class="ResponseUnits">dt: </div>
                            <div class="metadataTextValue">string</div>
         		&#xA0;	</div>
                          <div class="ChangeDisplay"></div><input type="text" class="AnswerTextBox" name="54193.100004300" value="" onkeydown="&#xA;							javascript:SelectChoiceOnKeyPress('1701.100004300', this, event)&#xA;						" onblur="&#xA;							javascript:SelectUnselectChoiceOnBlur('1701.100004300', this)&#xA;						"></div>
                      </div>
                      <div class="Answer"><input type="checkbox" style="float:left;" name="54193.100004300" value="1702.100004300,Not specified" onchange="&#xA;						javascript:SelectUnselectParents('q54193.100004300', this)&#xA;					" onblur="&#xA;						javascript:OnChoiceBlur('1702.100004300', this)&#xA;					"><div class="itemTitle">
                          <div style="display:inline" class="idDisplay"><a onClick="javascript:syncItem(this)" name="1702">1702
            	-  
			</a></div>Not specified<div class="MetadataDisplay">
               &#xA0;<div class="sds">sds </div>
                          </div>
                          <div class="ChangeDisplay"></div>
                          <div class="MetadataDisplay" style="display:inline">
         		&#xA0;<div class="nameDiv">
                              <div class="name">name: </div>
                              <div class="metadataTextValue">
                                <div class="nameValue">LI_1702</div>
                              </div>
                            </div>
                          </div>
                          <div class="ChangeDisplay"></div>
                          <div style="display:inline" class="MetadataDisplay"></div>
                        </div>
                      </div>
                      <div style="clear:both;"></div>
                    </div>
                  </div>
                  <div class="question" id="q41746.100004300"><input type="hidden" class="TextBox" name="q41746.100004300" value="Histologic Type (Note C)"><input id="maxcardinality" type="hidden" value=""><div class="QuestionInSection">
                      <div class="QuestionTitle collapsable_q">
                        <div style="display:inline" class="idDisplay"><a onClick="javascript:syncItem(this)" name="41746">41746
            	-  
			</a></div>Histologic Type (Note C)<div style="display:inline-block" class="metadata"></div>
                        <div class="MetadataDisplay" style="display:inline-block"></div>
                        <div class="MetadataDisplay" style="display:inline">
         				&#xA0;<div class="reportText">
         			rptText:
         				</div>
                          <div class="metadataTextValue">Histologic Type </div>
         		&#xA0;<div class="nameDiv">
                            <div class="name">name: </div>
                            <div class="metadataTextValue">
                              <div class="nameValue">Q_41746</div>
                            </div>
                          </div>
                        </div>
                        <div class="ChangeDisplay"></div>
                        <div class="MetadataDisplay"></div>
                        <div class="ChangeDisplay"></div>
                      </div><a class="QuestionReset" onclick="resetAnswer(this);return false" href="&#xA;								#&#xA;							">(reset)</a><div class="command"></div>
                      <div style="clear:both;"></div>
                      <div class="Answer"><input type="radio" style="float:left" name="41746.100004300" value="33388.100004300,Adenocarcinoma in situ (AIS), nonmucinous" onchange="&#xA;						javascript:SelectUnselectParents('q41746.100004300', this);&#xA;					" onblur="&#xA;						javascript:OnChoiceBlur('33388.100004300', this)&#xA;					"><div class="itemTitle">
                          <div style="display:inline" class="idDisplay"><a onClick="javascript:syncItem(this)" name="33388">33388
            	-  
			</a></div>Adenocarcinoma in situ (AIS), nonmucinous<div class="MetadataDisplay"></div>
                          <div class="ChangeDisplay"></div>
                          <div class="MetadataDisplay" style="display:inline">
         		&#xA0;<div class="nameDiv">
                              <div class="name">name: </div>
                              <div class="metadataTextValue">
                                <div class="nameValue">LI_33388</div>
                              </div>
                            </div>
                          </div>
                          <div class="ChangeDisplay"></div>
                          <div style="display:inline" class="MetadataDisplay"></div>
                        </div>
                      </div>
                      <div class="Answer"><input type="radio" style="float:left" name="41746.100004300" value="33390.100004300,Adenocarcinoma in situ (AIS), mucinous" onchange="&#xA;						javascript:SelectUnselectParents('q41746.100004300', this);&#xA;					" onblur="&#xA;						javascript:OnChoiceBlur('33390.100004300', this)&#xA;					"><div class="itemTitle">
                          <div style="display:inline" class="idDisplay"><a onClick="javascript:syncItem(this)" name="33390">33390
            	-  
			</a></div>Adenocarcinoma in situ (AIS), mucinous<div class="MetadataDisplay"></div>
                          <div class="ChangeDisplay"></div>
                          <div class="MetadataDisplay" style="display:inline">
         		&#xA0;<div class="nameDiv">
                              <div class="name">name: </div>
                              <div class="metadataTextValue">
                                <div class="nameValue">LI_33390</div>
                              </div>
                            </div>
                          </div>
                          <div class="ChangeDisplay"></div>
                          <div style="display:inline" class="MetadataDisplay"></div>
                        </div>
                      </div>
                      <div class="Answer"><input type="radio" style="float:left" name="41746.100004300" value="33384.100004300,Minimally invasive adenocarcinoma, nonmucinous" onchange="&#xA;						javascript:SelectUnselectParents('q41746.100004300', this);&#xA;					" onblur="&#xA;						javascript:OnChoiceBlur('33384.100004300', this)&#xA;					"><div class="itemTitle">
                          <div style="display:inline" class="idDisplay"><a onClick="javascript:syncItem(this)" name="33384">33384
            	-  
			</a></div>Minimally invasive adenocarcinoma, nonmucinous<div class="MetadataDisplay"></div>
                          <div class="ChangeDisplay"></div>
                          <div class="MetadataDisplay" style="display:inline">
         		&#xA0;<div class="nameDiv">
                              <div class="name">name: </div>
                              <div class="metadataTextValue">
                                <div class="nameValue">LI_33384</div>
                              </div>
                            </div>
                          </div>
                          <div class="ChangeDisplay"></div>
                          <div style="display:inline" class="MetadataDisplay"></div>
                        </div>
                      </div>
                      <div class="Answer"><input type="radio" style="float:left" name="41746.100004300" value="33386.100004300,Minimally invasive adenocarcinoma, mucinous" onchange="&#xA;						javascript:SelectUnselectParents('q41746.100004300', this);&#xA;					" onblur="&#xA;						javascript:OnChoiceBlur('33386.100004300', this)&#xA;					"><div class="itemTitle">
                          <div style="display:inline" class="idDisplay"><a onClick="javascript:syncItem(this)" name="33386">33386
            	-  
			</a></div>Minimally invasive adenocarcinoma, mucinous<div class="MetadataDisplay"></div>
                          <div class="ChangeDisplay"></div>
                          <div class="MetadataDisplay" style="display:inline">
         		&#xA0;<div class="nameDiv">
                              <div class="name">name: </div>
                              <div class="metadataTextValue">
                                <div class="nameValue">LI_33386</div>
                              </div>
                            </div>
                          </div>
                          <div class="ChangeDisplay"></div>
                          <div style="display:inline" class="MetadataDisplay"></div>
                        </div>
                      </div>
                      <div class="Answer"><input type="radio" style="float:left" name="41746.100004300" value="30020.100004300,Invasive adenocarcinoma, lepidic predominant" onchange="&#xA;						javascript:SelectUnselectParents('q41746.100004300', this);&#xA;					" onblur="&#xA;						javascript:OnChoiceBlur('30020.100004300', this)&#xA;					"><div class="itemTitle">
                          <div style="display:inline" class="idDisplay"><a onClick="javascript:syncItem(this)" name="30020">30020
            	-  
			</a></div>Invasive adenocarcinoma, lepidic predominant<div class="MetadataDisplay"></div>
                          <div class="ChangeDisplay"></div>
                          <div class="MetadataDisplay" style="display:inline">
         		&#xA0;<div class="nameDiv">
                              <div class="name">name: </div>
                              <div class="metadataTextValue">
                                <div class="nameValue">LI_30020</div>
                              </div>
                            </div>
                          </div>
                          <div class="ChangeDisplay"></div>
                          <div style="display:inline" class="MetadataDisplay"></div>
                        </div>
                      </div>
                      <div class="question" id="q51382.100004300"><input type="hidden" class="TextBox" name="q51382.100004300" value="Other Subtypes Present (specify subtype(s), may also include percentages)"><input id="maxcardinality" type="hidden" value=""><div class="QuestionInListItem">
                          <div class="mustImplement"></div>
                          <div class="QuestionTitle collapsable_q">
                            <div class="notRequired">+</div>
                            <div style="display:inline" class="idDisplay"><a onClick="javascript:syncItem(this)" name="51382">51382
            	-  
			</a></div>Other Subtypes Present (specify subtype(s), may also include percentages)<div style="display:inline" class="MetadataDisplay">
                              <div class="MetadataDisplay" style="display:inline-block">
               &#xA0;<div class="minCard">min: </div>
                                <div class="metadataTextValue">0</div>
                              </div>
                              <div class="MetadataDisplay" style="display:inline">
               &#xA0;<div class="mustImplement">mI: </div>
                                <div class="metadataTextValue">false</div>
         				&#xA0;<div class="reportText">
         			rptText:
         				</div>
                                <div class="metadataTextValue">Other Subtypes Present</div>
         		&#xA0;<div class="nameDiv">
                                  <div class="name">name: </div>
                                  <div class="metadataTextValue">
                                    <div class="nameValue">Q_51382</div>
                                  </div>
                                </div>
                              </div>
                              <div class="ChangeDisplay"></div>
                              <div class="MetadataDisplay">
         		&#xA0;<div class="ResponseUnits">dt: </div>
                                <div class="metadataTextValue">string</div>
         		&#xA0;	</div>
                              <div class="ChangeDisplay"></div>
                            </div><input type="text" class="TextBox" name="51382.100004300" value=""></div>
                          <div class="command"></div>
                          <div style="clear:both;"></div>
                          <div style="clear:both;"></div>
                        </div>
                      </div>
                      <div class="Answer"><input type="radio" style="float:left" name="41746.100004300" value="30014.100004300,Invasive adenocarcinoma, acinar predominant" onchange="&#xA;						javascript:SelectUnselectParents('q41746.100004300', this);&#xA;					" onblur="&#xA;						javascript:OnChoiceBlur('30014.100004300', this)&#xA;					"><div class="itemTitle">
                          <div style="display:inline" class="idDisplay"><a onClick="javascript:syncItem(this)" name="30014">30014
            	-  
			</a></div>Invasive adenocarcinoma, acinar predominant<div class="MetadataDisplay"></div>
                          <div class="ChangeDisplay"></div>
                          <div class="MetadataDisplay" style="display:inline">
         		&#xA0;<div class="nameDiv">
                              <div class="name">name: </div>
                              <div class="metadataTextValue">
                                <div class="nameValue">LI_30014</div>
                              </div>
                            </div>
                          </div>
                          <div class="ChangeDisplay"></div>
                          <div style="display:inline" class="MetadataDisplay"></div>
                        </div>
                      </div>
                      <div class="question" id="q51880.100004300"><input type="hidden" class="TextBox" name="q51880.100004300" value="Other Subtypes Present (specify subtype(s), may also include percentages)"><input id="maxcardinality" type="hidden" value=""><div class="QuestionInListItem">
                          <div class="mustImplement"></div>
                          <div class="QuestionTitle collapsable_q">
                            <div class="notRequired">+</div>
                            <div style="display:inline" class="idDisplay"><a onClick="javascript:syncItem(this)" name="51880">51880
            	-  
			</a></div>Other Subtypes Present (specify subtype(s), may also include percentages)<div style="display:inline" class="MetadataDisplay">
                              <div class="MetadataDisplay" style="display:inline-block">
               &#xA0;<div class="minCard">min: </div>
                                <div class="metadataTextValue">0</div>
                              </div>
                              <div class="MetadataDisplay" style="display:inline">
               &#xA0;<div class="mustImplement">mI: </div>
                                <div class="metadataTextValue">false</div>
         				&#xA0;<div class="reportText">
         			rptText:
         				</div>
                                <div class="metadataTextValue">Other Subtypes Present</div>
         		&#xA0;<div class="nameDiv">
                                  <div class="name">name: </div>
                                  <div class="metadataTextValue">
                                    <div class="nameValue">Q_51880</div>
                                  </div>
                                </div>
                              </div>
                              <div class="ChangeDisplay"></div>
                              <div class="MetadataDisplay">
         		&#xA0;<div class="ResponseUnits">dt: </div>
                                <div class="metadataTextValue">string</div>
         		&#xA0;	</div>
                              <div class="ChangeDisplay"></div>
                            </div><input type="text" class="TextBox" name="51880.100004300" value=""></div>
                          <div class="command"></div>
                          <div style="clear:both;"></div>
                          <div style="clear:both;"></div>
                        </div>
                      </div>
                      <div class="Answer"><input type="radio" style="float:left" name="41746.100004300" value="30015.100004300,Invasive adenocarcinoma, papillary predominant" onchange="&#xA;						javascript:SelectUnselectParents('q41746.100004300', this);&#xA;					" onblur="&#xA;						javascript:OnChoiceBlur('30015.100004300', this)&#xA;					"><div class="itemTitle">
                          <div style="display:inline" class="idDisplay"><a onClick="javascript:syncItem(this)" name="30015">30015
            	-  
			</a></div>Invasive adenocarcinoma, papillary predominant<div class="MetadataDisplay"></div>
                          <div class="ChangeDisplay"></div>
                          <div class="MetadataDisplay" style="display:inline">
         		&#xA0;<div class="nameDiv">
                              <div class="name">name: </div>
                              <div class="metadataTextValue">
                                <div class="nameValue">LI_30015</div>
                              </div>
                            </div>
                          </div>
                          <div class="ChangeDisplay"></div>
                          <div style="display:inline" class="MetadataDisplay"></div>
                        </div>
                      </div>
                      <div class="question" id="q58171.100004300"><input type="hidden" class="TextBox" name="q58171.100004300" value="Other Subtypes Present (specify subtype(s), may also include percentages)"><input id="maxcardinality" type="hidden" value=""><div class="QuestionInListItem">
                          <div class="mustImplement"></div>
                          <div class="QuestionTitle collapsable_q">
                            <div class="notRequired">+</div>
                            <div style="display:inline" class="idDisplay"><a onClick="javascript:syncItem(this)" name="58171">58171
            	-  
			</a></div>Other Subtypes Present (specify subtype(s), may also include percentages)<div style="display:inline" class="MetadataDisplay">
                              <div class="MetadataDisplay" style="display:inline-block">
               &#xA0;<div class="minCard">min: </div>
                                <div class="metadataTextValue">0</div>
                              </div>
                              <div class="MetadataDisplay" style="display:inline">
               &#xA0;<div class="mustImplement">mI: </div>
                                <div class="metadataTextValue">false</div>
         				&#xA0;<div class="reportText">
         			rptText:
         				</div>
                                <div class="metadataTextValue">Other Subtypes Present</div>
         		&#xA0;<div class="nameDiv">
                                  <div class="name">name: </div>
                                  <div class="metadataTextValue">
                                    <div class="nameValue">Q_58171</div>
                                  </div>
                                </div>
                              </div>
                              <div class="ChangeDisplay"></div>
                              <div class="MetadataDisplay">
         		&#xA0;<div class="ResponseUnits">dt: </div>
                                <div class="metadataTextValue">string</div>
         		&#xA0;	</div>
                              <div class="ChangeDisplay"></div>
                            </div><input type="text" class="TextBox" name="58171.100004300" value=""></div>
                          <div class="command"></div>
                          <div style="clear:both;"></div>
                          <div style="clear:both;"></div>
                        </div>
                      </div>
                      <div class="Answer"><input type="radio" style="float:left" name="41746.100004300" value="30017.100004300,Invasive adenocarcinoma, micropapillary predominant" onchange="&#xA;						javascript:SelectUnselectParents('q41746.100004300', this);&#xA;					" onblur="&#xA;						javascript:OnChoiceBlur('30017.100004300', this)&#xA;					"><div class="itemTitle">
                          <div style="display:inline" class="idDisplay"><a onClick="javascript:syncItem(this)" name="30017">30017
            	-  
			</a></div>Invasive adenocarcinoma, micropapillary predominant<div class="MetadataDisplay"></div>
                          <div class="ChangeDisplay"></div>
                          <div class="MetadataDisplay" style="display:inline">
         		&#xA0;<div class="nameDiv">
                              <div class="name">name: </div>
                              <div class="metadataTextValue">
                                <div class="nameValue">LI_30017</div>
                              </div>
                            </div>
                          </div>
                          <div class="ChangeDisplay"></div>
                          <div style="display:inline" class="MetadataDisplay"></div>
                        </div>
                      </div>
                      <div class="question" id="q53938.100004300"><input type="hidden" class="TextBox" name="q53938.100004300" value="Other Subtypes Present (specify subtype(s), may also include percentages)"><input id="maxcardinality" type="hidden" value=""><div class="QuestionInListItem">
                          <div class="mustImplement"></div>
                          <div class="QuestionTitle collapsable_q">
                            <div class="notRequired">+</div>
                            <div style="display:inline" class="idDisplay"><a onClick="javascript:syncItem(this)" name="53938">53938
            	-  
			</a></div>Other Subtypes Present (specify subtype(s), may also include percentages)<div style="display:inline" class="MetadataDisplay">
                              <div class="MetadataDisplay" style="display:inline-block">
               &#xA0;<div class="minCard">min: </div>
                                <div class="metadataTextValue">0</div>
                              </div>
                              <div class="MetadataDisplay" style="display:inline">
               &#xA0;<div class="mustImplement">mI: </div>
                                <div class="metadataTextValue">false</div>
         				&#xA0;<div class="reportText">
         			rptText:
         				</div>
                                <div class="metadataTextValue">Other Subtypes Present</div>
         		&#xA0;<div class="nameDiv">
                                  <div class="name">name: </div>
                                  <div class="metadataTextValue">
                                    <div class="nameValue">Q_53938</div>
                                  </div>
                                </div>
                              </div>
                              <div class="ChangeDisplay"></div>
                              <div class="MetadataDisplay">
         		&#xA0;<div class="ResponseUnits">dt: </div>
                                <div class="metadataTextValue">string</div>
         		&#xA0;	</div>
                              <div class="ChangeDisplay"></div>
                            </div><input type="text" class="TextBox" name="53938.100004300" value=""></div>
                          <div class="command"></div>
                          <div style="clear:both;"></div>
                          <div style="clear:both;"></div>
                        </div>
                      </div>
                      <div class="Answer"><input type="radio" style="float:left" name="41746.100004300" value="30016.100004300,Invasive adenocarcinoma, solid predominant" onchange="&#xA;						javascript:SelectUnselectParents('q41746.100004300', this);&#xA;					" onblur="&#xA;						javascript:OnChoiceBlur('30016.100004300', this)&#xA;					"><div class="itemTitle">
                          <div style="display:inline" class="idDisplay"><a onClick="javascript:syncItem(this)" name="30016">30016
            	-  
			</a></div>Invasive adenocarcinoma, solid predominant<div class="MetadataDisplay"></div>
                          <div class="ChangeDisplay"></div>
                          <div class="MetadataDisplay" style="display:inline">
         		&#xA0;<div class="nameDiv">
                              <div class="name">name: </div>
                              <div class="metadataTextValue">
                                <div class="nameValue">LI_30016</div>
                              </div>
                            </div>
                          </div>
                          <div class="ChangeDisplay"></div>
                          <div style="display:inline" class="MetadataDisplay"></div>
                        </div>
                      </div>
                      <div class="question" id="q39998.100004300"><input type="hidden" class="TextBox" name="q39998.100004300" value="Other Subtypes Present (specify subtype(s), may also include percentages)"><input id="maxcardinality" type="hidden" value=""><div class="QuestionInListItem">
                          <div class="mustImplement"></div>
                          <div class="QuestionTitle collapsable_q">
                            <div class="notRequired">+</div>
                            <div style="display:inline" class="idDisplay"><a onClick="javascript:syncItem(this)" name="39998">39998
            	-  
			</a></div>Other Subtypes Present (specify subtype(s), may also include percentages)<div style="display:inline" class="MetadataDisplay">
                              <div class="MetadataDisplay" style="display:inline-block">
               &#xA0;<div class="minCard">min: </div>
                                <div class="metadataTextValue">0</div>
                              </div>
                              <div class="MetadataDisplay" style="display:inline">
               &#xA0;<div class="mustImplement">mI: </div>
                                <div class="metadataTextValue">false</div>
         				&#xA0;<div class="reportText">
         			rptText:
         				</div>
                                <div class="metadataTextValue">Other Subtypes Present</div>
         		&#xA0;<div class="nameDiv">
                                  <div class="name">name: </div>
                                  <div class="metadataTextValue">
                                    <div class="nameValue">Q_39998</div>
                                  </div>
                                </div>
                              </div>
                              <div class="ChangeDisplay"></div>
                              <div class="MetadataDisplay">
         		&#xA0;<div class="ResponseUnits">dt: </div>
                                <div class="metadataTextValue">string</div>
         		&#xA0;	</div>
                              <div class="ChangeDisplay"></div>
                            </div><input type="text" class="TextBox" name="39998.100004300" value=""></div>
                          <div class="command"></div>
                          <div style="clear:both;"></div>
                          <div style="clear:both;"></div>
                        </div>
                      </div>
                      <div class="Answer"><input type="radio" style="float:left" name="41746.100004300" value="51940.100004300,Invasive adenocarcinoma, predominant subtype cannot be determined (explain)" onchange="&#xA;						javascript:SelectUnselectParents('q41746.100004300', this);&#xA;					" onblur="&#xA;						javascript:OnChoiceBlur('51940.100004300', this)&#xA;					"><div class="itemTitle">
                          <div style="display:inline" class="idDisplay"><a onClick="javascript:syncItem(this)" name="51940">51940
            	-  
			</a></div>Invasive adenocarcinoma, predominant subtype cannot be determined (explain)<div class="MetadataDisplay"></div>
                          <div class="ChangeDisplay"></div>
                          <div class="MetadataDisplay" style="display:inline">
         				&#xA0;<div class="reportText">
         			rptText:
         				</div>
                            <div class="metadataTextValue">Invasive adenocarcinoma, predominant subtype cannot be determined</div>
         		&#xA0;<div class="nameDiv">
                              <div class="name">name: </div>
                              <div class="metadataTextValue">
                                <div class="nameValue">LI_51940</div>
                              </div>
                            </div>
                          </div>
                          <div class="ChangeDisplay"></div>
                          <div style="display:inline" class="MetadataDisplay"></div>
                          <div class="MetadataDisplay">
               &#xA0;<div class="responseRequired">respReq: </div>
         		&#xA0;<div class="ResponseUnits">dt: </div>
                            <div class="metadataTextValue">string</div>
         		&#xA0;	</div>
                          <div class="ChangeDisplay"></div><input type="text" class="AnswerTextBox" width="100" name="41746.100004300" value="" onkeydown="&#xA;							javascript:SelectChoiceOnKeyPress('51940.100004300', this, event)&#xA;						" onblur="&#xA;							javascript:SelectUnselectChoiceOnBlur('51940.100004300', this)&#xA;						">
					&#xA0;</div>
                      </div>
                      <div class="question" id="q41203.100004300"><input type="hidden" class="TextBox" name="q41203.100004300" value="Subtypes Present (specify subtype(s), may also include percentages)"><input id="maxcardinality" type="hidden" value=""><div class="QuestionInListItem">
                          <div class="mustImplement"></div>
                          <div class="QuestionTitle collapsable_q">
                            <div class="notRequired">+</div>
                            <div style="display:inline" class="idDisplay"><a onClick="javascript:syncItem(this)" name="41203">41203
            	-  
			</a></div>Subtypes Present (specify subtype(s), may also include percentages)<div style="display:inline" class="MetadataDisplay">
                              <div class="MetadataDisplay" style="display:inline-block">
               &#xA0;<div class="minCard">min: </div>
                                <div class="metadataTextValue">0</div>
                              </div>
                              <div class="MetadataDisplay" style="display:inline">
               &#xA0;<div class="mustImplement">mI: </div>
                                <div class="metadataTextValue">false</div>
         				&#xA0;<div class="reportText">
         			rptText:
         				</div>
                                <div class="metadataTextValue">Subtypes Present</div>
         		&#xA0;<div class="nameDiv">
                                  <div class="name">name: </div>
                                  <div class="metadataTextValue">
                                    <div class="nameValue">Q_41203</div>
                                  </div>
                                </div>
                              </div>
                              <div class="ChangeDisplay"></div>
                              <div class="MetadataDisplay">
         		&#xA0;<div class="ResponseUnits">dt: </div>
                                <div class="metadataTextValue">string</div>
         		&#xA0;	</div>
                              <div class="ChangeDisplay"></div>
                            </div><input type="text" class="TextBox" name="41203.100004300" value=""></div>
                          <div class="command"></div>
                          <div style="clear:both;"></div>
                          <div style="clear:both;"></div>
                        </div>
                      </div>
                      <div class="Answer"><input type="radio" style="float:left" name="41746.100004300" value="37169.100004300,Invasive mucinous adenocarcinoma" onchange="&#xA;						javascript:SelectUnselectParents('q41746.100004300', this);&#xA;					" onblur="&#xA;						javascript:OnChoiceBlur('37169.100004300', this)&#xA;					"><div class="itemTitle">
                          <div style="display:inline" class="idDisplay"><a onClick="javascript:syncItem(this)" name="37169">37169
            	-  
			</a></div>Invasive mucinous adenocarcinoma<div class="MetadataDisplay"></div>
                          <div class="ChangeDisplay"></div>
                          <div class="MetadataDisplay" style="display:inline">
         		&#xA0;<div class="nameDiv">
                              <div class="name">name: </div>
                              <div class="metadataTextValue">
                                <div class="nameValue">LI_37169</div>
                              </div>
                            </div>
                          </div>
                          <div class="ChangeDisplay"></div>
                          <div style="display:inline" class="MetadataDisplay"></div>
                        </div>
                      </div>
                      <div class="Answer"><input type="radio" style="float:left" name="41746.100004300" value="33377.100004300,Mixed invasive mucinous and non-mucinous adenocarcinoma" onchange="&#xA;						javascript:SelectUnselectParents('q41746.100004300', this);&#xA;					" onblur="&#xA;						javascript:OnChoiceBlur('33377.100004300', this)&#xA;					"><div class="itemTitle">
                          <div style="display:inline" class="idDisplay"><a onClick="javascript:syncItem(this)" name="33377">33377
            	-  
			</a></div>Mixed invasive mucinous and non-mucinous adenocarcinoma<div class="MetadataDisplay"></div>
                          <div class="ChangeDisplay"></div>
                          <div class="MetadataDisplay" style="display:inline">
         		&#xA0;<div class="nameDiv">
                              <div class="name">name: </div>
                              <div class="metadataTextValue">
                                <div class="nameValue">LI_33377</div>
                              </div>
                            </div>
                          </div>
                          <div class="ChangeDisplay"></div>
                          <div style="display:inline" class="MetadataDisplay"></div>
                        </div>
                      </div>
                      <div class="Answer"><input type="radio" style="float:left" name="41746.100004300" value="33378.100004300,Colloid adenocarcinoma" onchange="&#xA;						javascript:SelectUnselectParents('q41746.100004300', this);&#xA;					" onblur="&#xA;						javascript:OnChoiceBlur('33378.100004300', this)&#xA;					"><div class="itemTitle">
                          <div style="display:inline" class="idDisplay"><a onClick="javascript:syncItem(this)" name="33378">33378
            	-  
			</a></div>Colloid adenocarcinoma<div class="MetadataDisplay"></div>
                          <div class="ChangeDisplay"></div>
                          <div class="MetadataDisplay" style="display:inline">
         		&#xA0;<div class="nameDiv">
                              <div class="name">name: </div>
                              <div class="metadataTextValue">
                                <div class="nameValue">LI_33378</div>
                              </div>
                            </div>
                          </div>
                          <div class="ChangeDisplay"></div>
                          <div style="display:inline" class="MetadataDisplay"></div>
                        </div>
                      </div>
                      <div class="Answer"><input type="radio" style="float:left" name="41746.100004300" value="15940.100004300,Fetal adenocarcinoma" onchange="&#xA;						javascript:SelectUnselectParents('q41746.100004300', this);&#xA;					" onblur="&#xA;						javascript:OnChoiceBlur('15940.100004300', this)&#xA;					"><div class="itemTitle">
                          <div style="display:inline" class="idDisplay"><a onClick="javascript:syncItem(this)" name="15940">15940
            	-  
			</a></div>Fetal adenocarcinoma<div class="MetadataDisplay"></div>
                          <div class="ChangeDisplay"></div>
                          <div class="MetadataDisplay" style="display:inline">
         		&#xA0;<div class="nameDiv">
                              <div class="name">name: </div>
                              <div class="metadataTextValue">
                                <div class="nameValue">LI_15940</div>
                              </div>
                            </div>
                          </div>
                          <div class="ChangeDisplay"></div>
                          <div style="display:inline" class="MetadataDisplay"></div>
                        </div>
                      </div>
                      <div class="Answer"><input type="radio" style="float:left" name="41746.100004300" value="30022.100004300,Enteric adenocarcinoma" onchange="&#xA;						javascript:SelectUnselectParents('q41746.100004300', this);&#xA;					" onblur="&#xA;						javascript:OnChoiceBlur('30022.100004300', this)&#xA;					"><div class="itemTitle">
                          <div style="display:inline" class="idDisplay"><a onClick="javascript:syncItem(this)" name="30022">30022
            	-  
			</a></div>Enteric adenocarcinoma<div class="MetadataDisplay"></div>
                          <div class="ChangeDisplay"></div>
                          <div class="MetadataDisplay" style="display:inline">
         		&#xA0;<div class="nameDiv">
                              <div class="name">name: </div>
                              <div class="metadataTextValue">
                                <div class="nameValue">LI_30022</div>
                              </div>
                            </div>
                          </div>
                          <div class="ChangeDisplay"></div>
                          <div style="display:inline" class="MetadataDisplay"></div>
                        </div>
                      </div>
                      <div class="Answer"><input type="radio" style="float:left" name="41746.100004300" value="51278.100004300,Squamous cell carcinoma in situ (SCIS)" onchange="&#xA;						javascript:SelectUnselectParents('q41746.100004300', this);&#xA;					" onblur="&#xA;						javascript:OnChoiceBlur('51278.100004300', this)&#xA;					"><div class="itemTitle">
                          <div style="display:inline" class="idDisplay"><a onClick="javascript:syncItem(this)" name="51278">51278
            	-  
			</a></div>Squamous cell carcinoma in situ (SCIS)<div class="MetadataDisplay"></div>
                          <div class="ChangeDisplay"></div>
                          <div class="MetadataDisplay" style="display:inline">
         		&#xA0;<div class="nameDiv">
                              <div class="name">name: </div>
                              <div class="metadataTextValue">
                                <div class="nameValue">LI_51278</div>
                              </div>
                            </div>
                          </div>
                          <div class="ChangeDisplay"></div>
                          <div style="display:inline" class="MetadataDisplay"></div>
                        </div>
                      </div>
                      <div class="Answer"><input type="radio" style="float:left" name="41746.100004300" value="33379.100004300,Invasive squamous cell carcinoma, keratinizing" onchange="&#xA;						javascript:SelectUnselectParents('q41746.100004300', this);&#xA;					" onblur="&#xA;						javascript:OnChoiceBlur('33379.100004300', this)&#xA;					"><div class="itemTitle">
                          <div style="display:inline" class="idDisplay"><a onClick="javascript:syncItem(this)" name="33379">33379
            	-  
			</a></div>Invasive squamous cell carcinoma, keratinizing<div class="MetadataDisplay"></div>
                          <div class="ChangeDisplay"></div>
                          <div class="MetadataDisplay" style="display:inline">
         		&#xA0;<div class="nameDiv">
                              <div class="name">name: </div>
                              <div class="metadataTextValue">
                                <div class="nameValue">LI_33379</div>
                              </div>
                            </div>
                          </div>
                          <div class="ChangeDisplay"></div>
                          <div style="display:inline" class="MetadataDisplay"></div>
                        </div>
                      </div>
                      <div class="Answer"><input type="radio" style="float:left" name="41746.100004300" value="33380.100004300,Invasive squamous cell carcinoma, non-keratinizing" onchange="&#xA;						javascript:SelectUnselectParents('q41746.100004300', this);&#xA;					" onblur="&#xA;						javascript:OnChoiceBlur('33380.100004300', this)&#xA;					"><div class="itemTitle">
                          <div style="display:inline" class="idDisplay"><a onClick="javascript:syncItem(this)" name="33380">33380
            	-  
			</a></div>Invasive squamous cell carcinoma, non-keratinizing<div class="MetadataDisplay"></div>
                          <div class="ChangeDisplay"></div>
                          <div class="MetadataDisplay" style="display:inline">
         		&#xA0;<div class="nameDiv">
                              <div class="name">name: </div>
                              <div class="metadataTextValue">
                                <div class="nameValue">LI_33380</div>
                              </div>
                            </div>
                          </div>
                          <div class="ChangeDisplay"></div>
                          <div style="display:inline" class="MetadataDisplay"></div>
                        </div>
                      </div>
                      <div class="Answer"><input type="radio" style="float:left" name="41746.100004300" value="33381.100004300,Invasive squamous cell carcinoma, basaloid" onchange="&#xA;						javascript:SelectUnselectParents('q41746.100004300', this);&#xA;					" onblur="&#xA;						javascript:OnChoiceBlur('33381.100004300', this)&#xA;					"><div class="itemTitle">
                          <div style="display:inline" class="idDisplay"><a onClick="javascript:syncItem(this)" name="33381">33381
            	-  
			</a></div>Invasive squamous cell carcinoma, basaloid<div class="MetadataDisplay"></div>
                          <div class="ChangeDisplay"></div>
                          <div class="MetadataDisplay" style="display:inline">
         		&#xA0;<div class="nameDiv">
                              <div class="name">name: </div>
                              <div class="metadataTextValue">
                                <div class="nameValue">LI_33381</div>
                              </div>
                            </div>
                          </div>
                          <div class="ChangeDisplay"></div>
                          <div style="display:inline" class="MetadataDisplay"></div>
                        </div>
                      </div>
                      <div class="Answer"><input type="radio" style="float:left" name="41746.100004300" value="1712.100004300,Small cell carcinoma" onchange="&#xA;						javascript:SelectUnselectParents('q41746.100004300', this);&#xA;					" onblur="&#xA;						javascript:OnChoiceBlur('1712.100004300', this)&#xA;					"><div class="itemTitle">
                          <div style="display:inline" class="idDisplay"><a onClick="javascript:syncItem(this)" name="1712">1712
            	-  
			</a></div>Small cell carcinoma<div class="MetadataDisplay"></div>
                          <div class="ChangeDisplay"></div>
                          <div class="MetadataDisplay" style="display:inline">
         		&#xA0;<div class="nameDiv">
                              <div class="name">name: </div>
                              <div class="metadataTextValue">
                                <div class="nameValue">LI_1712</div>
                              </div>
                            </div>
                          </div>
                          <div class="ChangeDisplay"></div>
                          <div style="display:inline" class="MetadataDisplay"></div>
                        </div>
                      </div>
                      <div class="Answer"><input type="radio" style="float:left" name="41746.100004300" value="1713.100004300,Combined small cell carcinoma (small cell carcinoma and non-small cell component)" onchange="&#xA;						javascript:SelectUnselectParents('q41746.100004300', this);&#xA;					" onblur="&#xA;						javascript:OnChoiceBlur('1713.100004300', this)&#xA;					"><div class="itemTitle">
                          <div style="display:inline" class="idDisplay"><a onClick="javascript:syncItem(this)" name="1713">1713
            	-  
			</a></div>Combined small cell carcinoma (small cell carcinoma and non-small cell component)<div class="MetadataDisplay"></div>
                          <div class="ChangeDisplay"></div>
                          <div class="MetadataDisplay" style="display:inline">
         		&#xA0;<div class="nameDiv">
                              <div class="name">name: </div>
                              <div class="metadataTextValue">
                                <div class="nameValue">LI_1713</div>
                              </div>
                            </div>
                          </div>
                          <div class="ChangeDisplay"></div>
                          <div style="display:inline" class="MetadataDisplay"></div>
                        </div>
                      </div>
                      <div class="question" id="q15721.100004300"><input type="hidden" class="TextBox" name="q15721.100004300" value="Specify Type of Non-small Cell Carcinoma Component"><input id="maxcardinality" type="hidden" value=""><div class="QuestionInListItem">
                          <div class="QuestionTitle collapsable_q">
                            <div style="display:inline" class="idDisplay"><a onClick="javascript:syncItem(this)" name="15721">15721
            	-  
			</a></div>Specify Type of Non-small Cell Carcinoma Component<div style="display:inline" class="MetadataDisplay">
                              <div class="MetadataDisplay" style="display:inline-block"></div>
                              <div class="MetadataDisplay" style="display:inline">
         				&#xA0;<div class="reportText">
         			rptText:
         				</div>
                                <div class="metadataTextValue">Type of Non-small Cell Carcinoma Component</div>
         		&#xA0;<div class="nameDiv">
                                  <div class="name">name: </div>
                                  <div class="metadataTextValue">
                                    <div class="nameValue">Q_15721</div>
                                  </div>
                                </div>
                              </div>
                              <div class="ChangeDisplay"></div>
                              <div class="MetadataDisplay">
         		&#xA0;<div class="ResponseUnits">dt: </div>
                                <div class="metadataTextValue">string</div>
         		&#xA0;	</div>
                              <div class="ChangeDisplay"></div>
                            </div><input type="text" class="TextBox" name="15721.100004300" value=""></div>
                          <div class="command"></div>
                          <div style="clear:both;"></div>
                          <div style="clear:both;"></div>
                        </div>
                      </div>
                      <div class="Answer"><input type="radio" style="float:left" name="41746.100004300" value="1719.100004300,Large cell neuroendocrine carcinoma" onchange="&#xA;						javascript:SelectUnselectParents('q41746.100004300', this);&#xA;					" onblur="&#xA;						javascript:OnChoiceBlur('1719.100004300', this)&#xA;					"><div class="itemTitle">
                          <div style="display:inline" class="idDisplay"><a onClick="javascript:syncItem(this)" name="1719">1719
            	-  
			</a></div>Large cell neuroendocrine carcinoma<div class="MetadataDisplay"></div>
                          <div class="ChangeDisplay"></div>
                          <div class="MetadataDisplay" style="display:inline">
         		&#xA0;<div class="nameDiv">
                              <div class="name">name: </div>
                              <div class="metadataTextValue">
                                <div class="nameValue">LI_1719</div>
                              </div>
                            </div>
                          </div>
                          <div class="ChangeDisplay"></div>
                          <div style="display:inline" class="MetadataDisplay"></div>
                        </div>
                      </div>
                      <div class="Answer"><input type="radio" style="float:left" name="41746.100004300" value="58002.100004300,Combined large cell neuroendocrine carcinoma (LCNEC and other non-small cell component)" onchange="&#xA;						javascript:SelectUnselectParents('q41746.100004300', this);&#xA;					" onblur="&#xA;						javascript:OnChoiceBlur('58002.100004300', this)&#xA;					"><div class="itemTitle">
                          <div style="display:inline" class="idDisplay"><a onClick="javascript:syncItem(this)" name="58002">58002
            	-  
			</a></div>Combined large cell neuroendocrine carcinoma (LCNEC and other non-small cell component)<div class="MetadataDisplay"></div>
                          <div class="ChangeDisplay"></div>
                          <div class="MetadataDisplay" style="display:inline">
         		&#xA0;<div class="nameDiv">
                              <div class="name">name: </div>
                              <div class="metadataTextValue">
                                <div class="nameValue">LI_58002</div>
                              </div>
                            </div>
                          </div>
                          <div class="ChangeDisplay"></div>
                          <div style="display:inline" class="MetadataDisplay"></div>
                        </div>
                      </div>
                      <div class="question" id="q45800.100004300"><input type="hidden" class="TextBox" name="q45800.100004300" value="Specify Type of Other Non-small Cell Carcinoma Component"><input id="maxcardinality" type="hidden" value=""><div class="QuestionInListItem">
                          <div class="QuestionTitle collapsable_q">
                            <div style="display:inline" class="idDisplay"><a onClick="javascript:syncItem(this)" name="45800">45800
            	-  
			</a></div>Specify Type of Other Non-small Cell Carcinoma Component<div style="display:inline" class="MetadataDisplay">
                              <div class="MetadataDisplay" style="display:inline-block"></div>
                              <div class="MetadataDisplay" style="display:inline">
         				&#xA0;<div class="reportText">
         			rptText:
         				</div>
                                <div class="metadataTextValue">Type of Other Non-small Cell Carcinoma Component</div>
         		&#xA0;<div class="nameDiv">
                                  <div class="name">name: </div>
                                  <div class="metadataTextValue">
                                    <div class="nameValue">Q_45800</div>
                                  </div>
                                </div>
                              </div>
                              <div class="ChangeDisplay"></div>
                              <div class="MetadataDisplay">
         		&#xA0;<div class="ResponseUnits">dt: </div>
                                <div class="metadataTextValue">string</div>
         		&#xA0;	</div>
                              <div class="ChangeDisplay"></div>
                            </div><input type="text" class="TextBox" name="45800.100004300" value=""></div>
                          <div class="command"></div>
                          <div style="clear:both;"></div>
                          <div style="clear:both;"></div>
                        </div>
                      </div>
                      <div class="Answer"><input type="radio" style="float:left" name="41746.100004300" value="1723.100004300,Typical carcinoid tumor" onchange="&#xA;						javascript:SelectUnselectParents('q41746.100004300', this);&#xA;					" onblur="&#xA;						javascript:OnChoiceBlur('1723.100004300', this)&#xA;					"><div class="itemTitle">
                          <div style="display:inline" class="idDisplay"><a onClick="javascript:syncItem(this)" name="1723">1723
            	-  
			</a></div>Typical carcinoid tumor<div class="MetadataDisplay"></div>
                          <div class="ChangeDisplay"></div>
                          <div class="MetadataDisplay" style="display:inline">
         		&#xA0;<div class="nameDiv">
                              <div class="name">name: </div>
                              <div class="metadataTextValue">
                                <div class="nameValue">LI_1723</div>
                              </div>
                            </div>
                          </div>
                          <div class="ChangeDisplay"></div>
                          <div style="display:inline" class="MetadataDisplay"></div>
                        </div>
                      </div>
                      <div class="Answer"><input type="radio" style="float:left" name="41746.100004300" value="1724.100004300,Atypical carcinoid tumor" onchange="&#xA;						javascript:SelectUnselectParents('q41746.100004300', this);&#xA;					" onblur="&#xA;						javascript:OnChoiceBlur('1724.100004300', this)&#xA;					"><div class="itemTitle">
                          <div style="display:inline" class="idDisplay"><a onClick="javascript:syncItem(this)" name="1724">1724
            	-  
			</a></div>Atypical carcinoid tumor<div class="MetadataDisplay"></div>
                          <div class="ChangeDisplay"></div>
                          <div class="MetadataDisplay" style="display:inline">
         		&#xA0;<div class="nameDiv">
                              <div class="name">name: </div>
                              <div class="metadataTextValue">
                                <div class="nameValue">LI_1724</div>
                              </div>
                            </div>
                          </div>
                          <div class="ChangeDisplay"></div>
                          <div style="display:inline" class="MetadataDisplay"></div>
                        </div>
                      </div>
                      <div class="Answer"><input type="radio" style="float:left" name="41746.100004300" value="1720.100004300,Large cell carcinoma" onchange="&#xA;						javascript:SelectUnselectParents('q41746.100004300', this);&#xA;					" onblur="&#xA;						javascript:OnChoiceBlur('1720.100004300', this)&#xA;					"><div class="itemTitle">
                          <div style="display:inline" class="idDisplay"><a onClick="javascript:syncItem(this)" name="1720">1720
            	-  
			</a></div>Large cell carcinoma<div class="MetadataDisplay"></div>
                          <div class="ChangeDisplay"></div>
                          <div class="MetadataDisplay" style="display:inline">
         		&#xA0;<div class="nameDiv">
                              <div class="name">name: </div>
                              <div class="metadataTextValue">
                                <div class="nameValue">LI_1720</div>
                              </div>
                            </div>
                          </div>
                          <div class="ChangeDisplay"></div>
                          <div style="display:inline" class="MetadataDisplay"></div>
                        </div>
                      </div>
                      <div class="Answer"><input type="radio" style="float:left" name="41746.100004300" value="1722.100004300,Adenosquamous carcinoma" onchange="&#xA;						javascript:SelectUnselectParents('q41746.100004300', this);&#xA;					" onblur="&#xA;						javascript:OnChoiceBlur('1722.100004300', this)&#xA;					"><div class="itemTitle">
                          <div style="display:inline" class="idDisplay"><a onClick="javascript:syncItem(this)" name="1722">1722
            	-  
			</a></div>Adenosquamous carcinoma<div class="MetadataDisplay"></div>
                          <div class="ChangeDisplay"></div>
                          <div class="MetadataDisplay" style="display:inline">
         		&#xA0;<div class="nameDiv">
                              <div class="name">name: </div>
                              <div class="metadataTextValue">
                                <div class="nameValue">LI_1722</div>
                              </div>
                            </div>
                          </div>
                          <div class="ChangeDisplay"></div>
                          <div style="display:inline" class="MetadataDisplay"></div>
                        </div>
                      </div>
                      <div class="Answer"><input type="radio" style="float:left" name="41746.100004300" value="15950.100004300,Pleomorphic carcinoma" onchange="&#xA;						javascript:SelectUnselectParents('q41746.100004300', this);&#xA;					" onblur="&#xA;						javascript:OnChoiceBlur('15950.100004300', this)&#xA;					"><div class="itemTitle">
                          <div style="display:inline" class="idDisplay"><a onClick="javascript:syncItem(this)" name="15950">15950
            	-  
			</a></div>Pleomorphic carcinoma<div class="MetadataDisplay"></div>
                          <div class="ChangeDisplay"></div>
                          <div class="MetadataDisplay" style="display:inline">
         		&#xA0;<div class="nameDiv">
                              <div class="name">name: </div>
                              <div class="metadataTextValue">
                                <div class="nameValue">LI_15950</div>
                              </div>
                            </div>
                          </div>
                          <div class="ChangeDisplay"></div>
                          <div style="display:inline" class="MetadataDisplay"></div>
                        </div>
                      </div>
                      <div class="Answer"><input type="radio" style="float:left" name="41746.100004300" value="15949.100004300,Spindle cell carcinoma" onchange="&#xA;						javascript:SelectUnselectParents('q41746.100004300', this);&#xA;					" onblur="&#xA;						javascript:OnChoiceBlur('15949.100004300', this)&#xA;					"><div class="itemTitle">
                          <div style="display:inline" class="idDisplay"><a onClick="javascript:syncItem(this)" name="15949">15949
            	-  
			</a></div>Spindle cell carcinoma<div class="MetadataDisplay"></div>
                          <div class="ChangeDisplay"></div>
                          <div class="MetadataDisplay" style="display:inline">
         		&#xA0;<div class="nameDiv">
                              <div class="name">name: </div>
                              <div class="metadataTextValue">
                                <div class="nameValue">LI_15949</div>
                              </div>
                            </div>
                          </div>
                          <div class="ChangeDisplay"></div>
                          <div style="display:inline" class="MetadataDisplay"></div>
                        </div>
                      </div>
                      <div class="Answer"><input type="radio" style="float:left" name="41746.100004300" value="15948.100004300,Giant cell carcinoma" onchange="&#xA;						javascript:SelectUnselectParents('q41746.100004300', this);&#xA;					" onblur="&#xA;						javascript:OnChoiceBlur('15948.100004300', this)&#xA;					"><div class="itemTitle">
                          <div style="display:inline" class="idDisplay"><a onClick="javascript:syncItem(this)" name="15948">15948
            	-  
			</a></div>Giant cell carcinoma<div class="MetadataDisplay"></div>
                          <div class="ChangeDisplay"></div>
                          <div class="MetadataDisplay" style="display:inline">
         		&#xA0;<div class="nameDiv">
                              <div class="name">name: </div>
                              <div class="metadataTextValue">
                                <div class="nameValue">LI_15948</div>
                              </div>
                            </div>
                          </div>
                          <div class="ChangeDisplay"></div>
                          <div style="display:inline" class="MetadataDisplay"></div>
                        </div>
                      </div>
                      <div class="Answer"><input type="radio" style="float:left" name="41746.100004300" value="15952.100004300,Carcinosarcoma" onchange="&#xA;						javascript:SelectUnselectParents('q41746.100004300', this);&#xA;					" onblur="&#xA;						javascript:OnChoiceBlur('15952.100004300', this)&#xA;					"><div class="itemTitle">
                          <div style="display:inline" class="idDisplay"><a onClick="javascript:syncItem(this)" name="15952">15952
            	-  
			</a></div>Carcinosarcoma<div class="MetadataDisplay"></div>
                          <div class="ChangeDisplay"></div>
                          <div class="MetadataDisplay" style="display:inline">
         		&#xA0;<div class="nameDiv">
                              <div class="name">name: </div>
                              <div class="metadataTextValue">
                                <div class="nameValue">LI_15952</div>
                              </div>
                            </div>
                          </div>
                          <div class="ChangeDisplay"></div>
                          <div style="display:inline" class="MetadataDisplay"></div>
                        </div>
                      </div>
                      <div class="Answer"><input type="radio" style="float:left" name="41746.100004300" value="15953.100004300,Pulmonary blastoma" onchange="&#xA;						javascript:SelectUnselectParents('q41746.100004300', this);&#xA;					" onblur="&#xA;						javascript:OnChoiceBlur('15953.100004300', this)&#xA;					"><div class="itemTitle">
                          <div style="display:inline" class="idDisplay"><a onClick="javascript:syncItem(this)" name="15953">15953
            	-  
			</a></div>Pulmonary blastoma<div class="MetadataDisplay"></div>
                          <div class="ChangeDisplay"></div>
                          <div class="MetadataDisplay" style="display:inline">
         		&#xA0;<div class="nameDiv">
                              <div class="name">name: </div>
                              <div class="metadataTextValue">
                                <div class="nameValue">LI_15953</div>
                              </div>
                            </div>
                          </div>
                          <div class="ChangeDisplay"></div>
                          <div style="display:inline" class="MetadataDisplay"></div>
                        </div>
                      </div>
                      <div class="Answer"><input type="radio" style="float:left" name="41746.100004300" value="15731.100004300,Lymphoepithelioma-like carcinoma" onchange="&#xA;						javascript:SelectUnselectParents('q41746.100004300', this);&#xA;					" onblur="&#xA;						javascript:OnChoiceBlur('15731.100004300', this)&#xA;					"><div class="itemTitle">
                          <div style="display:inline" class="idDisplay"><a onClick="javascript:syncItem(this)" name="15731">15731
            	-  
			</a></div>Lymphoepithelioma-like carcinoma<div class="MetadataDisplay"></div>
                          <div class="ChangeDisplay"></div>
                          <div class="MetadataDisplay" style="display:inline">
         		&#xA0;<div class="nameDiv">
                              <div class="name">name: </div>
                              <div class="metadataTextValue">
                                <div class="nameValue">LI_15731</div>
                              </div>
                            </div>
                          </div>
                          <div class="ChangeDisplay"></div>
                          <div style="display:inline" class="MetadataDisplay"></div>
                        </div>
                      </div>
                      <div class="Answer"><input type="radio" style="float:left" name="41746.100004300" value="33391.100004300,NUT carcinoma" onchange="&#xA;						javascript:SelectUnselectParents('q41746.100004300', this);&#xA;					" onblur="&#xA;						javascript:OnChoiceBlur('33391.100004300', this)&#xA;					"><div class="itemTitle">
                          <div style="display:inline" class="idDisplay"><a onClick="javascript:syncItem(this)" name="33391">33391
            	-  
			</a></div>NUT carcinoma<div class="MetadataDisplay"></div>
                          <div class="ChangeDisplay"></div>
                          <div class="MetadataDisplay" style="display:inline">
         		&#xA0;<div class="nameDiv">
                              <div class="name">name: </div>
                              <div class="metadataTextValue">
                                <div class="nameValue">LI_33391</div>
                              </div>
                            </div>
                          </div>
                          <div class="ChangeDisplay"></div>
                          <div style="display:inline" class="MetadataDisplay"></div>
                        </div>
                      </div>
                      <div class="Answer"><input type="radio" style="float:left" name="41746.100004300" value="1726.100004300,Mucoepidermoid carcinoma" onchange="&#xA;						javascript:SelectUnselectParents('q41746.100004300', this);&#xA;					" onblur="&#xA;						javascript:OnChoiceBlur('1726.100004300', this)&#xA;					"><div class="itemTitle">
                          <div style="display:inline" class="idDisplay"><a onClick="javascript:syncItem(this)" name="1726">1726
            	-  
			</a></div>Mucoepidermoid carcinoma<div class="MetadataDisplay"></div>
                          <div class="ChangeDisplay"></div>
                          <div class="MetadataDisplay" style="display:inline">
         		&#xA0;<div class="nameDiv">
                              <div class="name">name: </div>
                              <div class="metadataTextValue">
                                <div class="nameValue">LI_1726</div>
                              </div>
                            </div>
                          </div>
                          <div class="ChangeDisplay"></div>
                          <div style="display:inline" class="MetadataDisplay"></div>
                        </div>
                      </div>
                      <div class="Answer"><input type="radio" style="float:left" name="41746.100004300" value="1725.100004300,Adenoid cystic carcinoma" onchange="&#xA;						javascript:SelectUnselectParents('q41746.100004300', this);&#xA;					" onblur="&#xA;						javascript:OnChoiceBlur('1725.100004300', this)&#xA;					"><div class="itemTitle">
                          <div style="display:inline" class="idDisplay"><a onClick="javascript:syncItem(this)" name="1725">1725
            	-  
			</a></div>Adenoid cystic carcinoma<div class="MetadataDisplay"></div>
                          <div class="ChangeDisplay"></div>
                          <div class="MetadataDisplay" style="display:inline">
         		&#xA0;<div class="nameDiv">
                              <div class="name">name: </div>
                              <div class="metadataTextValue">
                                <div class="nameValue">LI_1725</div>
                              </div>
                            </div>
                          </div>
                          <div class="ChangeDisplay"></div>
                          <div style="display:inline" class="MetadataDisplay"></div>
                        </div>
                      </div>
                      <div class="Answer"><input type="radio" style="float:left" name="41746.100004300" value="15951.100004300,Epithelial-myoepithelial carcinoma" onchange="&#xA;						javascript:SelectUnselectParents('q41746.100004300', this);&#xA;					" onblur="&#xA;						javascript:OnChoiceBlur('15951.100004300', this)&#xA;					"><div class="itemTitle">
                          <div style="display:inline" class="idDisplay"><a onClick="javascript:syncItem(this)" name="15951">15951
            	-  
			</a></div>Epithelial-myoepithelial carcinoma<div class="MetadataDisplay"></div>
                          <div class="ChangeDisplay"></div>
                          <div class="MetadataDisplay" style="display:inline">
         		&#xA0;<div class="nameDiv">
                              <div class="name">name: </div>
                              <div class="metadataTextValue">
                                <div class="nameValue">LI_15951</div>
                              </div>
                            </div>
                          </div>
                          <div class="ChangeDisplay"></div>
                          <div style="display:inline" class="MetadataDisplay"></div>
                        </div>
                      </div>
                      <div class="Answer"><input type="radio" style="float:left" name="41746.100004300" value="1730.100004300,Carcinoma, type cannot be determined" onchange="&#xA;						javascript:SelectUnselectParents('q41746.100004300', this);&#xA;					" onblur="&#xA;						javascript:OnChoiceBlur('1730.100004300', this)&#xA;					"><div class="itemTitle">
                          <div style="display:inline" class="idDisplay"><a onClick="javascript:syncItem(this)" name="1730">1730
            	-  
			</a></div>Carcinoma, type cannot be determined<div class="MetadataDisplay"></div>
                          <div class="ChangeDisplay"></div>
                          <div class="MetadataDisplay" style="display:inline">
         		&#xA0;<div class="nameDiv">
                              <div class="name">name: </div>
                              <div class="metadataTextValue">
                                <div class="nameValue">LI_1730</div>
                              </div>
                            </div>
                          </div>
                          <div class="ChangeDisplay"></div>
                          <div style="display:inline" class="MetadataDisplay"></div>
                          <div class="MetadataDisplay">
         		&#xA0;<div class="ResponseUnits">dt: </div>
                            <div class="metadataTextValue">string</div>
         		&#xA0;	</div>
                          <div class="ChangeDisplay"></div><input type="text" class="AnswerTextBox" width="100" name="41746.100004300" value="" onkeydown="&#xA;							javascript:SelectChoiceOnKeyPress('1730.100004300', this, event)&#xA;						" onblur="&#xA;							javascript:SelectUnselectChoiceOnBlur('1730.100004300', this)&#xA;						">
					&#xA0;</div>
                      </div>
                      <div class="Answer"><input type="radio" style="float:left" name="41746.100004300" value="15728.100004300,Non-small cell carcinoma, subtype cannot be determined" onchange="&#xA;						javascript:SelectUnselectParents('q41746.100004300', this);&#xA;					" onblur="&#xA;						javascript:OnChoiceBlur('15728.100004300', this)&#xA;					"><div class="itemTitle">
                          <div style="display:inline" class="idDisplay"><a onClick="javascript:syncItem(this)" name="15728">15728
            	-  
			</a></div>Non-small cell carcinoma, subtype cannot be determined<div class="MetadataDisplay"></div>
                          <div class="ChangeDisplay"></div>
                          <div class="MetadataDisplay" style="display:inline">
         		&#xA0;<div class="nameDiv">
                              <div class="name">name: </div>
                              <div class="metadataTextValue">
                                <div class="nameValue">LI_15728</div>
                              </div>
                            </div>
                          </div>
                          <div class="ChangeDisplay"></div>
                          <div style="display:inline" class="MetadataDisplay"></div>
                          <div class="MetadataDisplay">
         		&#xA0;<div class="ResponseUnits">dt: </div>
                            <div class="metadataTextValue">string</div>
         		&#xA0;	</div>
                          <div class="ChangeDisplay"></div><input type="text" class="AnswerTextBox" width="100" name="41746.100004300" value="" onkeydown="&#xA;							javascript:SelectChoiceOnKeyPress('15728.100004300', this, event)&#xA;						" onblur="&#xA;							javascript:SelectUnselectChoiceOnBlur('15728.100004300', this)&#xA;						">
					&#xA0;</div>
                      </div>
                      <div class="Answer"><input type="radio" style="float:left" name="41746.100004300" value="1729.100004300,Other histologic type not listed (specify)" onchange="&#xA;						javascript:SelectUnselectParents('q41746.100004300', this);&#xA;					" onblur="&#xA;						javascript:OnChoiceBlur('1729.100004300', this)&#xA;					"><div class="itemTitle">
                          <div style="display:inline" class="idDisplay"><a onClick="javascript:syncItem(this)" name="1729">1729
            	-  
			</a></div>Other histologic type not listed (specify)<div class="MetadataDisplay"></div>
                          <div class="ChangeDisplay"></div>
                          <div class="MetadataDisplay" style="display:inline">
         				&#xA0;<div class="reportText">
         			rptText:
         				</div>
                            <div class="metadataTextValue">{no text}</div>
         		&#xA0;<div class="nameDiv">
                              <div class="name">name: </div>
                              <div class="metadataTextValue">
                                <div class="nameValue">LI_1729</div>
                              </div>
                            </div>
                          </div>
                          <div class="ChangeDisplay"></div>
                          <div style="display:inline" class="MetadataDisplay"></div>
                          <div class="MetadataDisplay">
               &#xA0;<div class="responseRequired">respReq: </div>
         		&#xA0;<div class="ResponseUnits">dt: </div>
                            <div class="metadataTextValue">string</div>
         		&#xA0;	</div>
                          <div class="ChangeDisplay"></div><input type="text" class="AnswerTextBox" width="100" name="41746.100004300" value="" onkeydown="&#xA;							javascript:SelectChoiceOnKeyPress('1729.100004300', this, event)&#xA;						" onblur="&#xA;							javascript:SelectUnselectChoiceOnBlur('1729.100004300', this)&#xA;						">
					&#xA0;</div>
                      </div>
                      <div style="clear:both;"></div>
                      <div class="question" id="q33392.100004300"><input type="hidden" class="TextBox" name="q33392.100004300" value="Histologic Type Comments"><input id="maxcardinality" type="hidden" value=""><div class="QuestionInListItem">
                          <div class="mustImplement"></div>
                          <div class="QuestionTitle collapsable_q">
                            <div class="notRequired">+</div>
                            <div style="display:inline" class="idDisplay"><a onClick="javascript:syncItem(this)" name="33392">33392
            	-  
			</a></div>Histologic Type Comments<div style="display:inline" class="MetadataDisplay">
                              <div class="MetadataDisplay" style="display:inline-block">
               &#xA0;<div class="minCard">min: </div>
                                <div class="metadataTextValue">0</div>
                              </div>
                              <div class="MetadataDisplay" style="display:inline">
               &#xA0;<div class="mustImplement">mI: </div>
                                <div class="metadataTextValue">false</div>
         		&#xA0;<div class="nameDiv">
                                  <div class="name">name: </div>
                                  <div class="metadataTextValue">
                                    <div class="nameValue">Q_33392</div>
                                  </div>
                                </div>
                              </div>
                              <div class="ChangeDisplay"></div>
                              <div class="MetadataDisplay">
         		&#xA0;<div class="ResponseUnits">dt: </div>
                                <div class="metadataTextValue">string</div>
         		&#xA0;	</div>
                              <div class="ChangeDisplay"></div>
                            </div><input type="text" class="TextBox" name="33392.100004300" value=""></div>
                          <div class="command"></div>
                          <div style="clear:both;"></div>
                          <div style="clear:both;"></div>
                        </div>
                      </div>
                    </div>
                  </div>
                  <div class="question" id="q1731.100004300"><input type="hidden" class="TextBox" name="q1731.100004300" value="Histologic Grade (Note D)"><input id="maxcardinality" type="hidden" value=""><div class="QuestionInSection">
                      <div class="mustImplement"></div>
                      <div class="QuestionTitle collapsable_q">
                        <div class="notRequired">+</div>
                        <div style="display:inline" class="idDisplay"><a onClick="javascript:syncItem(this)" name="1731">1731
            	-  
			</a></div>Histologic Grade (Note D)<div style="display:inline-block" class="metadata"></div>
                        <div class="MetadataDisplay" style="display:inline-block">
               &#xA0;<div class="minCard">min: </div>
                          <div class="metadataTextValue">0</div>
                        </div>
                        <div class="MetadataDisplay" style="display:inline">
               &#xA0;<div class="mustImplement">mI: </div>
                          <div class="metadataTextValue">false</div>
         				&#xA0;<div class="reportText">
         			rptText:
         				</div>
                          <div class="metadataTextValue">Histologic Grade</div>
         		&#xA0;<div class="nameDiv">
                            <div class="name">name: </div>
                            <div class="metadataTextValue">
                              <div class="nameValue">Q_1731</div>
                            </div>
                          </div>
                        </div>
                        <div class="ChangeDisplay"></div>
                        <div class="MetadataDisplay"></div>
                        <div class="ChangeDisplay"></div>
                      </div><a class="QuestionReset" onclick="resetAnswer(this);return false" href="&#xA;								#&#xA;							">(reset)</a><div class="command"></div>
                      <div style="clear:both;"></div>
                      <div class="Answer"><input type="radio" style="float:left" name="1731.100004300" value="1734.100004300,G1: Well differentiated" onchange="&#xA;						javascript:SelectUnselectParents('q1731.100004300', this);&#xA;					" onblur="&#xA;						javascript:OnChoiceBlur('1734.100004300', this)&#xA;					"><div class="itemTitle">
                          <div style="display:inline" class="idDisplay"><a onClick="javascript:syncItem(this)" name="1734">1734
            	-  
			</a></div>G1: Well differentiated<div class="MetadataDisplay"></div>
                          <div class="ChangeDisplay"></div>
                          <div class="MetadataDisplay" style="display:inline">
         		&#xA0;<div class="nameDiv">
                              <div class="name">name: </div>
                              <div class="metadataTextValue">
                                <div class="nameValue">LI_1734</div>
                              </div>
                            </div>
                          </div>
                          <div class="ChangeDisplay"></div>
                          <div style="display:inline" class="MetadataDisplay"></div>
                        </div>
                      </div>
                      <div class="Answer"><input type="radio" style="float:left" name="1731.100004300" value="1735.100004300,G2: Moderately differentiated" onchange="&#xA;						javascript:SelectUnselectParents('q1731.100004300', this);&#xA;					" onblur="&#xA;						javascript:OnChoiceBlur('1735.100004300', this)&#xA;					"><div class="itemTitle">
                          <div style="display:inline" class="idDisplay"><a onClick="javascript:syncItem(this)" name="1735">1735
            	-  
			</a></div>G2: Moderately differentiated<div class="MetadataDisplay"></div>
                          <div class="ChangeDisplay"></div>
                          <div class="MetadataDisplay" style="display:inline">
         		&#xA0;<div class="nameDiv">
                              <div class="name">name: </div>
                              <div class="metadataTextValue">
                                <div class="nameValue">LI_1735</div>
                              </div>
                            </div>
                          </div>
                          <div class="ChangeDisplay"></div>
                          <div style="display:inline" class="MetadataDisplay"></div>
                        </div>
                      </div>
                      <div class="Answer"><input type="radio" style="float:left" name="1731.100004300" value="1736.100004300,G3: Poorly differentiated" onchange="&#xA;						javascript:SelectUnselectParents('q1731.100004300', this);&#xA;					" onblur="&#xA;						javascript:OnChoiceBlur('1736.100004300', this)&#xA;					"><div class="itemTitle">
                          <div style="display:inline" class="idDisplay"><a onClick="javascript:syncItem(this)" name="1736">1736
            	-  
			</a></div>G3: Poorly differentiated<div class="MetadataDisplay"></div>
                          <div class="ChangeDisplay"></div>
                          <div class="MetadataDisplay" style="display:inline">
         		&#xA0;<div class="nameDiv">
                              <div class="name">name: </div>
                              <div class="metadataTextValue">
                                <div class="nameValue">LI_1736</div>
                              </div>
                            </div>
                          </div>
                          <div class="ChangeDisplay"></div>
                          <div style="display:inline" class="MetadataDisplay"></div>
                        </div>
                      </div>
                      <div class="Answer"><input type="radio" style="float:left" name="1731.100004300" value="1737.100004300,G4: Undifferentiated" onchange="&#xA;						javascript:SelectUnselectParents('q1731.100004300', this);&#xA;					" onblur="&#xA;						javascript:OnChoiceBlur('1737.100004300', this)&#xA;					"><div class="itemTitle">
                          <div style="display:inline" class="idDisplay"><a onClick="javascript:syncItem(this)" name="1737">1737
            	-  
			</a></div>G4: Undifferentiated<div class="MetadataDisplay"></div>
                          <div class="ChangeDisplay"></div>
                          <div class="MetadataDisplay" style="display:inline">
         		&#xA0;<div class="nameDiv">
                              <div class="name">name: </div>
                              <div class="metadataTextValue">
                                <div class="nameValue">LI_1737</div>
                              </div>
                            </div>
                          </div>
                          <div class="ChangeDisplay"></div>
                          <div style="display:inline" class="MetadataDisplay"></div>
                        </div>
                      </div>
                      <div class="Answer"><input type="radio" style="float:left" name="1731.100004300" value="1738.100004300,Other (specify)" onchange="&#xA;						javascript:SelectUnselectParents('q1731.100004300', this);&#xA;					" onblur="&#xA;						javascript:OnChoiceBlur('1738.100004300', this)&#xA;					"><div class="itemTitle">
                          <div style="display:inline" class="idDisplay"><a onClick="javascript:syncItem(this)" name="1738">1738
            	-  
			</a></div>Other (specify)<div class="MetadataDisplay"></div>
                          <div class="ChangeDisplay"></div>
                          <div class="MetadataDisplay" style="display:inline">
         				&#xA0;<div class="reportText">
         			rptText:
         				</div>
                            <div class="metadataTextValue">{no text}</div>
         		&#xA0;<div class="nameDiv">
                              <div class="name">name: </div>
                              <div class="metadataTextValue">
                                <div class="nameValue">LI_1738</div>
                              </div>
                            </div>
                          </div>
                          <div class="ChangeDisplay"></div>
                          <div style="display:inline" class="MetadataDisplay"></div>
                          <div class="MetadataDisplay">
               &#xA0;<div class="responseRequired">respReq: </div>
         		&#xA0;<div class="ResponseUnits">dt: </div>
                            <div class="metadataTextValue">string</div>
         		&#xA0;	</div>
                          <div class="ChangeDisplay"></div><input type="text" class="AnswerTextBox" width="100" name="1731.100004300" value="" onkeydown="&#xA;							javascript:SelectChoiceOnKeyPress('1738.100004300', this, event)&#xA;						" onblur="&#xA;							javascript:SelectUnselectChoiceOnBlur('1738.100004300', this)&#xA;						">
					&#xA0;</div>
                      </div>
                      <div class="Answer"><input type="radio" style="float:left" name="1731.100004300" value="1733.100004300,GX: Cannot be assessed" onchange="&#xA;						javascript:SelectUnselectParents('q1731.100004300', this);&#xA;					" onblur="&#xA;						javascript:OnChoiceBlur('1733.100004300', this)&#xA;					"><div class="itemTitle">
                          <div style="display:inline" class="idDisplay"><a onClick="javascript:syncItem(this)" name="1733">1733
            	-  
			</a></div>GX: Cannot be assessed<div class="MetadataDisplay"></div>
                          <div class="ChangeDisplay"></div>
                          <div class="MetadataDisplay" style="display:inline">
         		&#xA0;<div class="nameDiv">
                              <div class="name">name: </div>
                              <div class="metadataTextValue">
                                <div class="nameValue">LI_1733</div>
                              </div>
                            </div>
                          </div>
                          <div class="ChangeDisplay"></div>
                          <div style="display:inline" class="MetadataDisplay"></div>
                          <div class="MetadataDisplay">
         		&#xA0;<div class="ResponseUnits">dt: </div>
                            <div class="metadataTextValue">string</div>
         		&#xA0;	</div>
                          <div class="ChangeDisplay"></div><input type="text" class="AnswerTextBox" width="100" name="1731.100004300" value="" onkeydown="&#xA;							javascript:SelectChoiceOnKeyPress('1733.100004300', this, event)&#xA;						" onblur="&#xA;							javascript:SelectUnselectChoiceOnBlur('1733.100004300', this)&#xA;						">
					&#xA0;</div>
                      </div>
                      <div class="Answer"><input type="radio" style="float:left" name="1731.100004300" value="1732.100004300,Not applicable" onchange="&#xA;						javascript:SelectUnselectParents('q1731.100004300', this);&#xA;					" onblur="&#xA;						javascript:OnChoiceBlur('1732.100004300', this)&#xA;					"><div class="itemTitle">
                          <div style="display:inline" class="idDisplay"><a onClick="javascript:syncItem(this)" name="1732">1732
            	-  
			</a></div>Not applicable<div class="MetadataDisplay"></div>
                          <div class="ChangeDisplay"></div>
                          <div class="MetadataDisplay" style="display:inline">
         		&#xA0;<div class="nameDiv">
                              <div class="name">name: </div>
                              <div class="metadataTextValue">
                                <div class="nameValue">LI_1732</div>
                              </div>
                            </div>
                          </div>
                          <div class="ChangeDisplay"></div>
                          <div style="display:inline" class="MetadataDisplay"></div>
                          <div class="MetadataDisplay">
         		&#xA0;<div class="ResponseUnits">dt: </div>
                            <div class="metadataTextValue">string</div>
         		&#xA0;	</div>
                          <div class="ChangeDisplay"></div><input type="text" class="AnswerTextBox" width="100" name="1731.100004300" value="" onkeydown="&#xA;							javascript:SelectChoiceOnKeyPress('1732.100004300', this, event)&#xA;						" onblur="&#xA;							javascript:SelectUnselectChoiceOnBlur('1732.100004300', this)&#xA;						">
					&#xA0;</div>
                      </div>
                      <div style="clear:both;"></div>
                    </div>
                  </div>
                  <div class="question" id="q35936.100004300"><input type="hidden" class="TextBox" name="q35936.100004300" value="Spread Through Air Spaces (STAS) (Note C)"><input id="maxcardinality" type="hidden" value=""><div class="QuestionInSection">
                      <div class="mustImplement"></div>
                      <div class="QuestionTitle collapsable_q">
                        <div class="notRequired">+</div>
                        <div style="display:inline" class="idDisplay"><a onClick="javascript:syncItem(this)" name="35936">35936
            	-  
			</a></div>Spread Through Air Spaces (STAS) (Note C)<div style="display:inline-block" class="metadata"></div>
                        <div class="MetadataDisplay" style="display:inline-block">
               &#xA0;<div class="minCard">min: </div>
                          <div class="metadataTextValue">0</div>
                        </div>
                        <div class="MetadataDisplay" style="display:inline">
               &#xA0;<div class="mustImplement">mI: </div>
                          <div class="metadataTextValue">false</div>
         				&#xA0;<div class="reportText">
         			rptText:
         				</div>
                          <div class="metadataTextValue">Spread Through Air Spaces (STAS)</div>
         		&#xA0;<div class="nameDiv">
                            <div class="name">name: </div>
                            <div class="metadataTextValue">
                              <div class="nameValue">Q_35936</div>
                            </div>
                          </div>
                        </div>
                        <div class="ChangeDisplay"></div>
                        <div class="MetadataDisplay"></div>
                        <div class="ChangeDisplay"></div>
                      </div><a class="QuestionReset" onclick="resetAnswer(this);return false" href="&#xA;								#&#xA;							">(reset)</a><div class="command"></div>
                      <div style="clear:both;"></div>
                      <div class="Answer"><input type="radio" style="float:left" name="35936.100004300" value="53921.100004300,Not identified" onchange="&#xA;						javascript:SelectUnselectParents('q35936.100004300', this);&#xA;					" onblur="&#xA;						javascript:OnChoiceBlur('53921.100004300', this)&#xA;					"><div class="itemTitle">
                          <div style="display:inline" class="idDisplay"><a onClick="javascript:syncItem(this)" name="53921">53921
            	-  
			</a></div>Not identified<div class="MetadataDisplay"></div>
                          <div class="ChangeDisplay"></div>
                          <div class="MetadataDisplay" style="display:inline">
         		&#xA0;<div class="nameDiv">
                              <div class="name">name: </div>
                              <div class="metadataTextValue">
                                <div class="nameValue">LI_53921</div>
                              </div>
                            </div>
                          </div>
                          <div class="ChangeDisplay"></div>
                          <div style="display:inline" class="MetadataDisplay"></div>
                        </div>
                      </div>
                      <div class="Answer"><input type="radio" style="float:left" name="35936.100004300" value="45952.100004300,Present" onchange="&#xA;						javascript:SelectUnselectParents('q35936.100004300', this);&#xA;					" onblur="&#xA;						javascript:OnChoiceBlur('45952.100004300', this)&#xA;					"><div class="itemTitle">
                          <div style="display:inline" class="idDisplay"><a onClick="javascript:syncItem(this)" name="45952">45952
            	-  
			</a></div>Present<div class="MetadataDisplay"></div>
                          <div class="ChangeDisplay"></div>
                          <div class="MetadataDisplay" style="display:inline">
         		&#xA0;<div class="nameDiv">
                              <div class="name">name: </div>
                              <div class="metadataTextValue">
                                <div class="nameValue">LI_45952</div>
                              </div>
                            </div>
                          </div>
                          <div class="ChangeDisplay"></div>
                          <div style="display:inline" class="MetadataDisplay"></div>
                        </div>
                      </div>
                      <div style="clear:both;"></div>
                    </div>
                  </div>
                  <div id="s43105.100004300"><input id="maxcardinality" type="hidden" value=""><table class="HeaderTable" align="center" id="s43105.100004300">
                      <tr>
                        <td>
                          <div class="TopHeader2 collapsable">
                            <div style="display:inline" class="idDisplay"><a onClick="javascript:syncItem(this)" name="43105">43105
            	-  
			</a></div>Tumor Size (Note A)<div style="display:inline" class="MetadataDisplay">
                              <div class="MetadataDisplay" style="display:inline">
						&#xA0;<div class="reportText">
							rptText:
						</div>{no text}
					&#xA0;<div class="nameDiv">
                                  <div class="name">name: </div>
                                  <div class="nameValue">S_43105</div>
                                </div>
                              </div>
                              <div class="ChangeDisplay"></div>
                            </div>
                          </div>
                          <div style="clear:both"></div>
                          <div class="question" id="q43111.100004300"><input type="hidden" class="TextBox" name="q43111.100004300" value="Total Tumor Size (size of entire tumor)#"><input id="maxcardinality" type="hidden" value=""><div class="QuestionInSection">
                              <div class="QuestionTitle collapsable_q">
                                <div style="display:inline" class="idDisplay"><a onClick="javascript:syncItem(this)" name="43111">43111
            	-  
			</a></div>Total Tumor Size (size of entire tumor)#<div style="display:inline-block" class="metadata"></div>
                                <div class="MetadataDisplay" style="display:inline-block"></div>
                                <div class="MetadataDisplay" style="display:inline">
         				&#xA0;<div class="reportText">
         			rptText:
         				</div>
                                  <div class="metadataTextValue">Total Tumor Size (size of entire tumor)</div>
         		&#xA0;<div class="nameDiv">
                                    <div class="name">name: </div>
                                    <div class="metadataTextValue">
                                      <div class="nameValue">Q_43111</div>
                                    </div>
                                  </div>
                                </div>
                                <div class="ChangeDisplay"></div>
                                <div class="MetadataDisplay"></div>
                                <div class="ChangeDisplay"></div>
                              </div><a class="QuestionReset" onclick="resetAnswer(this);return false" href="&#xA;								#&#xA;							">(reset)</a><div class="command"></div>
                              <div style="clear:both;"></div>
                              <div>
                                <div class="ListNote">
                                  <div style="display:inline" class="idDisplay"><a onClick="javascript:syncItem(this)" name="41829">41829
            	-  
			</a></div># Note: The size of the entire tumor (total tumor size) applies to all tumors and includes the invasive component and the nonmucinous lepidic component of adenocarcinomas.<div style="display:inline" class="MetadataDisplay">
                                    <div class="MetadataDisplay" style="display:inline">
						&#xA0;<div class="reportText">
							rptText:
						</div>
                                      <div class="metadataTextValue">{no text}</div>
					&#xA0;<div class="nameDiv">
                                        <div class="name">name: </div>
                                        <div class="metadataTextValue">
                                          <div class="nameValue">DI_41829</div>
                                        </div>
                                      </div>
                                    </div>
                                    <div class="ChangeDisplay"></div>
                                  </div>
                                </div>
                                <div style="clear:both;"></div>
                              </div>
                              <div class="Answer"><input type="radio" style="float:left" name="43111.100004300" value="41814.100004300,Greatest dimension in Centimeters (cm)" onchange="&#xA;						javascript:SelectUnselectParents('q43111.100004300', this);&#xA;					" onblur="&#xA;						javascript:OnChoiceBlur('41814.100004300', this)&#xA;					"><div class="itemTitle">
                                  <div style="display:inline" class="idDisplay"><a onClick="javascript:syncItem(this)" name="41814">41814
            	-  
			</a></div>Greatest dimension in Centimeters (cm)<div class="MetadataDisplay"></div>
                                  <div class="ChangeDisplay"></div>
                                  <div class="MetadataDisplay" style="display:inline">
         				&#xA0;<div class="reportText">
         			rptText:
         				</div>
                                    <div class="metadataTextValue">Greatest Dimension (Centimeters)</div>
         		&#xA0;<div class="nameDiv">
                                      <div class="name">name: </div>
                                      <div class="metadataTextValue">
                                        <div class="nameValue">LI_41814</div>
                                      </div>
                                    </div>
                                  </div>
                                  <div class="ChangeDisplay"></div>
                                  <div style="display:inline" class="MetadataDisplay"></div>
                                  <div class="MetadataDisplay">
               &#xA0;<div class="ResponseUnits">un: </div>
                                    <div class="metadataTextValue">cm</div>
               &#xA0;<div class="TextAfterResponse">txtAft: </div>
                                    <div class="metadataTextValue">cm</div>
               &#xA0;<div class="responseRequired">respReq: </div>
         		&#xA0;<div class="ResponseUnits">dt: </div>
                                    <div class="metadataTextValue">decimal</div>
         		&#xA0;	</div>
                                  <div class="ChangeDisplay"></div><input type="text" class="AnswerTextBox" width="100" name="43111.100004300" value="" onkeydown="&#xA;							javascript:SelectChoiceOnKeyPress('41814.100004300', this, event)&#xA;						" onblur="&#xA;							javascript:SelectUnselectChoiceOnBlur('41814.100004300', this)&#xA;						">
					&#xA0;</div>
                              </div>
                              <div class="question" id="q43122.100004300"><input type="hidden" class="TextBox" name="q43122.100004300" value="Additional Dimension in Centimeters (cm)"><input id="maxcardinality" type="hidden" value=""><div class="QuestionInListItem">
                                  <div class="mustImplement"></div>
                                  <div class="QuestionTitle collapsable_q">
                                    <div class="notRequired">+</div>
                                    <div style="display:inline" class="idDisplay"><a onClick="javascript:syncItem(this)" name="43122">43122
            	-  
			</a></div>Additional Dimension in Centimeters (cm)<div style="display:inline" class="MetadataDisplay">
                                      <div class="MetadataDisplay" style="display:inline-block">
               &#xA0;<div class="minCard">min: </div>
                                        <div class="metadataTextValue">0</div>
                                      </div>
                                      <div class="MetadataDisplay" style="display:inline">
               &#xA0;<div class="mustImplement">mI: </div>
                                        <div class="metadataTextValue">false</div>
         				&#xA0;<div class="reportText">
         			rptText:
         				</div>
                                        <div class="metadataTextValue">Additional Dimension (Centimeters)</div>
         		&#xA0;<div class="nameDiv">
                                          <div class="name">name: </div>
                                          <div class="metadataTextValue">
                                            <div class="nameValue">Q_43122</div>
                                          </div>
                                        </div>
                                      </div>
                                      <div class="ChangeDisplay"></div>
                                      <div class="MetadataDisplay">
         		&#xA0;<div class="ResponseUnits">un: </div>
                                        <div class="metadataTextValue">cm</div>
               &#xA0;<div class="TextAfterResponse">txtAft: </div>
                                        <div class="metadataTextValue">cm</div>
         		&#xA0;<div class="ResponseUnits">dt: </div>
                                        <div class="metadataTextValue">decimal</div>
         		&#xA0;	</div>
                                      <div class="ChangeDisplay"></div>
                                    </div><input type="text" class="TextBox" name="43122.100004300" value=""></div>
                                  <div class="command"></div>
                                  <div style="clear:both;"></div>
                                  <div style="clear:both;"></div>
                                </div>
                              </div>
                              <div class="question" id="q43128.100004300"><input type="hidden" class="TextBox" name="q43128.100004300" value="Additional Dimension in Centimeters (cm)"><input id="maxcardinality" type="hidden" value=""><div class="QuestionInListItem">
                                  <div class="mustImplement"></div>
                                  <div class="QuestionTitle collapsable_q">
                                    <div class="notRequired">+</div>
                                    <div style="display:inline" class="idDisplay"><a onClick="javascript:syncItem(this)" name="43128">43128
            	-  
			</a></div>Additional Dimension in Centimeters (cm)<div style="display:inline" class="MetadataDisplay">
                                      <div class="MetadataDisplay" style="display:inline-block">
               &#xA0;<div class="minCard">min: </div>
                                        <div class="metadataTextValue">0</div>
                                      </div>
                                      <div class="MetadataDisplay" style="display:inline">
               &#xA0;<div class="mustImplement">mI: </div>
                                        <div class="metadataTextValue">false</div>
         				&#xA0;<div class="reportText">
         			rptText:
         				</div>
                                        <div class="metadataTextValue">Additional Dimension (Centimeters)</div>
         		&#xA0;<div class="nameDiv">
                                          <div class="name">name: </div>
                                          <div class="metadataTextValue">
                                            <div class="nameValue">Q_43128</div>
                                          </div>
                                        </div>
                                      </div>
                                      <div class="ChangeDisplay"></div>
                                      <div class="MetadataDisplay">
         		&#xA0;<div class="ResponseUnits">un: </div>
                                        <div class="metadataTextValue">cm</div>
               &#xA0;<div class="TextAfterResponse">txtAft: </div>
                                        <div class="metadataTextValue">cm</div>
         		&#xA0;<div class="ResponseUnits">dt: </div>
                                        <div class="metadataTextValue">decimal</div>
         		&#xA0;	</div>
                                      <div class="ChangeDisplay"></div>
                                    </div><input type="text" class="TextBox" name="43128.100004300" value=""></div>
                                  <div class="command"></div>
                                  <div style="clear:both;"></div>
                                  <div style="clear:both;"></div>
                                </div>
                              </div>
                              <div class="Answer"><input type="radio" style="float:left" name="43111.100004300" value="43137.100004300,Cannot be determined" onchange="&#xA;						javascript:SelectUnselectParents('q43111.100004300', this);&#xA;					" onblur="&#xA;						javascript:OnChoiceBlur('43137.100004300', this)&#xA;					"><div class="itemTitle">
                                  <div style="display:inline" class="idDisplay"><a onClick="javascript:syncItem(this)" name="43137">43137
            	-  
			</a></div>Cannot be determined<div class="MetadataDisplay"></div>
                                  <div class="ChangeDisplay"></div>
                                  <div class="MetadataDisplay" style="display:inline">
         		&#xA0;<div class="nameDiv">
                                      <div class="name">name: </div>
                                      <div class="metadataTextValue">
                                        <div class="nameValue">LI_43137</div>
                                      </div>
                                    </div>
                                  </div>
                                  <div class="ChangeDisplay"></div>
                                  <div style="display:inline" class="MetadataDisplay"></div>
                                  <div class="MetadataDisplay">
         		&#xA0;<div class="ResponseUnits">dt: </div>
                                    <div class="metadataTextValue">string</div>
         		&#xA0;	</div>
                                  <div class="ChangeDisplay"></div><input type="text" class="AnswerTextBox" width="100" name="43111.100004300" value="" onkeydown="&#xA;							javascript:SelectChoiceOnKeyPress('43137.100004300', this, event)&#xA;						" onblur="&#xA;							javascript:SelectUnselectChoiceOnBlur('43137.100004300', this)&#xA;						">
					&#xA0;</div>
                              </div>
                              <div style="clear:both;"></div>
                            </div>
                          </div>
                          <div class="question" id="q41688.100004300"><input type="hidden" class="TextBox" name="q41688.100004300" value="?Size of Invasive Component## (required only if invasive nonmucinous adenocarcinomas with lepidic component is present)"><input id="maxcardinality" type="hidden" value=""><div class="QuestionInSection">
                              <div class="QuestionTitle collapsable_q">
                                <div style="display:inline" class="idDisplay"><a onClick="javascript:syncItem(this)" name="41688">41688
            	-  
			</a></div>?Size of Invasive Component## (required only if invasive nonmucinous adenocarcinomas with lepidic component is present)<div style="display:inline-block" class="metadata"></div>
                                <div class="MetadataDisplay" style="display:inline-block"></div>
                                <div class="MetadataDisplay" style="display:inline">
         				&#xA0;<div class="reportText">
         			rptText:
         				</div>
                                  <div class="metadataTextValue">Size of Invasive Component</div>
         		&#xA0;<div class="nameDiv">
                                    <div class="name">name: </div>
                                    <div class="metadataTextValue">
                                      <div class="nameValue">Q_41688</div>
                                    </div>
                                  </div>
                                </div>
                                <div class="ChangeDisplay"></div>
                                <div class="MetadataDisplay"></div>
                                <div class="ChangeDisplay"></div>
                              </div><a class="QuestionReset" onclick="resetAnswer(this);return false" href="&#xA;								#&#xA;							">(reset)</a><div class="command"></div>
                              <div style="clear:both;"></div>
                              <div>
                                <div class="ListNote">
                                  <div style="display:inline" class="idDisplay"><a onClick="javascript:syncItem(this)" name="41703">41703
            	-  
			</a></div>## Note: The size of the invasive component applies only to invasive nonmucinous adenocarcinomas with lepidic component. For all tumor types other than invasive nonmucinous adenocarcinoma with lepidic component, invasive tumor size equals total tumor size.<div style="display:inline" class="MetadataDisplay">
                                    <div class="MetadataDisplay" style="display:inline">
						&#xA0;<div class="reportText">
							rptText:
						</div>
                                      <div class="metadataTextValue">{no text}</div>
					&#xA0;<div class="nameDiv">
                                        <div class="name">name: </div>
                                        <div class="metadataTextValue">
                                          <div class="nameValue">DI_41703</div>
                                        </div>
                                      </div>
                                    </div>
                                    <div class="ChangeDisplay"></div>
                                  </div>
                                </div>
                                <div style="clear:both;"></div>
                              </div>
                              <div class="Answer"><input type="radio" style="float:left" name="41688.100004300" value="41820.100004300,?Not applicable" onchange="&#xA;						javascript:SelectUnselectParents('q41688.100004300', this);&#xA;					" onblur="&#xA;						javascript:OnChoiceBlur('41820.100004300', this)&#xA;					"><div class="itemTitle">
                                  <div style="display:inline" class="idDisplay"><a onClick="javascript:syncItem(this)" name="41820">41820
            	-  
			</a></div>?Not applicable<div class="MetadataDisplay">
               &#xA0;<div class="omitWhenSel">ows </div>
                                  </div>
                                  <div class="ChangeDisplay"></div>
                                  <div class="MetadataDisplay" style="display:inline">
         				&#xA0;<div class="reportText">
         			rptText:
         				</div>
                                    <div class="metadataTextValue">Not applicable</div>
         		&#xA0;<div class="nameDiv">
                                      <div class="name">name: </div>
                                      <div class="metadataTextValue">
                                        <div class="nameValue">LI_41820</div>
                                      </div>
                                    </div>
                                  </div>
                                  <div class="ChangeDisplay"></div>
                                  <div style="display:inline" class="MetadataDisplay"></div>
                                </div>
                              </div>
                              <div class="Answer"><input type="radio" style="float:left" name="41688.100004300" value="43139.100004300,Greatest dimension in Centimeters (cm)" onchange="&#xA;						javascript:SelectUnselectParents('q41688.100004300', this);&#xA;					" onblur="&#xA;						javascript:OnChoiceBlur('43139.100004300', this)&#xA;					"><div class="itemTitle">
                                  <div style="display:inline" class="idDisplay"><a onClick="javascript:syncItem(this)" name="43139">43139
            	-  
			</a></div>Greatest dimension in Centimeters (cm)<div class="MetadataDisplay"></div>
                                  <div class="ChangeDisplay"></div>
                                  <div class="MetadataDisplay" style="display:inline">
         				&#xA0;<div class="reportText">
         			rptText:
         				</div>
                                    <div class="metadataTextValue">Greatest Dimension (Centimeters)</div>
         		&#xA0;<div class="nameDiv">
                                      <div class="name">name: </div>
                                      <div class="metadataTextValue">
                                        <div class="nameValue">LI_43139</div>
                                      </div>
                                    </div>
                                  </div>
                                  <div class="ChangeDisplay"></div>
                                  <div style="display:inline" class="MetadataDisplay"></div>
                                  <div class="MetadataDisplay">
               &#xA0;<div class="ResponseUnits">un: </div>
                                    <div class="metadataTextValue">cm</div>
               &#xA0;<div class="TextAfterResponse">txtAft: </div>
                                    <div class="metadataTextValue">cm</div>
               &#xA0;<div class="responseRequired">respReq: </div>
         		&#xA0;<div class="ResponseUnits">dt: </div>
                                    <div class="metadataTextValue">decimal</div>
         		&#xA0;	</div>
                                  <div class="ChangeDisplay"></div><input type="text" class="AnswerTextBox" width="100" name="41688.100004300" value="" onkeydown="&#xA;							javascript:SelectChoiceOnKeyPress('43139.100004300', this, event)&#xA;						" onblur="&#xA;							javascript:SelectUnselectChoiceOnBlur('43139.100004300', this)&#xA;						">
					&#xA0;</div>
                              </div>
                              <div class="question" id="q43145.100004300"><input type="hidden" class="TextBox" name="q43145.100004300" value="Additional Dimension in Centimeters (cm)"><input id="maxcardinality" type="hidden" value=""><div class="QuestionInListItem">
                                  <div class="mustImplement"></div>
                                  <div class="QuestionTitle collapsable_q">
                                    <div class="notRequired">+</div>
                                    <div style="display:inline" class="idDisplay"><a onClick="javascript:syncItem(this)" name="43145">43145
            	-  
			</a></div>Additional Dimension in Centimeters (cm)<div style="display:inline" class="MetadataDisplay">
                                      <div class="MetadataDisplay" style="display:inline-block">
               &#xA0;<div class="minCard">min: </div>
                                        <div class="metadataTextValue">0</div>
                                      </div>
                                      <div class="MetadataDisplay" style="display:inline">
               &#xA0;<div class="mustImplement">mI: </div>
                                        <div class="metadataTextValue">false</div>
         				&#xA0;<div class="reportText">
         			rptText:
         				</div>
                                        <div class="metadataTextValue">Additional Dimension (Centimeters)</div>
         		&#xA0;<div class="nameDiv">
                                          <div class="name">name: </div>
                                          <div class="metadataTextValue">
                                            <div class="nameValue">Q_43145</div>
                                          </div>
                                        </div>
                                      </div>
                                      <div class="ChangeDisplay"></div>
                                      <div class="MetadataDisplay">
         		&#xA0;<div class="ResponseUnits">un: </div>
                                        <div class="metadataTextValue">cm</div>
               &#xA0;<div class="TextAfterResponse">txtAft: </div>
                                        <div class="metadataTextValue">cm</div>
         		&#xA0;<div class="ResponseUnits">dt: </div>
                                        <div class="metadataTextValue">decimal</div>
         		&#xA0;	</div>
                                      <div class="ChangeDisplay"></div>
                                    </div><input type="text" class="TextBox" name="43145.100004300" value=""></div>
                                  <div class="command"></div>
                                  <div style="clear:both;"></div>
                                  <div style="clear:both;"></div>
                                </div>
                              </div>
                              <div class="question" id="q43154.100004300"><input type="hidden" class="TextBox" name="q43154.100004300" value="Additional Dimension in Centimeters (cm)"><input id="maxcardinality" type="hidden" value=""><div class="QuestionInListItem">
                                  <div class="mustImplement"></div>
                                  <div class="QuestionTitle collapsable_q">
                                    <div class="notRequired">+</div>
                                    <div style="display:inline" class="idDisplay"><a onClick="javascript:syncItem(this)" name="43154">43154
            	-  
			</a></div>Additional Dimension in Centimeters (cm)<div style="display:inline" class="MetadataDisplay">
                                      <div class="MetadataDisplay" style="display:inline-block">
               &#xA0;<div class="minCard">min: </div>
                                        <div class="metadataTextValue">0</div>
                                      </div>
                                      <div class="MetadataDisplay" style="display:inline">
               &#xA0;<div class="mustImplement">mI: </div>
                                        <div class="metadataTextValue">false</div>
         				&#xA0;<div class="reportText">
         			rptText:
         				</div>
                                        <div class="metadataTextValue">Additional Dimension (Centimeters)</div>
         		&#xA0;<div class="nameDiv">
                                          <div class="name">name: </div>
                                          <div class="metadataTextValue">
                                            <div class="nameValue">Q_43154</div>
                                          </div>
                                        </div>
                                      </div>
                                      <div class="ChangeDisplay"></div>
                                      <div class="MetadataDisplay">
         		&#xA0;<div class="ResponseUnits">un: </div>
                                        <div class="metadataTextValue">cm</div>
               &#xA0;<div class="TextAfterResponse">txtAft: </div>
                                        <div class="metadataTextValue">cm</div>
         		&#xA0;<div class="ResponseUnits">dt: </div>
                                        <div class="metadataTextValue">decimal</div>
         		&#xA0;	</div>
                                      <div class="ChangeDisplay"></div>
                                    </div><input type="text" class="TextBox" name="43154.100004300" value=""></div>
                                  <div class="command"></div>
                                  <div style="clear:both;"></div>
                                  <div style="clear:both;"></div>
                                </div>
                              </div>
                              <div class="question" id="q41697.100004300"><input type="hidden" class="TextBox" name="q41697.100004300" value="Percentage of Total Tumor Size (above)"><input id="maxcardinality" type="hidden" value=""><div class="QuestionInListItem">
                                  <div class="mustImplement"></div>
                                  <div class="QuestionTitle collapsable_q">
                                    <div class="notRequired">+</div>
                                    <div style="display:inline" class="idDisplay"><a onClick="javascript:syncItem(this)" name="41697">41697
            	-  
			</a></div>Percentage of Total Tumor Size (above)<div style="display:inline" class="MetadataDisplay">
                                      <div class="MetadataDisplay" style="display:inline-block">
               &#xA0;<div class="minCard">min: </div>
                                        <div class="metadataTextValue">0</div>
                                      </div>
                                      <div class="MetadataDisplay" style="display:inline">
               &#xA0;<div class="mustImplement">mI: </div>
                                        <div class="metadataTextValue">false</div>
         				&#xA0;<div class="reportText">
         			rptText:
         				</div>
                                        <div class="metadataTextValue">Percentage of Total Tumor Size</div>
         		&#xA0;<div class="nameDiv">
                                          <div class="name">name: </div>
                                          <div class="metadataTextValue">
                                            <div class="nameValue">Q_41697</div>
                                          </div>
                                        </div>
                                      </div>
                                      <div class="ChangeDisplay"></div>
                                      <div class="MetadataDisplay">
         		&#xA0;<div class="ResponseUnits">un: </div>
                                        <div class="metadataTextValue">%</div>
               &#xA0;<div class="TextAfterResponse">txtAft: </div>
                                        <div class="metadataTextValue">%</div>
         		&#xA0;<div class="ResponseUnits">dt: </div>
                                        <div class="metadataTextValue">integer</div>
         		&#xA0;	</div>
                                      <div class="ChangeDisplay"></div>
                                    </div><input type="text" class="TextBox" name="41697.100004300" value=""></div>
                                  <div class="command"></div>
                                  <div style="clear:both;"></div>
                                  <div style="clear:both;"></div>
                                </div>
                              </div>
                              <div class="Answer"><input type="radio" style="float:left" name="41688.100004300" value="41694.100004300,Cannot be determined" onchange="&#xA;						javascript:SelectUnselectParents('q41688.100004300', this);&#xA;					" onblur="&#xA;						javascript:OnChoiceBlur('41694.100004300', this)&#xA;					"><div class="itemTitle">
                                  <div style="display:inline" class="idDisplay"><a onClick="javascript:syncItem(this)" name="41694">41694
            	-  
			</a></div>Cannot be determined<div class="MetadataDisplay"></div>
                                  <div class="ChangeDisplay"></div>
                                  <div class="MetadataDisplay" style="display:inline">
         		&#xA0;<div class="nameDiv">
                                      <div class="name">name: </div>
                                      <div class="metadataTextValue">
                                        <div class="nameValue">LI_41694</div>
                                      </div>
                                    </div>
                                  </div>
                                  <div class="ChangeDisplay"></div>
                                  <div style="display:inline" class="MetadataDisplay"></div>
                                  <div class="MetadataDisplay">
         		&#xA0;<div class="ResponseUnits">dt: </div>
                                    <div class="metadataTextValue">string</div>
         		&#xA0;	</div>
                                  <div class="ChangeDisplay"></div><input type="text" class="AnswerTextBox" width="100" name="41688.100004300" value="" onkeydown="&#xA;							javascript:SelectChoiceOnKeyPress('41694.100004300', this, event)&#xA;						" onblur="&#xA;							javascript:SelectUnselectChoiceOnBlur('41694.100004300', this)&#xA;						">
					&#xA0;</div>
                              </div>
                              <div style="clear:both;"></div>
                            </div>
                          </div>
                          <div style="clear:both"></div>
                        </td>
                      </tr>
                    </table>
                  </div>
                  <div class="question" id="q41711.100004300"><input type="hidden" class="TextBox" name="q41711.100004300" value="Tumor Focality (Note B)"><input id="maxcardinality" type="hidden" value=""><div class="QuestionInSection">
                      <div class="QuestionTitle collapsable_q">
                        <div style="display:inline" class="idDisplay"><a onClick="javascript:syncItem(this)" name="41711">41711
            	-  
			</a></div>Tumor Focality (Note B)<div style="display:inline-block" class="metadata"></div>
                        <div class="MetadataDisplay" style="display:inline-block"></div>
                        <div class="MetadataDisplay" style="display:inline">
         				&#xA0;<div class="reportText">
         			rptText:
         				</div>
                          <div class="metadataTextValue">Tumor Focality </div>
         		&#xA0;<div class="nameDiv">
                            <div class="name">name: </div>
                            <div class="metadataTextValue">
                              <div class="nameValue">Q_41711</div>
                            </div>
                          </div>
                        </div>
                        <div class="ChangeDisplay"></div>
                        <div class="MetadataDisplay"></div>
                        <div class="ChangeDisplay"></div>
                      </div><a class="QuestionReset" onclick="resetAnswer(this);return false" href="&#xA;								#&#xA;							">(reset)</a><div class="command"></div>
                      <div style="clear:both;"></div>
                      <div class="Answer"><input type="radio" style="float:left" name="41711.100004300" value="43160.100004300,Single focus" onchange="&#xA;						javascript:SelectUnselectParents('q41711.100004300', this);&#xA;					" onblur="&#xA;						javascript:OnChoiceBlur('43160.100004300', this)&#xA;					"><div class="itemTitle">
                          <div style="display:inline" class="idDisplay"><a onClick="javascript:syncItem(this)" name="43160">43160
            	-  
			</a></div>Single focus<div class="MetadataDisplay"></div>
                          <div class="ChangeDisplay"></div>
                          <div class="MetadataDisplay" style="display:inline">
         		&#xA0;<div class="nameDiv">
                              <div class="name">name: </div>
                              <div class="metadataTextValue">
                                <div class="nameValue">LI_43160</div>
                              </div>
                            </div>
                          </div>
                          <div class="ChangeDisplay"></div>
                          <div style="display:inline" class="MetadataDisplay"></div>
                        </div>
                      </div>
                      <div class="Answer"><input type="radio" style="float:left" name="41711.100004300" value="43162.100004300,Separate tumor nodules (metastases) in same lobe (pT3)" onchange="&#xA;						javascript:SelectUnselectParents('q41711.100004300', this);&#xA;					" onblur="&#xA;						javascript:OnChoiceBlur('43162.100004300', this)&#xA;					"><div class="itemTitle">
                          <div style="display:inline" class="idDisplay"><a onClick="javascript:syncItem(this)" name="43162">43162
            	-  
			</a></div>Separate tumor nodules (metastases) in same lobe (pT3)<div class="MetadataDisplay"></div>
                          <div class="ChangeDisplay"></div>
                          <div class="MetadataDisplay" style="display:inline">
         		&#xA0;<div class="nameDiv">
                              <div class="name">name: </div>
                              <div class="metadataTextValue">
                                <div class="nameValue">LI_43162</div>
                              </div>
                            </div>
                          </div>
                          <div class="ChangeDisplay"></div>
                          <div style="display:inline" class="MetadataDisplay"></div>
                        </div>
                      </div>
                      <div class="question" id="q41714.100004300"><input type="hidden" class="TextBox" name="q41714.100004300" value="Number of Intrapulmonary Metastases Identified"><input id="maxcardinality" type="hidden" value=""><div class="QuestionInListItem">
                          <div class="mustImplement"></div>
                          <div class="QuestionTitle collapsable_q">
                            <div class="notRequired">+</div>
                            <div style="display:inline" class="idDisplay"><a onClick="javascript:syncItem(this)" name="41714">41714
            	-  
			</a></div>Number of Intrapulmonary Metastases Identified<div style="display:inline" class="MetadataDisplay">
                              <div class="MetadataDisplay" style="display:inline-block">
               &#xA0;<div class="minCard">min: </div>
                                <div class="metadataTextValue">0</div>
                              </div>
                              <div class="MetadataDisplay" style="display:inline">
               &#xA0;<div class="mustImplement">mI: </div>
                                <div class="metadataTextValue">false</div>
         		&#xA0;<div class="nameDiv">
                                  <div class="name">name: </div>
                                  <div class="metadataTextValue">
                                    <div class="nameValue">Q_41714</div>
                                  </div>
                                </div>
                              </div>
                              <div class="ChangeDisplay"></div>
                              <div class="MetadataDisplay">
         		&#xA0;<div class="ResponseUnits">dt: </div>
                                <div class="metadataTextValue">integer</div>
         		&#xA0;	</div>
                              <div class="ChangeDisplay"></div>
                            </div><input type="text" class="TextBox" name="41714.100004300" value=""></div>
                          <div class="command"></div>
                          <div style="clear:both;"></div>
                          <div style="clear:both;"></div>
                        </div>
                      </div>
                      <div class="Answer"><input type="radio" style="float:left" name="41711.100004300" value="43555.100004300,Separate tumor nodules (metastases) in different ipsilateral lobe (pT4)" onchange="&#xA;						javascript:SelectUnselectParents('q41711.100004300', this);&#xA;					" onblur="&#xA;						javascript:OnChoiceBlur('43555.100004300', this)&#xA;					"><div class="itemTitle">
                          <div style="display:inline" class="idDisplay"><a onClick="javascript:syncItem(this)" name="43555">43555
            	-  
			</a></div>Separate tumor nodules (metastases) in different ipsilateral lobe (pT4)<div class="MetadataDisplay"></div>
                          <div class="ChangeDisplay"></div>
                          <div class="MetadataDisplay" style="display:inline">
         		&#xA0;<div class="nameDiv">
                              <div class="name">name: </div>
                              <div class="metadataTextValue">
                                <div class="nameValue">LI_43555</div>
                              </div>
                            </div>
                          </div>
                          <div class="ChangeDisplay"></div>
                          <div style="display:inline" class="MetadataDisplay"></div>
                        </div>
                      </div>
                      <div class="question" id="q41846.100004300"><input type="hidden" class="TextBox" name="q41846.100004300" value="Number of Intrapulmonary Metastases Identified"><input id="maxcardinality" type="hidden" value=""><div class="QuestionInListItem">
                          <div class="mustImplement"></div>
                          <div class="QuestionTitle collapsable_q">
                            <div class="notRequired">+</div>
                            <div style="display:inline" class="idDisplay"><a onClick="javascript:syncItem(this)" name="41846">41846
            	-  
			</a></div>Number of Intrapulmonary Metastases Identified<div style="display:inline" class="MetadataDisplay">
                              <div class="MetadataDisplay" style="display:inline-block">
               &#xA0;<div class="minCard">min: </div>
                                <div class="metadataTextValue">0</div>
                              </div>
                              <div class="MetadataDisplay" style="display:inline">
               &#xA0;<div class="mustImplement">mI: </div>
                                <div class="metadataTextValue">false</div>
         		&#xA0;<div class="nameDiv">
                                  <div class="name">name: </div>
                                  <div class="metadataTextValue">
                                    <div class="nameValue">Q_41846</div>
                                  </div>
                                </div>
                              </div>
                              <div class="ChangeDisplay"></div>
                              <div class="MetadataDisplay">
         		&#xA0;<div class="ResponseUnits">dt: </div>
                                <div class="metadataTextValue">integer</div>
         		&#xA0;	</div>
                              <div class="ChangeDisplay"></div>
                            </div><input type="text" class="TextBox" name="41846.100004300" value=""></div>
                          <div class="command"></div>
                          <div style="clear:both;"></div>
                          <div style="clear:both;"></div>
                        </div>
                      </div>
                      <div class="Answer"><input type="radio" style="float:left" name="41711.100004300" value="41720.100004300,Separate tumor nodules (metastases) in a contralateral lobe (pM1a)" onchange="&#xA;						javascript:SelectUnselectParents('q41711.100004300', this);&#xA;					" onblur="&#xA;						javascript:OnChoiceBlur('41720.100004300', this)&#xA;					"><div class="itemTitle">
                          <div style="display:inline" class="idDisplay"><a onClick="javascript:syncItem(this)" name="41720">41720
            	-  
			</a></div>Separate tumor nodules (metastases) in a contralateral lobe (pM1a)<div class="MetadataDisplay"></div>
                          <div class="ChangeDisplay"></div>
                          <div class="MetadataDisplay" style="display:inline">
         		&#xA0;<div class="nameDiv">
                              <div class="name">name: </div>
                              <div class="metadataTextValue">
                                <div class="nameValue">LI_41720</div>
                              </div>
                            </div>
                          </div>
                          <div class="ChangeDisplay"></div>
                          <div style="display:inline" class="MetadataDisplay"></div>
                        </div>
                      </div>
                      <div class="question" id="q43563.100004300"><input type="hidden" class="TextBox" name="q43563.100004300" value="Number of Distant Metastases Identified"><input id="maxcardinality" type="hidden" value=""><div class="QuestionInListItem">
                          <div class="mustImplement"></div>
                          <div class="QuestionTitle collapsable_q">
                            <div class="notRequired">+</div>
                            <div style="display:inline" class="idDisplay"><a onClick="javascript:syncItem(this)" name="43563">43563
            	-  
			</a></div>Number of Distant Metastases Identified<div style="display:inline" class="MetadataDisplay">
                              <div class="MetadataDisplay" style="display:inline-block">
               &#xA0;<div class="minCard">min: </div>
                                <div class="metadataTextValue">0</div>
                              </div>
                              <div class="MetadataDisplay" style="display:inline">
               &#xA0;<div class="mustImplement">mI: </div>
                                <div class="metadataTextValue">false</div>
         		&#xA0;<div class="nameDiv">
                                  <div class="name">name: </div>
                                  <div class="metadataTextValue">
                                    <div class="nameValue">Q_43563</div>
                                  </div>
                                </div>
                              </div>
                              <div class="ChangeDisplay"></div>
                              <div class="MetadataDisplay">
         		&#xA0;<div class="ResponseUnits">dt: </div>
                                <div class="metadataTextValue">integer</div>
         		&#xA0;	</div>
                              <div class="ChangeDisplay"></div>
                            </div><input type="text" class="TextBox" name="43563.100004300" value=""></div>
                          <div class="command"></div>
                          <div style="clear:both;"></div>
                          <div style="clear:both;"></div>
                        </div>
                      </div>
                      <div class="Answer"><input type="radio" style="float:left" name="41711.100004300" value="41837.100004300,Multifocal ground-glass / lepidic nodules" onchange="&#xA;						javascript:SelectUnselectParents('q41711.100004300', this);&#xA;					" onblur="&#xA;						javascript:OnChoiceBlur('41837.100004300', this)&#xA;					"><div class="itemTitle">
                          <div style="display:inline" class="idDisplay"><a onClick="javascript:syncItem(this)" name="41837">41837
            	-  
			</a></div>Multifocal ground-glass / lepidic nodules<div class="MetadataDisplay"></div>
                          <div class="ChangeDisplay"></div>
                          <div class="MetadataDisplay" style="display:inline">
         		&#xA0;<div class="nameDiv">
                              <div class="name">name: </div>
                              <div class="metadataTextValue">
                                <div class="nameValue">LI_41837</div>
                              </div>
                            </div>
                          </div>
                          <div class="ChangeDisplay"></div>
                          <div style="display:inline" class="MetadataDisplay"></div>
                        </div>
                      </div>
                      <div class="question" id="q41737.100004300"><input type="hidden" class="TextBox" name="q41737.100004300" value="Number of Tumor Nodules Identified"><input id="maxcardinality" type="hidden" value=""><div class="QuestionInListItem">
                          <div class="mustImplement"></div>
                          <div class="QuestionTitle collapsable_q">
                            <div class="notRequired">+</div>
                            <div style="display:inline" class="idDisplay"><a onClick="javascript:syncItem(this)" name="41737">41737
            	-  
			</a></div>Number of Tumor Nodules Identified<div style="display:inline" class="MetadataDisplay">
                              <div class="MetadataDisplay" style="display:inline-block">
               &#xA0;<div class="minCard">min: </div>
                                <div class="metadataTextValue">0</div>
                              </div>
                              <div class="MetadataDisplay" style="display:inline">
               &#xA0;<div class="mustImplement">mI: </div>
                                <div class="metadataTextValue">false</div>
         		&#xA0;<div class="nameDiv">
                                  <div class="name">name: </div>
                                  <div class="metadataTextValue">
                                    <div class="nameValue">Q_41737</div>
                                  </div>
                                </div>
                              </div>
                              <div class="ChangeDisplay"></div>
                              <div class="MetadataDisplay">
         		&#xA0;<div class="ResponseUnits">dt: </div>
                                <div class="metadataTextValue">integer</div>
         		&#xA0;	</div>
                              <div class="ChangeDisplay"></div>
                            </div><input type="text" class="TextBox" name="41737.100004300" value=""></div>
                          <div class="command"></div>
                          <div style="clear:both;"></div>
                          <div style="clear:both;"></div>
                        </div>
                      </div>
                      <div class="Answer"><input type="radio" style="float:left" name="41711.100004300" value="43171.100004300,Pneumonic-type adenocarcinoma" onchange="&#xA;						javascript:SelectUnselectParents('q41711.100004300', this);&#xA;					" onblur="&#xA;						javascript:OnChoiceBlur('43171.100004300', this)&#xA;					"><div class="itemTitle">
                          <div style="display:inline" class="idDisplay"><a onClick="javascript:syncItem(this)" name="43171">43171
            	-  
			</a></div>Pneumonic-type adenocarcinoma<div class="MetadataDisplay"></div>
                          <div class="ChangeDisplay"></div>
                          <div class="MetadataDisplay" style="display:inline">
         		&#xA0;<div class="nameDiv">
                              <div class="name">name: </div>
                              <div class="metadataTextValue">
                                <div class="nameValue">LI_43171</div>
                              </div>
                            </div>
                          </div>
                          <div class="ChangeDisplay"></div>
                          <div style="display:inline" class="MetadataDisplay"></div>
                        </div>
                      </div>
                      <div class="Answer"><input type="radio" style="float:left" name="41711.100004300" value="41731.100004300,Cannot be determined" onchange="&#xA;						javascript:SelectUnselectParents('q41711.100004300', this);&#xA;					" onblur="&#xA;						javascript:OnChoiceBlur('41731.100004300', this)&#xA;					"><div class="itemTitle">
                          <div style="display:inline" class="idDisplay"><a onClick="javascript:syncItem(this)" name="41731">41731
            	-  
			</a></div>Cannot be determined<div class="MetadataDisplay"></div>
                          <div class="ChangeDisplay"></div>
                          <div class="MetadataDisplay" style="display:inline">
         		&#xA0;<div class="nameDiv">
                              <div class="name">name: </div>
                              <div class="metadataTextValue">
                                <div class="nameValue">LI_41731</div>
                              </div>
                            </div>
                          </div>
                          <div class="ChangeDisplay"></div>
                          <div style="display:inline" class="MetadataDisplay"></div>
                        </div>
                      </div>
                      <div style="clear:both;"></div>
                    </div>
                  </div>
                  <div class="question" id="q15671.100004300"><input type="hidden" class="TextBox" name="q15671.100004300" value="Visceral Pleura Invasion (Note E)"><input id="maxcardinality" type="hidden" value=""><div class="QuestionInSection">
                      <div class="QuestionTitle collapsable_q">
                        <div style="display:inline" class="idDisplay"><a onClick="javascript:syncItem(this)" name="15671">15671
            	-  
			</a></div>Visceral Pleura Invasion (Note E)<div style="display:inline-block" class="metadata"></div>
                        <div class="MetadataDisplay" style="display:inline-block"></div>
                        <div class="MetadataDisplay" style="display:inline">
         				&#xA0;<div class="reportText">
         			rptText:
         				</div>
                          <div class="metadataTextValue">Visceral Pleura Invasion</div>
         		&#xA0;<div class="nameDiv">
                            <div class="name">name: </div>
                            <div class="metadataTextValue">
                              <div class="nameValue">Q_15671</div>
                            </div>
                          </div>
                        </div>
                        <div class="ChangeDisplay"></div>
                        <div class="MetadataDisplay"></div>
                        <div class="ChangeDisplay"></div>
                      </div><a class="QuestionReset" onclick="resetAnswer(this);return false" href="&#xA;								#&#xA;							">(reset)</a><div class="command"></div>
                      <div style="clear:both;"></div>
                      <div class="Answer"><input type="radio" style="float:left" name="15671.100004300" value="15673.100004300,Not identified" onchange="&#xA;						javascript:SelectUnselectParents('q15671.100004300', this);&#xA;					" onblur="&#xA;						javascript:OnChoiceBlur('15673.100004300', this)&#xA;					"><div class="itemTitle">
                          <div style="display:inline" class="idDisplay"><a onClick="javascript:syncItem(this)" name="15673">15673
            	-  
			</a></div>Not identified<div class="MetadataDisplay"></div>
                          <div class="ChangeDisplay"></div>
                          <div class="MetadataDisplay" style="display:inline">
         		&#xA0;<div class="nameDiv">
                              <div class="name">name: </div>
                              <div class="metadataTextValue">
                                <div class="nameValue">LI_15673</div>
                              </div>
                            </div>
                          </div>
                          <div class="ChangeDisplay"></div>
                          <div style="display:inline" class="MetadataDisplay"></div>
                        </div>
                      </div>
                      <div class="Answer"><input type="radio" style="float:left" name="15671.100004300" value="15674.100004300,Present" onchange="&#xA;						javascript:SelectUnselectParents('q15671.100004300', this);&#xA;					" onblur="&#xA;						javascript:OnChoiceBlur('15674.100004300', this)&#xA;					"><div class="itemTitle">
                          <div style="display:inline" class="idDisplay"><a onClick="javascript:syncItem(this)" name="15674">15674
            	-  
			</a></div>Present<div class="MetadataDisplay"></div>
                          <div class="ChangeDisplay"></div>
                          <div class="MetadataDisplay" style="display:inline">
         		&#xA0;<div class="nameDiv">
                              <div class="name">name: </div>
                              <div class="metadataTextValue">
                                <div class="nameValue">LI_15674</div>
                              </div>
                            </div>
                          </div>
                          <div class="ChangeDisplay"></div>
                          <div style="display:inline" class="MetadataDisplay"></div>
                        </div>
                      </div>
                      <div class="Answer"><input type="radio" style="float:left" name="15671.100004300" value="15675.100004300,Cannot be determined" onchange="&#xA;						javascript:SelectUnselectParents('q15671.100004300', this);&#xA;					" onblur="&#xA;						javascript:OnChoiceBlur('15675.100004300', this)&#xA;					"><div class="itemTitle">
                          <div style="display:inline" class="idDisplay"><a onClick="javascript:syncItem(this)" name="15675">15675
            	-  
			</a></div>Cannot be determined<div class="MetadataDisplay"></div>
                          <div class="ChangeDisplay"></div>
                          <div class="MetadataDisplay" style="display:inline">
         		&#xA0;<div class="nameDiv">
                              <div class="name">name: </div>
                              <div class="metadataTextValue">
                                <div class="nameValue">LI_15675</div>
                              </div>
                            </div>
                          </div>
                          <div class="ChangeDisplay"></div>
                          <div style="display:inline" class="MetadataDisplay"></div>
                          <div class="MetadataDisplay">
         		&#xA0;<div class="ResponseUnits">dt: </div>
                            <div class="metadataTextValue">string</div>
         		&#xA0;	</div>
                          <div class="ChangeDisplay"></div><input type="text" class="AnswerTextBox" width="100" name="15671.100004300" value="" onkeydown="&#xA;							javascript:SelectChoiceOnKeyPress('15675.100004300', this, event)&#xA;						" onblur="&#xA;							javascript:SelectUnselectChoiceOnBlur('15675.100004300', this)&#xA;						">
					&#xA0;</div>
                      </div>
                      <div style="clear:both;"></div>
                    </div>
                  </div>
                  <div class="question" id="q43724.100004300"><input type="hidden" class="TextBox" name="q43724.100004300" value="Direct Invasion of Adjacent Structures (Note G)"><input id="maxcardinality" type="hidden" value=""><div class="QuestionInSection">
                      <div class="QuestionTitle collapsable_q">
                        <div style="display:inline" class="idDisplay"><a onClick="javascript:syncItem(this)" name="43724">43724
            	-  
			</a></div>Direct Invasion of Adjacent Structures (Note G)<div style="display:inline-block" class="metadata"></div>
                        <div class="MetadataDisplay" style="display:inline-block"></div>
                        <div class="MetadataDisplay" style="display:inline">
         				&#xA0;<div class="reportText">
         			rptText:
         				</div>
                          <div class="metadataTextValue">Direct Invasion of Adjacent Structures</div>
         		&#xA0;<div class="nameDiv">
                            <div class="name">name: </div>
                            <div class="metadataTextValue">
                              <div class="nameValue">Q_43724</div>
                            </div>
                          </div>
                        </div>
                        <div class="ChangeDisplay"></div>
                        <div class="MetadataDisplay"></div>
                        <div class="ChangeDisplay"></div>
                      </div><a class="QuestionReset" onclick="resetAnswer(this);return false" href="&#xA;								#&#xA;							">(reset)</a><div class="command"></div>
                      <div style="clear:both;"></div>
                      <div class="Answer"><input type="radio" style="float:left" name="43724.100004300" value="15676.100004300,No adjacent structures present" onchange="&#xA;						javascript:SelectUnselectParents('q43724.100004300', this);&#xA;					" onblur="&#xA;						javascript:OnChoiceBlur('15676.100004300', this)&#xA;					"><div class="itemTitle">
                          <div style="display:inline" class="idDisplay"><a onClick="javascript:syncItem(this)" name="15676">15676
            	-  
			</a></div>No adjacent structures present<div class="MetadataDisplay"></div>
                          <div class="ChangeDisplay"></div>
                          <div class="MetadataDisplay" style="display:inline">
         		&#xA0;<div class="nameDiv">
                              <div class="name">name: </div>
                              <div class="metadataTextValue">
                                <div class="nameValue">LI_15676</div>
                              </div>
                            </div>
                          </div>
                          <div class="ChangeDisplay"></div>
                          <div style="display:inline" class="MetadataDisplay"></div>
                        </div>
                      </div>
                      <div class="Answer"><input type="radio" style="float:left" name="43724.100004300" value="1775.100004300,Adjacent structures present but not involved" onchange="&#xA;						javascript:SelectUnselectParents('q43724.100004300', this);&#xA;					" onblur="&#xA;						javascript:OnChoiceBlur('1775.100004300', this)&#xA;					"><div class="itemTitle">
                          <div style="display:inline" class="idDisplay"><a onClick="javascript:syncItem(this)" name="1775">1775
            	-  
			</a></div>Adjacent structures present but not involved<div class="MetadataDisplay"></div>
                          <div class="ChangeDisplay"></div>
                          <div class="MetadataDisplay" style="display:inline">
         		&#xA0;<div class="nameDiv">
                              <div class="name">name: </div>
                              <div class="metadataTextValue">
                                <div class="nameValue">LI_1775</div>
                              </div>
                            </div>
                          </div>
                          <div class="ChangeDisplay"></div>
                          <div style="display:inline" class="MetadataDisplay"></div>
                        </div>
                      </div>
                      <div class="Answer"><input type="radio" style="float:left" name="43724.100004300" value="49498.100004300,Adjacent structures present and involved" onchange="&#xA;						javascript:SelectUnselectParents('q43724.100004300', this);&#xA;					" onblur="&#xA;						javascript:OnChoiceBlur('49498.100004300', this)&#xA;					"><div class="itemTitle">
                          <div style="display:inline" class="idDisplay"><a onClick="javascript:syncItem(this)" name="49498">49498
            	-  
			</a></div>Adjacent structures present and involved<div class="MetadataDisplay"></div>
                          <div class="ChangeDisplay"></div>
                          <div class="MetadataDisplay" style="display:inline">
         		&#xA0;<div class="nameDiv">
                              <div class="name">name: </div>
                              <div class="metadataTextValue">
                                <div class="nameValue">LI_49498</div>
                              </div>
                            </div>
                          </div>
                          <div class="ChangeDisplay"></div>
                          <div style="display:inline" class="MetadataDisplay"></div>
                        </div>
                      </div>
                      <div class="question" id="q47257.100004300"><input type="hidden" class="TextBox" name="q47257.100004300" value=""><input id="maxcardinality" type="hidden" value=""><div class="QuestionInListItem">
                          <div class="QuestionTitle collapsable_q">
                            <div style="display:inline" class="idDisplay"><a onClick="javascript:syncItem(this)" name="47257">47257
            	-  
			</a></div>
                            <div style="display:inline-block" class="MetadataDisplay">
                              <div class="MetadataDisplay" style="display:inline-block"></div>
                              <div class="MetadataDisplay" style="display:inline">
                                <div class="altText">
         					altText:
         				</div>
                                <div class="metadataTextValue">Involved Adjacent Structures</div>
         		&#xA0;<div class="nameDiv">
                                  <div class="name">name: </div>
                                  <div class="metadataTextValue">
                                    <div class="nameValue">Q_47257</div>
                                  </div>
                                </div>
                              </div>
                              <div class="ChangeDisplay"></div>
                              <div class="MetadataDisplay"></div>
                              <div class="ChangeDisplay"></div>
                            </div>
                          </div><a class="QuestionReset" onclick="resetAnswer(this);return false" href="&#xA;								#&#xA;							">(reset)</a><div class="command"></div>
                          <div style="clear:both;"></div>
                          <div class="Answer"><input type="checkbox" style="float:left;" name="47257.100004300" value="48576.100004300,Main bronchus" onchange="&#xA;						javascript:SelectUnselectParents('q47257.100004300', this)&#xA;					" onblur="&#xA;						javascript:OnChoiceBlur('48576.100004300', this)&#xA;					"><div class="itemTitle">
                              <div style="display:inline" class="idDisplay"><a onClick="javascript:syncItem(this)" name="48576">48576
            	-  
			</a></div>Main bronchus<div class="MetadataDisplay"></div>
                              <div class="ChangeDisplay"></div>
                              <div class="MetadataDisplay" style="display:inline">
         		&#xA0;<div class="nameDiv">
                                  <div class="name">name: </div>
                                  <div class="metadataTextValue">
                                    <div class="nameValue">LI_48576</div>
                                  </div>
                                </div>
                              </div>
                              <div class="ChangeDisplay"></div>
                              <div style="display:inline" class="MetadataDisplay"></div>
                            </div>
                          </div>
                          <div class="Answer"><input type="checkbox" style="float:left;" name="47257.100004300" value="53881.100004300,Hilar soft tissues" onchange="&#xA;						javascript:SelectUnselectParents('q47257.100004300', this)&#xA;					" onblur="&#xA;						javascript:OnChoiceBlur('53881.100004300', this)&#xA;					"><div class="itemTitle">
                              <div style="display:inline" class="idDisplay"><a onClick="javascript:syncItem(this)" name="53881">53881
            	-  
			</a></div>Hilar soft tissues<div class="MetadataDisplay"></div>
                              <div class="ChangeDisplay"></div>
                              <div class="MetadataDisplay" style="display:inline">
         		&#xA0;<div class="nameDiv">
                                  <div class="name">name: </div>
                                  <div class="metadataTextValue">
                                    <div class="nameValue">LI_53881</div>
                                  </div>
                                </div>
                              </div>
                              <div class="ChangeDisplay"></div>
                              <div style="display:inline" class="MetadataDisplay"></div>
                            </div>
                          </div>
                          <div class="Answer"><input type="checkbox" style="float:left;" name="47257.100004300" value="15961.100004300,Carina" onchange="&#xA;						javascript:SelectUnselectParents('q47257.100004300', this)&#xA;					" onblur="&#xA;						javascript:OnChoiceBlur('15961.100004300', this)&#xA;					"><div class="itemTitle">
                              <div style="display:inline" class="idDisplay"><a onClick="javascript:syncItem(this)" name="15961">15961
            	-  
			</a></div>Carina<div class="MetadataDisplay"></div>
                              <div class="ChangeDisplay"></div>
                              <div class="MetadataDisplay" style="display:inline">
         		&#xA0;<div class="nameDiv">
                                  <div class="name">name: </div>
                                  <div class="metadataTextValue">
                                    <div class="nameValue">LI_15961</div>
                                  </div>
                                </div>
                              </div>
                              <div class="ChangeDisplay"></div>
                              <div style="display:inline" class="MetadataDisplay"></div>
                            </div>
                          </div>
                          <div class="Answer"><input type="checkbox" style="float:left;" name="47257.100004300" value="15735.100004300,Parietal pleura" onchange="&#xA;						javascript:SelectUnselectParents('q47257.100004300', this)&#xA;					" onblur="&#xA;						javascript:OnChoiceBlur('15735.100004300', this)&#xA;					"><div class="itemTitle">
                              <div style="display:inline" class="idDisplay"><a onClick="javascript:syncItem(this)" name="15735">15735
            	-  
			</a></div>Parietal pleura<div class="MetadataDisplay"></div>
                              <div class="ChangeDisplay"></div>
                              <div class="MetadataDisplay" style="display:inline">
         		&#xA0;<div class="nameDiv">
                                  <div class="name">name: </div>
                                  <div class="metadataTextValue">
                                    <div class="nameValue">LI_15735</div>
                                  </div>
                                </div>
                              </div>
                              <div class="ChangeDisplay"></div>
                              <div style="display:inline" class="MetadataDisplay"></div>
                            </div>
                          </div>
                          <div class="Answer"><input type="checkbox" style="float:left;" name="47257.100004300" value="1776.100004300,Chest wall" onchange="&#xA;						javascript:SelectUnselectParents('q47257.100004300', this)&#xA;					" onblur="&#xA;						javascript:OnChoiceBlur('1776.100004300', this)&#xA;					"><div class="itemTitle">
                              <div style="display:inline" class="idDisplay"><a onClick="javascript:syncItem(this)" name="1776">1776
            	-  
			</a></div>Chest wall<div class="MetadataDisplay"></div>
                              <div class="ChangeDisplay"></div>
                              <div class="MetadataDisplay" style="display:inline">
         		&#xA0;<div class="nameDiv">
                                  <div class="name">name: </div>
                                  <div class="metadataTextValue">
                                    <div class="nameValue">LI_1776</div>
                                  </div>
                                </div>
                              </div>
                              <div class="ChangeDisplay"></div>
                              <div style="display:inline" class="MetadataDisplay"></div>
                            </div>
                          </div>
                          <div class="question" id="q15954.100004300"><input type="hidden" class="TextBox" name="q15954.100004300" value="Specify Involved Structure(s)"><input id="maxcardinality" type="hidden" value=""><div class="QuestionInListItem">
                              <div class="mustImplement"></div>
                              <div class="QuestionTitle collapsable_q">
                                <div class="notRequired">+</div>
                                <div style="display:inline" class="idDisplay"><a onClick="javascript:syncItem(this)" name="15954">15954
            	-  
			</a></div>Specify Involved Structure(s)<div style="display:inline" class="MetadataDisplay">
                                  <div class="MetadataDisplay" style="display:inline-block">
               &#xA0;<div class="minCard">min: </div>
                                    <div class="metadataTextValue">0</div>
                                  </div>
                                  <div class="MetadataDisplay" style="display:inline">
               &#xA0;<div class="mustImplement">mI: </div>
                                    <div class="metadataTextValue">false</div>
         				&#xA0;<div class="reportText">
         			rptText:
         				</div>
                                    <div class="metadataTextValue">Involved Structure(s)</div>
         		&#xA0;<div class="nameDiv">
                                      <div class="name">name: </div>
                                      <div class="metadataTextValue">
                                        <div class="nameValue">Q_15954</div>
                                      </div>
                                    </div>
                                  </div>
                                  <div class="ChangeDisplay"></div>
                                  <div class="MetadataDisplay">
         		&#xA0;<div class="ResponseUnits">dt: </div>
                                    <div class="metadataTextValue">string</div>
         		&#xA0;	</div>
                                  <div class="ChangeDisplay"></div>
                                </div><input type="text" class="TextBox" name="15954.100004300" value=""></div>
                              <div class="command"></div>
                              <div style="clear:both;"></div>
                              <div style="clear:both;"></div>
                            </div>
                          </div>
                          <div class="Answer"><input type="checkbox" style="float:left;" name="47257.100004300" value="15956.100004300,Phrenic nerve" onchange="&#xA;						javascript:SelectUnselectParents('q47257.100004300', this)&#xA;					" onblur="&#xA;						javascript:OnChoiceBlur('15956.100004300', this)&#xA;					"><div class="itemTitle">
                              <div style="display:inline" class="idDisplay"><a onClick="javascript:syncItem(this)" name="15956">15956
            	-  
			</a></div>Phrenic nerve<div class="MetadataDisplay"></div>
                              <div class="ChangeDisplay"></div>
                              <div class="MetadataDisplay" style="display:inline">
         		&#xA0;<div class="nameDiv">
                                  <div class="name">name: </div>
                                  <div class="metadataTextValue">
                                    <div class="nameValue">LI_15956</div>
                                  </div>
                                </div>
                              </div>
                              <div class="ChangeDisplay"></div>
                              <div style="display:inline" class="MetadataDisplay"></div>
                            </div>
                          </div>
                          <div class="Answer"><input type="checkbox" style="float:left;" name="47257.100004300" value="1780.100004300,Parietal pericardium" onchange="&#xA;						javascript:SelectUnselectParents('q47257.100004300', this)&#xA;					" onblur="&#xA;						javascript:OnChoiceBlur('1780.100004300', this)&#xA;					"><div class="itemTitle">
                              <div style="display:inline" class="idDisplay"><a onClick="javascript:syncItem(this)" name="1780">1780
            	-  
			</a></div>Parietal pericardium<div class="MetadataDisplay"></div>
                              <div class="ChangeDisplay"></div>
                              <div class="MetadataDisplay" style="display:inline">
         		&#xA0;<div class="nameDiv">
                                  <div class="name">name: </div>
                                  <div class="metadataTextValue">
                                    <div class="nameValue">LI_1780</div>
                                  </div>
                                </div>
                              </div>
                              <div class="ChangeDisplay"></div>
                              <div style="display:inline" class="MetadataDisplay"></div>
                            </div>
                          </div>
                          <div class="Answer"><input type="checkbox" style="float:left;" name="47257.100004300" value="1777.100004300,Diaphragm" onchange="&#xA;						javascript:SelectUnselectParents('q47257.100004300', this)&#xA;					" onblur="&#xA;						javascript:OnChoiceBlur('1777.100004300', this)&#xA;					"><div class="itemTitle">
                              <div style="display:inline" class="idDisplay"><a onClick="javascript:syncItem(this)" name="1777">1777
            	-  
			</a></div>Diaphragm<div class="MetadataDisplay"></div>
                              <div class="ChangeDisplay"></div>
                              <div class="MetadataDisplay" style="display:inline">
         		&#xA0;<div class="nameDiv">
                                  <div class="name">name: </div>
                                  <div class="metadataTextValue">
                                    <div class="nameValue">LI_1777</div>
                                  </div>
                                </div>
                              </div>
                              <div class="ChangeDisplay"></div>
                              <div style="display:inline" class="MetadataDisplay"></div>
                            </div>
                          </div>
                          <div class="Answer"><input type="checkbox" style="float:left;" name="47257.100004300" value="1783.100004300,Mediastinum" onchange="&#xA;						javascript:SelectUnselectParents('q47257.100004300', this)&#xA;					" onblur="&#xA;						javascript:OnChoiceBlur('1783.100004300', this)&#xA;					"><div class="itemTitle">
                              <div style="display:inline" class="idDisplay"><a onClick="javascript:syncItem(this)" name="1783">1783
            	-  
			</a></div>Mediastinum<div class="MetadataDisplay"></div>
                              <div class="ChangeDisplay"></div>
                              <div class="MetadataDisplay" style="display:inline">
         		&#xA0;<div class="nameDiv">
                                  <div class="name">name: </div>
                                  <div class="metadataTextValue">
                                    <div class="nameValue">LI_1783</div>
                                  </div>
                                </div>
                              </div>
                              <div class="ChangeDisplay"></div>
                              <div style="display:inline" class="MetadataDisplay"></div>
                            </div>
                          </div>
                          <div class="question" id="q15957.100004300"><input type="hidden" class="TextBox" name="q15957.100004300" value="Specify Involved Structure(s)"><input id="maxcardinality" type="hidden" value=""><div class="QuestionInListItem">
                              <div class="mustImplement"></div>
                              <div class="QuestionTitle collapsable_q">
                                <div class="notRequired">+</div>
                                <div style="display:inline" class="idDisplay"><a onClick="javascript:syncItem(this)" name="15957">15957
            	-  
			</a></div>Specify Involved Structure(s)<div style="display:inline" class="MetadataDisplay">
                                  <div class="MetadataDisplay" style="display:inline-block">
               &#xA0;<div class="minCard">min: </div>
                                    <div class="metadataTextValue">0</div>
                                  </div>
                                  <div class="MetadataDisplay" style="display:inline">
               &#xA0;<div class="mustImplement">mI: </div>
                                    <div class="metadataTextValue">false</div>
         				&#xA0;<div class="reportText">
         			rptText:
         				</div>
                                    <div class="metadataTextValue">Involved Structure(s)</div>
         		&#xA0;<div class="nameDiv">
                                      <div class="name">name: </div>
                                      <div class="metadataTextValue">
                                        <div class="nameValue">Q_15957</div>
                                      </div>
                                    </div>
                                  </div>
                                  <div class="ChangeDisplay"></div>
                                  <div class="MetadataDisplay">
         		&#xA0;<div class="ResponseUnits">dt: </div>
                                    <div class="metadataTextValue">string</div>
         		&#xA0;	</div>
                                  <div class="ChangeDisplay"></div>
                                </div><input type="text" class="TextBox" name="15957.100004300" value=""></div>
                              <div class="command"></div>
                              <div style="clear:both;"></div>
                              <div style="clear:both;"></div>
                            </div>
                          </div>
                          <div class="Answer"><input type="checkbox" style="float:left;" name="47257.100004300" value="1784.100004300,Heart" onchange="&#xA;						javascript:SelectUnselectParents('q47257.100004300', this)&#xA;					" onblur="&#xA;						javascript:OnChoiceBlur('1784.100004300', this)&#xA;					"><div class="itemTitle">
                              <div style="display:inline" class="idDisplay"><a onClick="javascript:syncItem(this)" name="1784">1784
            	-  
			</a></div>Heart<div class="MetadataDisplay"></div>
                              <div class="ChangeDisplay"></div>
                              <div class="MetadataDisplay" style="display:inline">
         		&#xA0;<div class="nameDiv">
                                  <div class="name">name: </div>
                                  <div class="metadataTextValue">
                                    <div class="nameValue">LI_1784</div>
                                  </div>
                                </div>
                              </div>
                              <div class="ChangeDisplay"></div>
                              <div style="display:inline" class="MetadataDisplay"></div>
                            </div>
                          </div>
                          <div class="Answer"><input type="checkbox" style="float:left;" name="47257.100004300" value="1785.100004300,Great vessels" onchange="&#xA;						javascript:SelectUnselectParents('q47257.100004300', this)&#xA;					" onblur="&#xA;						javascript:OnChoiceBlur('1785.100004300', this)&#xA;					"><div class="itemTitle">
                              <div style="display:inline" class="idDisplay"><a onClick="javascript:syncItem(this)" name="1785">1785
            	-  
			</a></div>Great vessels<div class="MetadataDisplay"></div>
                              <div class="ChangeDisplay"></div>
                              <div class="MetadataDisplay" style="display:inline">
         		&#xA0;<div class="nameDiv">
                                  <div class="name">name: </div>
                                  <div class="metadataTextValue">
                                    <div class="nameValue">LI_1785</div>
                                  </div>
                                </div>
                              </div>
                              <div class="ChangeDisplay"></div>
                              <div style="display:inline" class="MetadataDisplay"></div>
                            </div>
                          </div>
                          <div class="Answer"><input type="checkbox" style="float:left;" name="47257.100004300" value="15958.100004300,Trachea" onchange="&#xA;						javascript:SelectUnselectParents('q47257.100004300', this)&#xA;					" onblur="&#xA;						javascript:OnChoiceBlur('15958.100004300', this)&#xA;					"><div class="itemTitle">
                              <div style="display:inline" class="idDisplay"><a onClick="javascript:syncItem(this)" name="15958">15958
            	-  
			</a></div>Trachea<div class="MetadataDisplay"></div>
                              <div class="ChangeDisplay"></div>
                              <div class="MetadataDisplay" style="display:inline">
         		&#xA0;<div class="nameDiv">
                                  <div class="name">name: </div>
                                  <div class="metadataTextValue">
                                    <div class="nameValue">LI_15958</div>
                                  </div>
                                </div>
                              </div>
                              <div class="ChangeDisplay"></div>
                              <div style="display:inline" class="MetadataDisplay"></div>
                            </div>
                          </div>
                          <div class="Answer"><input type="checkbox" style="float:left;" name="47257.100004300" value="42665.100004300,Recurrent laryngeal nerve" onchange="&#xA;						javascript:SelectUnselectParents('q47257.100004300', this)&#xA;					" onblur="&#xA;						javascript:OnChoiceBlur('42665.100004300', this)&#xA;					"><div class="itemTitle">
                              <div style="display:inline" class="idDisplay"><a onClick="javascript:syncItem(this)" name="42665">42665
            	-  
			</a></div>Recurrent laryngeal nerve<div class="MetadataDisplay"></div>
                              <div class="ChangeDisplay"></div>
                              <div class="MetadataDisplay" style="display:inline">
         		&#xA0;<div class="nameDiv">
                                  <div class="name">name: </div>
                                  <div class="metadataTextValue">
                                    <div class="nameValue">LI_42665</div>
                                  </div>
                                </div>
                              </div>
                              <div class="ChangeDisplay"></div>
                              <div style="display:inline" class="MetadataDisplay"></div>
                            </div>
                          </div>
                          <div class="Answer"><input type="checkbox" style="float:left;" name="47257.100004300" value="15959.100004300,Esophagus" onchange="&#xA;						javascript:SelectUnselectParents('q47257.100004300', this)&#xA;					" onblur="&#xA;						javascript:OnChoiceBlur('15959.100004300', this)&#xA;					"><div class="itemTitle">
                              <div style="display:inline" class="idDisplay"><a onClick="javascript:syncItem(this)" name="15959">15959
            	-  
			</a></div>Esophagus<div class="MetadataDisplay"></div>
                              <div class="ChangeDisplay"></div>
                              <div class="MetadataDisplay" style="display:inline">
         		&#xA0;<div class="nameDiv">
                                  <div class="name">name: </div>
                                  <div class="metadataTextValue">
                                    <div class="nameValue">LI_15959</div>
                                  </div>
                                </div>
                              </div>
                              <div class="ChangeDisplay"></div>
                              <div style="display:inline" class="MetadataDisplay"></div>
                            </div>
                          </div>
                          <div class="Answer"><input type="checkbox" style="float:left;" name="47257.100004300" value="15960.100004300,Vertebral body" onchange="&#xA;						javascript:SelectUnselectParents('q47257.100004300', this)&#xA;					" onblur="&#xA;						javascript:OnChoiceBlur('15960.100004300', this)&#xA;					"><div class="itemTitle">
                              <div style="display:inline" class="idDisplay"><a onClick="javascript:syncItem(this)" name="15960">15960
            	-  
			</a></div>Vertebral body<div class="MetadataDisplay"></div>
                              <div class="ChangeDisplay"></div>
                              <div class="MetadataDisplay" style="display:inline">
         		&#xA0;<div class="nameDiv">
                                  <div class="name">name: </div>
                                  <div class="metadataTextValue">
                                    <div class="nameValue">LI_15960</div>
                                  </div>
                                </div>
                              </div>
                              <div class="ChangeDisplay"></div>
                              <div style="display:inline" class="MetadataDisplay"></div>
                            </div>
                          </div>
                          <div class="Answer"><input type="checkbox" style="float:left;" name="47257.100004300" value="1786.100004300,Other (specify)" onchange="&#xA;						javascript:SelectUnselectParents('q47257.100004300', this)&#xA;					" onblur="&#xA;						javascript:OnChoiceBlur('1786.100004300', this)&#xA;					"><div class="itemTitle">
                              <div style="display:inline" class="idDisplay"><a onClick="javascript:syncItem(this)" name="1786">1786
            	-  
			</a></div>Other (specify)<div class="MetadataDisplay"></div>
                              <div class="ChangeDisplay"></div>
                              <div class="MetadataDisplay" style="display:inline">
         				&#xA0;<div class="reportText">
         			rptText:
         				</div>
                                <div class="metadataTextValue">{no text}</div>
         		&#xA0;<div class="nameDiv">
                                  <div class="name">name: </div>
                                  <div class="metadataTextValue">
                                    <div class="nameValue">LI_1786</div>
                                  </div>
                                </div>
                              </div>
                              <div class="ChangeDisplay"></div>
                              <div style="display:inline" class="MetadataDisplay"></div>
                              <div class="MetadataDisplay">
               &#xA0;<div class="responseRequired">respReq: </div>
         		&#xA0;<div class="ResponseUnits">dt: </div>
                                <div class="metadataTextValue">string</div>
         		&#xA0;	</div>
                              <div class="ChangeDisplay"></div><input type="text" class="AnswerTextBox" name="47257.100004300" value="" onkeydown="&#xA;							javascript:SelectChoiceOnKeyPress('1786.100004300', this, event)&#xA;						" onblur="&#xA;							javascript:SelectUnselectChoiceOnBlur('1786.100004300', this)&#xA;						"></div>
                          </div>
                          <div style="clear:both;"></div>
                        </div>
                      </div>
                      <div class="Answer"><input type="radio" style="float:left" name="43724.100004300" value="36002.100004300,Cannot be assessed (explain)" onchange="&#xA;						javascript:SelectUnselectParents('q43724.100004300', this);&#xA;					" onblur="&#xA;						javascript:OnChoiceBlur('36002.100004300', this)&#xA;					"><div class="itemTitle">
                          <div style="display:inline" class="idDisplay"><a onClick="javascript:syncItem(this)" name="36002">36002
            	-  
			</a></div>Cannot be assessed (explain)<div class="MetadataDisplay"></div>
                          <div class="ChangeDisplay"></div>
                          <div class="MetadataDisplay" style="display:inline">
         				&#xA0;<div class="reportText">
         			rptText:
         				</div>
                            <div class="metadataTextValue">Cannot be assessed</div>
         		&#xA0;<div class="nameDiv">
                              <div class="name">name: </div>
                              <div class="metadataTextValue">
                                <div class="nameValue">LI_36002</div>
                              </div>
                            </div>
                          </div>
                          <div class="ChangeDisplay"></div>
                          <div style="display:inline" class="MetadataDisplay"></div>
                          <div class="MetadataDisplay">
               &#xA0;<div class="responseRequired">respReq: </div>
         		&#xA0;<div class="ResponseUnits">dt: </div>
                            <div class="metadataTextValue">string</div>
         		&#xA0;	</div>
                          <div class="ChangeDisplay"></div><input type="text" class="AnswerTextBox" width="100" name="43724.100004300" value="" onkeydown="&#xA;							javascript:SelectChoiceOnKeyPress('36002.100004300', this, event)&#xA;						" onblur="&#xA;							javascript:SelectUnselectChoiceOnBlur('36002.100004300', this)&#xA;						">
					&#xA0;</div>
                      </div>
                      <div style="clear:both;"></div>
                    </div>
                  </div>
                  <div class="question" id="q15684.100004300"><input type="hidden" class="TextBox" name="q15684.100004300" value="Treatment Effect (Note I)"><input id="maxcardinality" type="hidden" value=""><div class="QuestionInSection">
                      <div class="QuestionTitle collapsable_q">
                        <div style="display:inline" class="idDisplay"><a onClick="javascript:syncItem(this)" name="15684">15684
            	-  
			</a></div>Treatment Effect (Note I)<div style="display:inline-block" class="metadata"></div>
                        <div class="MetadataDisplay" style="display:inline-block"></div>
                        <div class="MetadataDisplay" style="display:inline">
         				&#xA0;<div class="reportText">
         			rptText:
         				</div>
                          <div class="metadataTextValue">Treatment Effect</div>
         		&#xA0;<div class="nameDiv">
                            <div class="name">name: </div>
                            <div class="metadataTextValue">
                              <div class="nameValue">Q_15684</div>
                            </div>
                          </div>
                        </div>
                        <div class="ChangeDisplay"></div>
                        <div class="MetadataDisplay"></div>
                        <div class="ChangeDisplay"></div>
                      </div><a class="QuestionReset" onclick="resetAnswer(this);return false" href="&#xA;								#&#xA;							">(reset)</a><div class="command"></div>
                      <div style="clear:both;"></div>
                      <div class="Answer"><input type="radio" style="float:left" name="15684.100004300" value="30013.100004300,No known presurgical therapy" onchange="&#xA;						javascript:SelectUnselectParents('q15684.100004300', this);&#xA;					" onblur="&#xA;						javascript:OnChoiceBlur('30013.100004300', this)&#xA;					"><div class="itemTitle">
                          <div style="display:inline" class="idDisplay"><a onClick="javascript:syncItem(this)" name="30013">30013
            	-  
			</a></div>No known presurgical therapy<div class="MetadataDisplay"></div>
                          <div class="ChangeDisplay"></div>
                          <div class="MetadataDisplay" style="display:inline">
         		&#xA0;<div class="nameDiv">
                              <div class="name">name: </div>
                              <div class="metadataTextValue">
                                <div class="nameValue">LI_30013</div>
                              </div>
                            </div>
                          </div>
                          <div class="ChangeDisplay"></div>
                          <div style="display:inline" class="MetadataDisplay"></div>
                        </div>
                      </div>
                      <div class="Answer"><input type="radio" style="float:left" name="15684.100004300" value="15736.100004300,Greater than 10% residual viable tumor" onchange="&#xA;						javascript:SelectUnselectParents('q15684.100004300', this);&#xA;					" onblur="&#xA;						javascript:OnChoiceBlur('15736.100004300', this)&#xA;					"><div class="itemTitle">
                          <div style="display:inline" class="idDisplay"><a onClick="javascript:syncItem(this)" name="15736">15736
            	-  
			</a></div>Greater than 10% residual viable tumor<div class="MetadataDisplay"></div>
                          <div class="ChangeDisplay"></div>
                          <div class="MetadataDisplay" style="display:inline">
         		&#xA0;<div class="nameDiv">
                              <div class="name">name: </div>
                              <div class="metadataTextValue">
                                <div class="nameValue">LI_15736</div>
                              </div>
                            </div>
                          </div>
                          <div class="ChangeDisplay"></div>
                          <div style="display:inline" class="MetadataDisplay"></div>
                        </div>
                      </div>
                      <div class="Answer"><input type="radio" style="float:left" name="15684.100004300" value="15737.100004300,Less than 10% residual viable tumor" onchange="&#xA;						javascript:SelectUnselectParents('q15684.100004300', this);&#xA;					" onblur="&#xA;						javascript:OnChoiceBlur('15737.100004300', this)&#xA;					"><div class="itemTitle">
                          <div style="display:inline" class="idDisplay"><a onClick="javascript:syncItem(this)" name="15737">15737
            	-  
			</a></div>Less than 10% residual viable tumor<div class="MetadataDisplay"></div>
                          <div class="ChangeDisplay"></div>
                          <div class="MetadataDisplay" style="display:inline">
         		&#xA0;<div class="nameDiv">
                              <div class="name">name: </div>
                              <div class="metadataTextValue">
                                <div class="nameValue">LI_15737</div>
                              </div>
                            </div>
                          </div>
                          <div class="ChangeDisplay"></div>
                          <div style="display:inline" class="MetadataDisplay"></div>
                        </div>
                      </div>
                      <div class="Answer"><input type="radio" style="float:left" name="15684.100004300" value="15686.100004300,Cannot be determined" onchange="&#xA;						javascript:SelectUnselectParents('q15684.100004300', this);&#xA;					" onblur="&#xA;						javascript:OnChoiceBlur('15686.100004300', this)&#xA;					"><div class="itemTitle">
                          <div style="display:inline" class="idDisplay"><a onClick="javascript:syncItem(this)" name="15686">15686
            	-  
			</a></div>Cannot be determined<div class="MetadataDisplay"></div>
                          <div class="ChangeDisplay"></div>
                          <div class="MetadataDisplay" style="display:inline">
         		&#xA0;<div class="nameDiv">
                              <div class="name">name: </div>
                              <div class="metadataTextValue">
                                <div class="nameValue">LI_15686</div>
                              </div>
                            </div>
                          </div>
                          <div class="ChangeDisplay"></div>
                          <div style="display:inline" class="MetadataDisplay"></div>
                        </div>
                      </div>
                      <div style="clear:both;"></div>
                    </div>
                  </div>
                  <div class="question" id="q1795.100004300"><input type="hidden" class="TextBox" name="q1795.100004300" value="Lymphovascular Invasion (Note F)"><input id="maxcardinality" type="hidden" value=""><div class="QuestionInSection">
                      <div class="QuestionTitle collapsable_q">
                        <div style="display:inline" class="idDisplay"><a onClick="javascript:syncItem(this)" name="1795">1795
            	-  
			</a></div>Lymphovascular Invasion (Note F)<div style="display:inline-block" class="metadata"></div>
                        <div class="MetadataDisplay" style="display:inline-block"></div>
                        <div class="MetadataDisplay" style="display:inline">
         				&#xA0;<div class="reportText">
         			rptText:
         				</div>
                          <div class="metadataTextValue">Lymphovascular Invasion</div>
         		&#xA0;<div class="nameDiv">
                            <div class="name">name: </div>
                            <div class="metadataTextValue">
                              <div class="nameValue">Q_1795</div>
                            </div>
                          </div>
                        </div>
                        <div class="ChangeDisplay"></div>
                        <div class="MetadataDisplay"></div>
                        <div class="ChangeDisplay"></div>
                      </div><a class="QuestionReset" onclick="resetAnswer(this);return false" href="&#xA;								#&#xA;							">(reset)</a><div class="command"></div>
                      <div style="clear:both;"></div>
                      <div class="Answer"><input type="radio" style="float:left" name="1795.100004300" value="1796.100004300,Not identified" onchange="&#xA;						javascript:SelectUnselectParents('q1795.100004300', this);&#xA;					" onblur="&#xA;						javascript:OnChoiceBlur('1796.100004300', this)&#xA;					"><div class="itemTitle">
                          <div style="display:inline" class="idDisplay"><a onClick="javascript:syncItem(this)" name="1796">1796
            	-  
			</a></div>Not identified<div class="MetadataDisplay"></div>
                          <div class="ChangeDisplay"></div>
                          <div class="MetadataDisplay" style="display:inline">
         		&#xA0;<div class="nameDiv">
                              <div class="name">name: </div>
                              <div class="metadataTextValue">
                                <div class="nameValue">LI_1796</div>
                              </div>
                            </div>
                          </div>
                          <div class="ChangeDisplay"></div>
                          <div style="display:inline" class="MetadataDisplay"></div>
                        </div>
                      </div>
                      <div class="Answer"><input type="radio" style="float:left" name="1795.100004300" value="1797.100004300,Present" onchange="&#xA;						javascript:SelectUnselectParents('q1795.100004300', this);&#xA;					" onblur="&#xA;						javascript:OnChoiceBlur('1797.100004300', this)&#xA;					"><div class="itemTitle">
                          <div style="display:inline" class="idDisplay"><a onClick="javascript:syncItem(this)" name="1797">1797
            	-  
			</a></div>Present<div class="MetadataDisplay"></div>
                          <div class="ChangeDisplay"></div>
                          <div class="MetadataDisplay" style="display:inline">
         		&#xA0;<div class="nameDiv">
                              <div class="name">name: </div>
                              <div class="metadataTextValue">
                                <div class="nameValue">LI_1797</div>
                              </div>
                            </div>
                          </div>
                          <div class="ChangeDisplay"></div>
                          <div style="display:inline" class="MetadataDisplay"></div>
                        </div>
                      </div>
                      <div class="question" id="q30008.100004300"><input type="hidden" class="TextBox" name="q30008.100004300" value=""><input id="maxcardinality" type="hidden" value=""><div class="QuestionInListItem">
                          <div class="mustImplement"></div>
                          <div class="QuestionTitle collapsable_q">
                            <div class="notRequired">+</div>
                            <div style="display:inline" class="idDisplay"><a onClick="javascript:syncItem(this)" name="30008">30008
            	-  
			</a></div>
                            <div style="display:inline-block" class="MetadataDisplay">
                              <div class="MetadataDisplay" style="display:inline-block">
               &#xA0;<div class="minCard">min: </div>
                                <div class="metadataTextValue">0</div>
                              </div>
                              <div class="MetadataDisplay" style="display:inline">
               &#xA0;<div class="mustImplement">mI: </div>
                                <div class="metadataTextValue">false</div>
                                <div class="altText">
         					altText:
         				</div>
                                <div class="metadataTextValue">Lymphovascular Invasion</div>
         		&#xA0;<div class="nameDiv">
                                  <div class="name">name: </div>
                                  <div class="metadataTextValue">
                                    <div class="nameValue">Q_30008</div>
                                  </div>
                                </div>
                              </div>
                              <div class="ChangeDisplay"></div>
                              <div class="MetadataDisplay"></div>
                              <div class="ChangeDisplay"></div>
                            </div>
                          </div><a class="QuestionReset" onclick="resetAnswer(this);return false" href="&#xA;								#&#xA;							">(reset)</a><div class="command"></div>
                          <div style="clear:both;"></div>
                          <div class="Answer"><input type="checkbox" style="float:left;" name="30008.100004300" value="30009.100004300,Lymphatic" onchange="&#xA;						javascript:SelectUnselectParents('q30008.100004300', this)&#xA;					" onblur="&#xA;						javascript:OnChoiceBlur('30009.100004300', this)&#xA;					"><div class="itemTitle">
                              <div style="display:inline" class="idDisplay"><a onClick="javascript:syncItem(this)" name="30009">30009
            	-  
			</a></div>Lymphatic<div class="MetadataDisplay"></div>
                              <div class="ChangeDisplay"></div>
                              <div class="MetadataDisplay" style="display:inline">
         		&#xA0;<div class="nameDiv">
                                  <div class="name">name: </div>
                                  <div class="metadataTextValue">
                                    <div class="nameValue">LI_30009</div>
                                  </div>
                                </div>
                              </div>
                              <div class="ChangeDisplay"></div>
                              <div style="display:inline" class="MetadataDisplay"></div>
                            </div>
                          </div>
                          <div class="Answer"><input type="checkbox" style="float:left;" name="30008.100004300" value="30010.100004300,Arterial" onchange="&#xA;						javascript:SelectUnselectParents('q30008.100004300', this)&#xA;					" onblur="&#xA;						javascript:OnChoiceBlur('30010.100004300', this)&#xA;					"><div class="itemTitle">
                              <div style="display:inline" class="idDisplay"><a onClick="javascript:syncItem(this)" name="30010">30010
            	-  
			</a></div>Arterial<div class="MetadataDisplay"></div>
                              <div class="ChangeDisplay"></div>
                              <div class="MetadataDisplay" style="display:inline">
         		&#xA0;<div class="nameDiv">
                                  <div class="name">name: </div>
                                  <div class="metadataTextValue">
                                    <div class="nameValue">LI_30010</div>
                                  </div>
                                </div>
                              </div>
                              <div class="ChangeDisplay"></div>
                              <div style="display:inline" class="MetadataDisplay"></div>
                            </div>
                          </div>
                          <div class="Answer"><input type="checkbox" style="float:left;" name="30008.100004300" value="30011.100004300,Venous" onchange="&#xA;						javascript:SelectUnselectParents('q30008.100004300', this)&#xA;					" onblur="&#xA;						javascript:OnChoiceBlur('30011.100004300', this)&#xA;					"><div class="itemTitle">
                              <div style="display:inline" class="idDisplay"><a onClick="javascript:syncItem(this)" name="30011">30011
            	-  
			</a></div>Venous<div class="MetadataDisplay"></div>
                              <div class="ChangeDisplay"></div>
                              <div class="MetadataDisplay" style="display:inline">
         		&#xA0;<div class="nameDiv">
                                  <div class="name">name: </div>
                                  <div class="metadataTextValue">
                                    <div class="nameValue">LI_30011</div>
                                  </div>
                                </div>
                              </div>
                              <div class="ChangeDisplay"></div>
                              <div style="display:inline" class="MetadataDisplay"></div>
                            </div>
                          </div>
                          <div style="clear:both;"></div>
                        </div>
                      </div>
                      <div class="Answer"><input type="radio" style="float:left" name="1795.100004300" value="1798.100004300,Cannot be determined" onchange="&#xA;						javascript:SelectUnselectParents('q1795.100004300', this);&#xA;					" onblur="&#xA;						javascript:OnChoiceBlur('1798.100004300', this)&#xA;					"><div class="itemTitle">
                          <div style="display:inline" class="idDisplay"><a onClick="javascript:syncItem(this)" name="1798">1798
            	-  
			</a></div>Cannot be determined<div class="MetadataDisplay"></div>
                          <div class="ChangeDisplay"></div>
                          <div class="MetadataDisplay" style="display:inline">
         		&#xA0;<div class="nameDiv">
                              <div class="name">name: </div>
                              <div class="metadataTextValue">
                                <div class="nameValue">LI_1798</div>
                              </div>
                            </div>
                          </div>
                          <div class="ChangeDisplay"></div>
                          <div style="display:inline" class="MetadataDisplay"></div>
                          <div class="MetadataDisplay">
         		&#xA0;<div class="ResponseUnits">dt: </div>
                            <div class="metadataTextValue">string</div>
         		&#xA0;	</div>
                          <div class="ChangeDisplay"></div><input type="text" class="AnswerTextBox" width="100" name="1795.100004300" value="" onkeydown="&#xA;							javascript:SelectChoiceOnKeyPress('1798.100004300', this, event)&#xA;						" onblur="&#xA;							javascript:SelectUnselectChoiceOnBlur('1798.100004300', this)&#xA;						">
					&#xA0;</div>
                      </div>
                      <div style="clear:both;"></div>
                    </div>
                  </div>
                  <div style="clear:both"></div>
                </td>
              </tr>
            </table>
          </div>
          <div id="s1684.100004300"><input id="maxcardinality" type="hidden" value=""><table class="HeaderTable" align="center" id="s1684.100004300">
              <tr>
                <td>
                  <div class="TopHeader collapsable">
                    <div style="display:inline" class="idDisplay"><a onClick="javascript:syncItem(this)" name="1684">1684
            	-  
			</a></div>MARGINS (Note H)<div style="display:inline" class="MetadataDisplay">
                      <div class="MetadataDisplay" style="display:inline">
						&#xA0;<div class="reportText">
							rptText:
						</div>MARGINS
					&#xA0;<div class="nameDiv">
                          <div class="name">name: </div>
                          <div class="nameValue">S_1684</div>
                        </div>
                      </div>
                      <div class="ChangeDisplay"></div>
                    </div>
                  </div>
                  <div style="clear:both"></div>
                  <div class="question" id="q46319.100004300"><input type="hidden" class="TextBox" name="q46319.100004300" value="Margins"><input id="maxcardinality" type="hidden" value=""><div class="QuestionInSection">
                      <div class="QuestionTitle collapsable_q">
                        <div style="display:inline" class="idDisplay"><a onClick="javascript:syncItem(this)" name="46319">46319
            	-  
			</a></div>Margins<div style="display:inline-block" class="metadata"></div>
                        <div class="MetadataDisplay" style="display:inline-block"></div>
                        <div class="MetadataDisplay" style="display:inline">
         		&#xA0;<div class="nameDiv">
                            <div class="name">name: </div>
                            <div class="metadataTextValue">
                              <div class="nameValue">Q_46319</div>
                            </div>
                          </div>
                        </div>
                        <div class="ChangeDisplay"></div>
                        <div class="MetadataDisplay"></div>
                        <div class="ChangeDisplay"></div>
                      </div><a class="QuestionReset" onclick="resetAnswer(this);return false" href="&#xA;								#&#xA;							">(reset)</a><div class="command"></div>
                      <div style="clear:both;"></div>
                      <div>
                        <div class="ListNote">
                          <div style="display:inline" class="idDisplay"><a onClick="javascript:syncItem(this)" name="59537">59537
            	-  
			</a></div># Note: Select this answer only if all margins are uninvolved and all margins can be assessed.<div style="display:inline" class="MetadataDisplay">
                            <div class="MetadataDisplay" style="display:inline">
						&#xA0;<div class="reportText">
							rptText:
						</div>
                              <div class="metadataTextValue">{no text}</div>
					&#xA0;<div class="nameDiv">
                                <div class="name">name: </div>
                                <div class="metadataTextValue">
                                  <div class="nameValue">DI_59537</div>
                                </div>
                              </div>
                            </div>
                            <div class="ChangeDisplay"></div>
                          </div>
                        </div>
                        <div style="clear:both;"></div>
                      </div>
                      <div class="Answer"><input type="radio" style="float:left" name="46319.100004300" value="54457.100004300,All margins are uninvolved by tumor#" onchange="&#xA;						javascript:SelectUnselectParents('q46319.100004300', this);&#xA;					" onblur="&#xA;						javascript:OnChoiceBlur('54457.100004300', this)&#xA;					"><div class="itemTitle">
                          <div style="display:inline" class="idDisplay"><a onClick="javascript:syncItem(this)" name="54457">54457
            	-  
			</a></div>All margins are uninvolved by tumor#<div class="MetadataDisplay"></div>
                          <div class="ChangeDisplay"></div>
                          <div class="MetadataDisplay" style="display:inline">
         				&#xA0;<div class="reportText">
         			rptText:
         				</div>
                            <div class="metadataTextValue">All margins are uninvolved by tumor</div>
         		&#xA0;<div class="nameDiv">
                              <div class="name">name: </div>
                              <div class="metadataTextValue">
                                <div class="nameValue">LI_54457</div>
                              </div>
                            </div>
                          </div>
                          <div class="ChangeDisplay"></div>
                          <div style="display:inline" class="MetadataDisplay"></div>
                        </div>
                      </div>
                      <div class="question" id="q44429.100004300"><input type="hidden" class="TextBox" name="q44429.100004300" value="Margins Examined"><input id="maxcardinality" type="hidden" value=""><div class="QuestionInListItem">
                          <div class="QuestionTitle collapsable_q">
                            <div style="display:inline" class="idDisplay"><a onClick="javascript:syncItem(this)" name="44429">44429
            	-  
			</a></div>Margins Examined<div style="display:inline" class="MetadataDisplay">
                              <div class="MetadataDisplay" style="display:inline-block"></div>
                              <div class="MetadataDisplay" style="display:inline">
         		&#xA0;<div class="nameDiv">
                                  <div class="name">name: </div>
                                  <div class="metadataTextValue">
                                    <div class="nameValue">Q_44429</div>
                                  </div>
                                </div>
                              </div>
                              <div class="ChangeDisplay"></div>
                              <div class="MetadataDisplay"></div>
                              <div class="ChangeDisplay"></div>
                            </div>
                          </div><a class="QuestionReset" onclick="resetAnswer(this);return false" href="&#xA;								#&#xA;							">(reset)</a><div class="command"></div>
                          <div style="clear:both;"></div>
                          <div class="Answer"><input type="checkbox" style="float:left;" name="44429.100004300" value="55229.100004300,Bronchial" onchange="&#xA;						javascript:SelectUnselectParents('q44429.100004300', this)&#xA;					" onblur="&#xA;						javascript:OnChoiceBlur('55229.100004300', this)&#xA;					"><div class="itemTitle">
                              <div style="display:inline" class="idDisplay"><a onClick="javascript:syncItem(this)" name="55229">55229
            	-  
			</a></div>Bronchial<div class="MetadataDisplay"></div>
                              <div class="ChangeDisplay"></div>
                              <div class="MetadataDisplay" style="display:inline">
         		&#xA0;<div class="nameDiv">
                                  <div class="name">name: </div>
                                  <div class="metadataTextValue">
                                    <div class="nameValue">LI_55229</div>
                                  </div>
                                </div>
                              </div>
                              <div class="ChangeDisplay"></div>
                              <div style="display:inline" class="MetadataDisplay"></div>
                            </div>
                          </div>
                          <div class="Answer"><input type="checkbox" style="float:left;" name="44429.100004300" value="59557.100004300,Vascular" onchange="&#xA;						javascript:SelectUnselectParents('q44429.100004300', this)&#xA;					" onblur="&#xA;						javascript:OnChoiceBlur('59557.100004300', this)&#xA;					"><div class="itemTitle">
                              <div style="display:inline" class="idDisplay"><a onClick="javascript:syncItem(this)" name="59557">59557
            	-  
			</a></div>Vascular<div class="MetadataDisplay"></div>
                              <div class="ChangeDisplay"></div>
                              <div class="MetadataDisplay" style="display:inline">
         		&#xA0;<div class="nameDiv">
                                  <div class="name">name: </div>
                                  <div class="metadataTextValue">
                                    <div class="nameValue">LI_59557</div>
                                  </div>
                                </div>
                              </div>
                              <div class="ChangeDisplay"></div>
                              <div style="display:inline" class="MetadataDisplay"></div>
                            </div>
                          </div>
                          <div class="Answer"><input type="checkbox" style="float:left;" name="44429.100004300" value="45099.100004300,Parenchymal" onchange="&#xA;						javascript:SelectUnselectParents('q44429.100004300', this)&#xA;					" onblur="&#xA;						javascript:OnChoiceBlur('45099.100004300', this)&#xA;					"><div class="itemTitle">
                              <div style="display:inline" class="idDisplay"><a onClick="javascript:syncItem(this)" name="45099">45099
            	-  
			</a></div>Parenchymal<div class="MetadataDisplay"></div>
                              <div class="ChangeDisplay"></div>
                              <div class="MetadataDisplay" style="display:inline">
         		&#xA0;<div class="nameDiv">
                                  <div class="name">name: </div>
                                  <div class="metadataTextValue">
                                    <div class="nameValue">LI_45099</div>
                                  </div>
                                </div>
                              </div>
                              <div class="ChangeDisplay"></div>
                              <div style="display:inline" class="MetadataDisplay"></div>
                            </div>
                          </div>
                          <div class="Answer"><input type="checkbox" style="float:left;" name="44429.100004300" value="57021.100004300,Other (specify)" onchange="&#xA;						javascript:SelectUnselectParents('q44429.100004300', this)&#xA;					" onblur="&#xA;						javascript:OnChoiceBlur('57021.100004300', this)&#xA;					"><div class="itemTitle">
                              <div style="display:inline" class="idDisplay"><a onClick="javascript:syncItem(this)" name="57021">57021
            	-  
			</a></div>Other (specify)<div class="MetadataDisplay"></div>
                              <div class="ChangeDisplay"></div>
                              <div class="MetadataDisplay" style="display:inline">
         				&#xA0;<div class="reportText">
         			rptText:
         				</div>
                                <div class="metadataTextValue">{no text}</div>
         		&#xA0;<div class="nameDiv">
                                  <div class="name">name: </div>
                                  <div class="metadataTextValue">
                                    <div class="nameValue">LI_57021</div>
                                  </div>
                                </div>
                              </div>
                              <div class="ChangeDisplay"></div>
                              <div style="display:inline" class="MetadataDisplay"></div>
                              <div class="MetadataDisplay">
               &#xA0;<div class="responseRequired">respReq: </div>
         		&#xA0;<div class="ResponseUnits">dt: </div>
                                <div class="metadataTextValue">string</div>
         		&#xA0;	</div>
                              <div class="ChangeDisplay"></div><input type="text" class="AnswerTextBox" name="44429.100004300" value="" onkeydown="&#xA;							javascript:SelectChoiceOnKeyPress('57021.100004300', this, event)&#xA;						" onblur="&#xA;							javascript:SelectUnselectChoiceOnBlur('57021.100004300', this)&#xA;						"></div>
                          </div>
                          <div class="Answer"><input type="checkbox" style="float:left;" name="44429.100004300" value="47263.100004300,Cannot be determined (explain)" onchange="&#xA;						javascript:SelectUnselectParents('q44429.100004300', this)&#xA;					" onblur="&#xA;						javascript:OnChoiceBlur('47263.100004300', this)&#xA;					"><div class="itemTitle">
                              <div style="display:inline" class="idDisplay"><a onClick="javascript:syncItem(this)" name="47263">47263
            	-  
			</a></div>Cannot be determined (explain)<div class="MetadataDisplay"></div>
                              <div class="ChangeDisplay"></div>
                              <div class="MetadataDisplay" style="display:inline">
         				&#xA0;<div class="reportText">
         			rptText:
         				</div>
                                <div class="metadataTextValue">Cannot be determined</div>
         		&#xA0;<div class="nameDiv">
                                  <div class="name">name: </div>
                                  <div class="metadataTextValue">
                                    <div class="nameValue">LI_47263</div>
                                  </div>
                                </div>
                              </div>
                              <div class="ChangeDisplay"></div>
                              <div style="display:inline" class="MetadataDisplay"></div>
                              <div class="MetadataDisplay">
               &#xA0;<div class="responseRequired">respReq: </div>
         		&#xA0;<div class="ResponseUnits">dt: </div>
                                <div class="metadataTextValue">string</div>
         		&#xA0;	</div>
                              <div class="ChangeDisplay"></div><input type="text" class="AnswerTextBox" name="44429.100004300" value="" onkeydown="&#xA;							javascript:SelectChoiceOnKeyPress('47263.100004300', this, event)&#xA;						" onblur="&#xA;							javascript:SelectUnselectChoiceOnBlur('47263.100004300', this)&#xA;						"></div>
                          </div>
                          <div style="clear:both;"></div>
                        </div>
                      </div>
                      <div class="question" id="q50088.100004300"><input type="hidden" class="TextBox" name="q50088.100004300" value="Distance of Invasive Carcinoma from Closest Margin in Centimeters (cm)"><input id="maxcardinality" type="hidden" value=""><div class="QuestionInListItem">
                          <div class="QuestionTitle collapsable_q">
                            <div style="display:inline" class="idDisplay"><a onClick="javascript:syncItem(this)" name="50088">50088
            	-  
			</a></div>Distance of Invasive Carcinoma from Closest Margin in Centimeters (cm)<div style="display:inline" class="MetadataDisplay">
                              <div class="MetadataDisplay" style="display:inline-block"></div>
                              <div class="MetadataDisplay" style="display:inline">
         				&#xA0;<div class="reportText">
         			rptText:
         				</div>
                                <div class="metadataTextValue">Distance of Invasive Carcinoma from Closest Margin (Centimeters)</div>
         		&#xA0;<div class="nameDiv">
                                  <div class="name">name: </div>
                                  <div class="metadataTextValue">
                                    <div class="nameValue">Q_50088</div>
                                  </div>
                                </div>
                              </div>
                              <div class="ChangeDisplay"></div>
                              <div class="MetadataDisplay"></div>
                              <div class="ChangeDisplay"></div>
                            </div>
                          </div><a class="QuestionReset" onclick="resetAnswer(this);return false" href="&#xA;								#&#xA;							">(reset)</a><div class="command"></div>
                          <div style="clear:both;"></div>
                          <div class="Answer"><input type="radio" style="float:left" name="50088.100004300" value="52813.100004300,Specify in Centimeters (cm)" onchange="&#xA;						javascript:SelectUnselectParents('q50088.100004300', this);&#xA;					" onblur="&#xA;						javascript:OnChoiceBlur('52813.100004300', this)&#xA;					"><div class="itemTitle">
                              <div style="display:inline" class="idDisplay"><a onClick="javascript:syncItem(this)" name="52813">52813
            	-  
			</a></div>Specify in Centimeters (cm)<div class="MetadataDisplay"></div>
                              <div class="ChangeDisplay"></div>
                              <div class="MetadataDisplay" style="display:inline">
         				&#xA0;<div class="reportText">
         			rptText:
         				</div>
                                <div class="metadataTextValue">{no text}</div>
         		&#xA0;<div class="nameDiv">
                                  <div class="name">name: </div>
                                  <div class="metadataTextValue">
                                    <div class="nameValue">LI_52813</div>
                                  </div>
                                </div>
                              </div>
                              <div class="ChangeDisplay"></div>
                              <div style="display:inline" class="MetadataDisplay"></div>
                              <div class="MetadataDisplay">
               &#xA0;<div class="ResponseUnits">un: </div>
                                <div class="metadataTextValue">cm</div>
               &#xA0;<div class="TextAfterResponse">txtAft: </div>
                                <div class="metadataTextValue">cm</div>
               &#xA0;<div class="responseRequired">respReq: </div>
         		&#xA0;<div class="ResponseUnits">dt: </div>
                                <div class="metadataTextValue">decimal</div>
         		&#xA0;	</div>
                              <div class="ChangeDisplay"></div><input type="text" class="AnswerTextBox" width="100" name="50088.100004300" value="" onkeydown="&#xA;							javascript:SelectChoiceOnKeyPress('52813.100004300', this, event)&#xA;						" onblur="&#xA;							javascript:SelectUnselectChoiceOnBlur('52813.100004300', this)&#xA;						">
					&#xA0;</div>
                          </div>
                          <div class="Answer"><input type="radio" style="float:left" name="50088.100004300" value="45597.100004300,At least in Centimeters (cm)" onchange="&#xA;						javascript:SelectUnselectParents('q50088.100004300', this);&#xA;					" onblur="&#xA;						javascript:OnChoiceBlur('45597.100004300', this)&#xA;					"><div class="itemTitle">
                              <div style="display:inline" class="idDisplay"><a onClick="javascript:syncItem(this)" name="45597">45597
            	-  
			</a></div>At least in Centimeters (cm)<div class="MetadataDisplay"></div>
                              <div class="ChangeDisplay"></div>
                              <div class="MetadataDisplay" style="display:inline">
         				&#xA0;<div class="reportText">
         			rptText:
         				</div>
                                <div class="metadataTextValue">At least</div>
         		&#xA0;<div class="nameDiv">
                                  <div class="name">name: </div>
                                  <div class="metadataTextValue">
                                    <div class="nameValue">LI_45597</div>
                                  </div>
                                </div>
                              </div>
                              <div class="ChangeDisplay"></div>
                              <div style="display:inline" class="MetadataDisplay"></div>
                              <div class="MetadataDisplay">
               &#xA0;<div class="ResponseUnits">un: </div>
                                <div class="metadataTextValue">cm</div>
               &#xA0;<div class="TextAfterResponse">txtAft: </div>
                                <div class="metadataTextValue">cm</div>
               &#xA0;<div class="responseRequired">respReq: </div>
         		&#xA0;<div class="ResponseUnits">dt: </div>
                                <div class="metadataTextValue">decimal</div>
         		&#xA0;	</div>
                              <div class="ChangeDisplay"></div><input type="text" class="AnswerTextBox" width="100" name="50088.100004300" value="" onkeydown="&#xA;							javascript:SelectChoiceOnKeyPress('45597.100004300', this, event)&#xA;						" onblur="&#xA;							javascript:SelectUnselectChoiceOnBlur('45597.100004300', this)&#xA;						">
					&#xA0;</div>
                          </div>
                          <div class="Answer"><input type="radio" style="float:left" name="50088.100004300" value="43911.100004300,Cannot be determined (explain)" onchange="&#xA;						javascript:SelectUnselectParents('q50088.100004300', this);&#xA;					" onblur="&#xA;						javascript:OnChoiceBlur('43911.100004300', this)&#xA;					"><div class="itemTitle">
                              <div style="display:inline" class="idDisplay"><a onClick="javascript:syncItem(this)" name="43911">43911
            	-  
			</a></div>Cannot be determined (explain)<div class="MetadataDisplay"></div>
                              <div class="ChangeDisplay"></div>
                              <div class="MetadataDisplay" style="display:inline">
         				&#xA0;<div class="reportText">
         			rptText:
         				</div>
                                <div class="metadataTextValue">Cannot be determined</div>
         		&#xA0;<div class="nameDiv">
                                  <div class="name">name: </div>
                                  <div class="metadataTextValue">
                                    <div class="nameValue">LI_43911</div>
                                  </div>
                                </div>
                              </div>
                              <div class="ChangeDisplay"></div>
                              <div style="display:inline" class="MetadataDisplay"></div>
                              <div class="MetadataDisplay">
               &#xA0;<div class="responseRequired">respReq: </div>
         		&#xA0;<div class="ResponseUnits">dt: </div>
                                <div class="metadataTextValue">string</div>
         		&#xA0;	</div>
                              <div class="ChangeDisplay"></div><input type="text" class="AnswerTextBox" width="100" name="50088.100004300" value="" onkeydown="&#xA;							javascript:SelectChoiceOnKeyPress('43911.100004300', this, event)&#xA;						" onblur="&#xA;							javascript:SelectUnselectChoiceOnBlur('43911.100004300', this)&#xA;						">
					&#xA0;</div>
                          </div>
                          <div class="Answer"><input type="radio" style="float:left" name="50088.100004300" value="59299.100004300,Not applicable (no invasive carcinoma in specimen)" onchange="&#xA;						javascript:SelectUnselectParents('q50088.100004300', this);&#xA;					" onblur="&#xA;						javascript:OnChoiceBlur('59299.100004300', this)&#xA;					"><div class="itemTitle">
                              <div style="display:inline" class="idDisplay"><a onClick="javascript:syncItem(this)" name="59299">59299
            	-  
			</a></div>Not applicable (no invasive carcinoma in specimen)<div class="MetadataDisplay">
               &#xA0;<div class="sdc">sdac </div>
                              </div>
                              <div class="ChangeDisplay"></div>
                              <div class="MetadataDisplay" style="display:inline">
         		&#xA0;<div class="nameDiv">
                                  <div class="name">name: </div>
                                  <div class="metadataTextValue">
                                    <div class="nameValue">LI_59299</div>
                                  </div>
                                </div>
                              </div>
                              <div class="ChangeDisplay"></div>
                              <div style="display:inline" class="MetadataDisplay"></div>
                            </div>
                          </div>
                          <div style="clear:both;"></div>
                          <div class="question" id="q45843.100004300"><input type="hidden" class="TextBox" name="q45843.100004300" value="Specify Closest Margin"><input id="maxcardinality" type="hidden" value=""><div class="QuestionInListItem">
                              <div class="QuestionTitle collapsable_q">
                                <div style="display:inline" class="idDisplay"><a onClick="javascript:syncItem(this)" name="45843">45843
            	-  
			</a></div>Specify Closest Margin<div style="display:inline" class="MetadataDisplay">
                                  <div class="MetadataDisplay" style="display:inline-block"></div>
                                  <div class="MetadataDisplay" style="display:inline">
         				&#xA0;<div class="reportText">
         			rptText:
         				</div>
                                    <div class="metadataTextValue">Closest Margin</div>
         		&#xA0;<div class="nameDiv">
                                      <div class="name">name: </div>
                                      <div class="metadataTextValue">
                                        <div class="nameValue">Q_45843</div>
                                      </div>
                                    </div>
                                  </div>
                                  <div class="ChangeDisplay"></div>
                                  <div class="MetadataDisplay"></div>
                                  <div class="ChangeDisplay"></div>
                                </div>
                              </div><a class="QuestionReset" onclick="resetAnswer(this);return false" href="&#xA;								#&#xA;							">(reset)</a><div class="command"></div>
                              <div style="clear:both;"></div>
                              <div class="Answer"><input type="checkbox" style="float:left;" name="45843.100004300" value="52567.100004300,Bronchial" onchange="&#xA;						javascript:SelectUnselectParents('q45843.100004300', this)&#xA;					" onblur="&#xA;						javascript:OnChoiceBlur('52567.100004300', this)&#xA;					"><div class="itemTitle">
                                  <div style="display:inline" class="idDisplay"><a onClick="javascript:syncItem(this)" name="52567">52567
            	-  
			</a></div>Bronchial<div class="MetadataDisplay"></div>
                                  <div class="ChangeDisplay"></div>
                                  <div class="MetadataDisplay" style="display:inline">
         		&#xA0;<div class="nameDiv">
                                      <div class="name">name: </div>
                                      <div class="metadataTextValue">
                                        <div class="nameValue">LI_52567</div>
                                      </div>
                                    </div>
                                  </div>
                                  <div class="ChangeDisplay"></div>
                                  <div style="display:inline" class="MetadataDisplay"></div>
                                </div>
                              </div>
                              <div class="Answer"><input type="checkbox" style="float:left;" name="45843.100004300" value="42803.100004300,Vascular" onchange="&#xA;						javascript:SelectUnselectParents('q45843.100004300', this)&#xA;					" onblur="&#xA;						javascript:OnChoiceBlur('42803.100004300', this)&#xA;					"><div class="itemTitle">
                                  <div style="display:inline" class="idDisplay"><a onClick="javascript:syncItem(this)" name="42803">42803
            	-  
			</a></div>Vascular<div class="MetadataDisplay"></div>
                                  <div class="ChangeDisplay"></div>
                                  <div class="MetadataDisplay" style="display:inline">
         		&#xA0;<div class="nameDiv">
                                      <div class="name">name: </div>
                                      <div class="metadataTextValue">
                                        <div class="nameValue">LI_42803</div>
                                      </div>
                                    </div>
                                  </div>
                                  <div class="ChangeDisplay"></div>
                                  <div style="display:inline" class="MetadataDisplay"></div>
                                </div>
                              </div>
                              <div class="Answer"><input type="checkbox" style="float:left;" name="45843.100004300" value="54210.100004300,Parenchymal" onchange="&#xA;						javascript:SelectUnselectParents('q45843.100004300', this)&#xA;					" onblur="&#xA;						javascript:OnChoiceBlur('54210.100004300', this)&#xA;					"><div class="itemTitle">
                                  <div style="display:inline" class="idDisplay"><a onClick="javascript:syncItem(this)" name="54210">54210
            	-  
			</a></div>Parenchymal<div class="MetadataDisplay"></div>
                                  <div class="ChangeDisplay"></div>
                                  <div class="MetadataDisplay" style="display:inline">
         		&#xA0;<div class="nameDiv">
                                      <div class="name">name: </div>
                                      <div class="metadataTextValue">
                                        <div class="nameValue">LI_54210</div>
                                      </div>
                                    </div>
                                  </div>
                                  <div class="ChangeDisplay"></div>
                                  <div style="display:inline" class="MetadataDisplay"></div>
                                </div>
                              </div>
                              <div class="Answer"><input type="checkbox" style="float:left;" name="45843.100004300" value="41575.100004300,Other (specify)" onchange="&#xA;						javascript:SelectUnselectParents('q45843.100004300', this)&#xA;					" onblur="&#xA;						javascript:OnChoiceBlur('41575.100004300', this)&#xA;					"><div class="itemTitle">
                                  <div style="display:inline" class="idDisplay"><a onClick="javascript:syncItem(this)" name="41575">41575
            	-  
			</a></div>Other (specify)<div class="MetadataDisplay"></div>
                                  <div class="ChangeDisplay"></div>
                                  <div class="MetadataDisplay" style="display:inline">
         				&#xA0;<div class="reportText">
         			rptText:
         				</div>
                                    <div class="metadataTextValue">{no text}</div>
         		&#xA0;<div class="nameDiv">
                                      <div class="name">name: </div>
                                      <div class="metadataTextValue">
                                        <div class="nameValue">LI_41575</div>
                                      </div>
                                    </div>
                                  </div>
                                  <div class="ChangeDisplay"></div>
                                  <div style="display:inline" class="MetadataDisplay"></div>
                                  <div class="MetadataDisplay">
               &#xA0;<div class="responseRequired">respReq: </div>
         		&#xA0;<div class="ResponseUnits">dt: </div>
                                    <div class="metadataTextValue">string</div>
         		&#xA0;	</div>
                                  <div class="ChangeDisplay"></div><input type="text" class="AnswerTextBox" name="45843.100004300" value="" onkeydown="&#xA;							javascript:SelectChoiceOnKeyPress('41575.100004300', this, event)&#xA;						" onblur="&#xA;							javascript:SelectUnselectChoiceOnBlur('41575.100004300', this)&#xA;						"></div>
                              </div>
                              <div class="Answer"><input type="checkbox" style="float:left;" name="45843.100004300" value="50280.100004300,Cannot be determined (explain)" onchange="&#xA;						javascript:SelectUnselectParents('q45843.100004300', this)&#xA;					" onblur="&#xA;						javascript:OnChoiceBlur('50280.100004300', this)&#xA;					"><div class="itemTitle">
                                  <div style="display:inline" class="idDisplay"><a onClick="javascript:syncItem(this)" name="50280">50280
            	-  
			</a></div>Cannot be determined (explain)<div class="MetadataDisplay"></div>
                                  <div class="ChangeDisplay"></div>
                                  <div class="MetadataDisplay" style="display:inline">
         				&#xA0;<div class="reportText">
         			rptText:
         				</div>
                                    <div class="metadataTextValue">Cannot be determined</div>
         		&#xA0;<div class="nameDiv">
                                      <div class="name">name: </div>
                                      <div class="metadataTextValue">
                                        <div class="nameValue">LI_50280</div>
                                      </div>
                                    </div>
                                  </div>
                                  <div class="ChangeDisplay"></div>
                                  <div style="display:inline" class="MetadataDisplay"></div>
                                  <div class="MetadataDisplay">
               &#xA0;<div class="responseRequired">respReq: </div>
         		&#xA0;<div class="ResponseUnits">dt: </div>
                                    <div class="metadataTextValue">string</div>
         		&#xA0;	</div>
                                  <div class="ChangeDisplay"></div><input type="text" class="AnswerTextBox" name="45843.100004300" value="" onkeydown="&#xA;							javascript:SelectChoiceOnKeyPress('50280.100004300', this, event)&#xA;						" onblur="&#xA;							javascript:SelectUnselectChoiceOnBlur('50280.100004300', this)&#xA;						"></div>
                              </div>
                              <div class="Answer"><input type="checkbox" style="float:left;" name="45843.100004300" value="39789.100004300,Not applicable (no invasive carcinoma in specimen)" onchange="&#xA;						javascript:SelectUnselectParents('q45843.100004300', this)&#xA;					" onblur="&#xA;						javascript:OnChoiceBlur('39789.100004300', this)&#xA;					"><div class="itemTitle">
                                  <div style="display:inline" class="idDisplay"><a onClick="javascript:syncItem(this)" name="39789">39789
            	-  
			</a></div>Not applicable (no invasive carcinoma in specimen)<div class="MetadataDisplay">
               &#xA0;<div class="sds">sds </div>
                                  </div>
                                  <div class="ChangeDisplay"></div>
                                  <div class="MetadataDisplay" style="display:inline">
         		&#xA0;<div class="nameDiv">
                                      <div class="name">name: </div>
                                      <div class="metadataTextValue">
                                        <div class="nameValue">LI_39789</div>
                                      </div>
                                    </div>
                                  </div>
                                  <div class="ChangeDisplay"></div>
                                  <div style="display:inline" class="MetadataDisplay"></div>
                                  <div class="MetadataDisplay">
         		&#xA0;<div class="ResponseUnits">dt: </div>
                                    <div class="metadataTextValue">string</div>
         		&#xA0;	</div>
                                  <div class="ChangeDisplay"></div><input type="text" class="AnswerTextBox" name="45843.100004300" value="" onkeydown="&#xA;							javascript:SelectChoiceOnKeyPress('39789.100004300', this, event)&#xA;						" onblur="&#xA;							javascript:SelectUnselectChoiceOnBlur('39789.100004300', this)&#xA;						"></div>
                              </div>
                              <div style="clear:both;"></div>
                            </div>
                          </div>
                        </div>
                      </div>
                      <div class="question" id="q40078.100004300"><input type="hidden" class="TextBox" name="q40078.100004300" value="?Distance of Carcinoma in Situ from Closest Margin"><input id="maxcardinality" type="hidden" value=""><div class="QuestionInListItem">
                          <div class="QuestionTitle collapsable_q">
                            <div style="display:inline" class="idDisplay"><a onClick="javascript:syncItem(this)" name="40078">40078
            	-  
			</a></div>?Distance of Carcinoma in Situ from Closest Margin<div style="display:inline" class="MetadataDisplay">
                              <div class="MetadataDisplay" style="display:inline-block"></div>
                              <div class="MetadataDisplay" style="display:inline">
         				&#xA0;<div class="reportText">
         			rptText:
         				</div>
                                <div class="metadataTextValue">{no text}</div>
         		&#xA0;<div class="nameDiv">
                                  <div class="name">name: </div>
                                  <div class="metadataTextValue">
                                    <div class="nameValue">Q_40078</div>
                                  </div>
                                </div>
                              </div>
                              <div class="ChangeDisplay"></div>
                              <div class="MetadataDisplay"></div>
                              <div class="ChangeDisplay"></div>
                            </div>
                          </div><a class="QuestionReset" onclick="resetAnswer(this);return false" href="&#xA;								#&#xA;							">(reset)</a><div class="command"></div>
                          <div style="clear:both;"></div>
                          <div class="Answer"><input type="checkbox" style="float:left;" name="40078.100004300" value="49484.100004300,?Not applicable (no carcinoma in situ in specimen)" onchange="&#xA;						javascript:SelectUnselectParents('q40078.100004300', this)&#xA;					" onblur="&#xA;						javascript:OnChoiceBlur('49484.100004300', this)&#xA;					"><div class="itemTitle">
                              <div style="display:inline" class="idDisplay"><a onClick="javascript:syncItem(this)" name="49484">49484
            	-  
			</a></div>?Not applicable (no carcinoma in situ in specimen)<div class="MetadataDisplay">
               &#xA0;<div class="sdc">sdac </div>
               &#xA0;<div class="omitWhenSel">ows </div>
                              </div>
                              <div class="ChangeDisplay"></div>
                              <div class="MetadataDisplay" style="display:inline">
         				&#xA0;<div class="reportText">
         			rptText:
         				</div>
                                <div class="metadataTextValue">Not applicable</div>
         		&#xA0;<div class="nameDiv">
                                  <div class="name">name: </div>
                                  <div class="metadataTextValue">
                                    <div class="nameValue">LI_49484</div>
                                  </div>
                                </div>
                              </div>
                              <div class="ChangeDisplay"></div>
                              <div style="display:inline" class="MetadataDisplay"></div>
                            </div>
                          </div>
                          <div class="question" id="q40330.100004300"><input type="hidden" class="TextBox" name="q40330.100004300" value="Distance of Carcinoma in Situ from Closest Margin in Centimeters (cm)"><input id="maxcardinality" type="hidden" value=""><div class="QuestionInListItem">
                              <div class="QuestionTitle collapsable_q">
                                <div style="display:inline" class="idDisplay"><a onClick="javascript:syncItem(this)" name="40330">40330
            	-  
			</a></div>Distance of Carcinoma in Situ from Closest Margin in Centimeters (cm)<div style="display:inline" class="MetadataDisplay">
                                  <div class="MetadataDisplay" style="display:inline-block"></div>
                                  <div class="MetadataDisplay" style="display:inline">
         				&#xA0;<div class="reportText">
         			rptText:
         				</div>
                                    <div class="metadataTextValue">Distance of Carcinoma in Situ from Closest Margin (Centimeters)</div>
         		&#xA0;<div class="nameDiv">
                                      <div class="name">name: </div>
                                      <div class="metadataTextValue">
                                        <div class="nameValue">Q_40330</div>
                                      </div>
                                    </div>
                                  </div>
                                  <div class="ChangeDisplay"></div>
                                  <div class="MetadataDisplay"></div>
                                  <div class="ChangeDisplay"></div>
                                </div>
                              </div><a class="QuestionReset" onclick="resetAnswer(this);return false" href="&#xA;								#&#xA;							">(reset)</a><div class="command"></div>
                              <div style="clear:both;"></div>
                              <div class="Answer"><input type="radio" style="float:left" name="40330.100004300" value="45199.100004300,Specify in Centimeters (cm)" onchange="&#xA;						javascript:SelectUnselectParents('q40330.100004300', this);&#xA;					" onblur="&#xA;						javascript:OnChoiceBlur('45199.100004300', this)&#xA;					"><div class="itemTitle">
                                  <div style="display:inline" class="idDisplay"><a onClick="javascript:syncItem(this)" name="45199">45199
            	-  
			</a></div>Specify in Centimeters (cm)<div class="MetadataDisplay"></div>
                                  <div class="ChangeDisplay"></div>
                                  <div class="MetadataDisplay" style="display:inline">
         				&#xA0;<div class="reportText">
         			rptText:
         				</div>
                                    <div class="metadataTextValue">{no text}</div>
         		&#xA0;<div class="nameDiv">
                                      <div class="name">name: </div>
                                      <div class="metadataTextValue">
                                        <div class="nameValue">LI_45199</div>
                                      </div>
                                    </div>
                                  </div>
                                  <div class="ChangeDisplay"></div>
                                  <div style="display:inline" class="MetadataDisplay"></div>
                                  <div class="MetadataDisplay">
               &#xA0;<div class="ResponseUnits">un: </div>
                                    <div class="metadataTextValue">cm</div>
               &#xA0;<div class="TextAfterResponse">txtAft: </div>
                                    <div class="metadataTextValue">cm</div>
               &#xA0;<div class="responseRequired">respReq: </div>
         		&#xA0;<div class="ResponseUnits">dt: </div>
                                    <div class="metadataTextValue">decimal</div>
         		&#xA0;	</div>
                                  <div class="ChangeDisplay"></div><input type="text" class="AnswerTextBox" width="100" name="40330.100004300" value="" onkeydown="&#xA;							javascript:SelectChoiceOnKeyPress('45199.100004300', this, event)&#xA;						" onblur="&#xA;							javascript:SelectUnselectChoiceOnBlur('45199.100004300', this)&#xA;						">
					&#xA0;</div>
                              </div>
                              <div class="Answer"><input type="radio" style="float:left" name="40330.100004300" value="47114.100004300,At least in Centimeters (cm)" onchange="&#xA;						javascript:SelectUnselectParents('q40330.100004300', this);&#xA;					" onblur="&#xA;						javascript:OnChoiceBlur('47114.100004300', this)&#xA;					"><div class="itemTitle">
                                  <div style="display:inline" class="idDisplay"><a onClick="javascript:syncItem(this)" name="47114">47114
            	-  
			</a></div>At least in Centimeters (cm)<div class="MetadataDisplay"></div>
                                  <div class="ChangeDisplay"></div>
                                  <div class="MetadataDisplay" style="display:inline">
         				&#xA0;<div class="reportText">
         			rptText:
         				</div>
                                    <div class="metadataTextValue">At least</div>
         		&#xA0;<div class="nameDiv">
                                      <div class="name">name: </div>
                                      <div class="metadataTextValue">
                                        <div class="nameValue">LI_47114</div>
                                      </div>
                                    </div>
                                  </div>
                                  <div class="ChangeDisplay"></div>
                                  <div style="display:inline" class="MetadataDisplay"></div>
                                  <div class="MetadataDisplay">
               &#xA0;<div class="ResponseUnits">un: </div>
                                    <div class="metadataTextValue">cm</div>
               &#xA0;<div class="TextAfterResponse">txtAft: </div>
                                    <div class="metadataTextValue">cm</div>
               &#xA0;<div class="responseRequired">respReq: </div>
         		&#xA0;<div class="ResponseUnits">dt: </div>
                                    <div class="metadataTextValue">decimal</div>
         		&#xA0;	</div>
                                  <div class="ChangeDisplay"></div><input type="text" class="AnswerTextBox" width="100" name="40330.100004300" value="" onkeydown="&#xA;							javascript:SelectChoiceOnKeyPress('47114.100004300', this, event)&#xA;						" onblur="&#xA;							javascript:SelectUnselectChoiceOnBlur('47114.100004300', this)&#xA;						">
					&#xA0;</div>
                              </div>
                              <div class="Answer"><input type="radio" style="float:left" name="40330.100004300" value="39059.100004300,Cannot be determined (explain)" onchange="&#xA;						javascript:SelectUnselectParents('q40330.100004300', this);&#xA;					" onblur="&#xA;						javascript:OnChoiceBlur('39059.100004300', this)&#xA;					"><div class="itemTitle">
                                  <div style="display:inline" class="idDisplay"><a onClick="javascript:syncItem(this)" name="39059">39059
            	-  
			</a></div>Cannot be determined (explain)<div class="MetadataDisplay"></div>
                                  <div class="ChangeDisplay"></div>
                                  <div class="MetadataDisplay" style="display:inline">
         				&#xA0;<div class="reportText">
         			rptText:
         				</div>
                                    <div class="metadataTextValue">Cannot be determined</div>
         		&#xA0;<div class="nameDiv">
                                      <div class="name">name: </div>
                                      <div class="metadataTextValue">
                                        <div class="nameValue">LI_39059</div>
                                      </div>
                                    </div>
                                  </div>
                                  <div class="ChangeDisplay"></div>
                                  <div style="display:inline" class="MetadataDisplay"></div>
                                  <div class="MetadataDisplay">
               &#xA0;<div class="responseRequired">respReq: </div>
         		&#xA0;<div class="ResponseUnits">dt: </div>
                                    <div class="metadataTextValue">string</div>
         		&#xA0;	</div>
                                  <div class="ChangeDisplay"></div><input type="text" class="AnswerTextBox" width="100" name="40330.100004300" value="" onkeydown="&#xA;							javascript:SelectChoiceOnKeyPress('39059.100004300', this, event)&#xA;						" onblur="&#xA;							javascript:SelectUnselectChoiceOnBlur('39059.100004300', this)&#xA;						">
					&#xA0;</div>
                              </div>
                              <div style="clear:both;"></div>
                              <div class="question" id="q50466.100004300"><input type="hidden" class="TextBox" name="q50466.100004300" value="Specify Closest Margin"><input id="maxcardinality" type="hidden" value=""><div class="QuestionInListItem">
                                  <div class="QuestionTitle collapsable_q">
                                    <div style="display:inline" class="idDisplay"><a onClick="javascript:syncItem(this)" name="50466">50466
            	-  
			</a></div>Specify Closest Margin<div style="display:inline" class="MetadataDisplay">
                                      <div class="MetadataDisplay" style="display:inline-block"></div>
                                      <div class="MetadataDisplay" style="display:inline">
         				&#xA0;<div class="reportText">
         			rptText:
         				</div>
                                        <div class="metadataTextValue">Closest Margin</div>
         		&#xA0;<div class="nameDiv">
                                          <div class="name">name: </div>
                                          <div class="metadataTextValue">
                                            <div class="nameValue">Q_50466</div>
                                          </div>
                                        </div>
                                      </div>
                                      <div class="ChangeDisplay"></div>
                                      <div class="MetadataDisplay"></div>
                                      <div class="ChangeDisplay"></div>
                                    </div>
                                  </div><a class="QuestionReset" onclick="resetAnswer(this);return false" href="&#xA;								#&#xA;							">(reset)</a><div class="command"></div>
                                  <div style="clear:both;"></div>
                                  <div class="Answer"><input type="checkbox" style="float:left;" name="50466.100004300" value="54024.100004300,Bronchial" onchange="&#xA;						javascript:SelectUnselectParents('q50466.100004300', this)&#xA;					" onblur="&#xA;						javascript:OnChoiceBlur('54024.100004300', this)&#xA;					"><div class="itemTitle">
                                      <div style="display:inline" class="idDisplay"><a onClick="javascript:syncItem(this)" name="54024">54024
            	-  
			</a></div>Bronchial<div class="MetadataDisplay"></div>
                                      <div class="ChangeDisplay"></div>
                                      <div class="MetadataDisplay" style="display:inline">
         		&#xA0;<div class="nameDiv">
                                          <div class="name">name: </div>
                                          <div class="metadataTextValue">
                                            <div class="nameValue">LI_54024</div>
                                          </div>
                                        </div>
                                      </div>
                                      <div class="ChangeDisplay"></div>
                                      <div style="display:inline" class="MetadataDisplay"></div>
                                    </div>
                                  </div>
                                  <div class="Answer"><input type="checkbox" style="float:left;" name="50466.100004300" value="44014.100004300,Vascular" onchange="&#xA;						javascript:SelectUnselectParents('q50466.100004300', this)&#xA;					" onblur="&#xA;						javascript:OnChoiceBlur('44014.100004300', this)&#xA;					"><div class="itemTitle">
                                      <div style="display:inline" class="idDisplay"><a onClick="javascript:syncItem(this)" name="44014">44014
            	-  
			</a></div>Vascular<div class="MetadataDisplay"></div>
                                      <div class="ChangeDisplay"></div>
                                      <div class="MetadataDisplay" style="display:inline">
         		&#xA0;<div class="nameDiv">
                                          <div class="name">name: </div>
                                          <div class="metadataTextValue">
                                            <div class="nameValue">LI_44014</div>
                                          </div>
                                        </div>
                                      </div>
                                      <div class="ChangeDisplay"></div>
                                      <div style="display:inline" class="MetadataDisplay"></div>
                                    </div>
                                  </div>
                                  <div class="Answer"><input type="checkbox" style="float:left;" name="50466.100004300" value="39975.100004300,Parenchymal" onchange="&#xA;						javascript:SelectUnselectParents('q50466.100004300', this)&#xA;					" onblur="&#xA;						javascript:OnChoiceBlur('39975.100004300', this)&#xA;					"><div class="itemTitle">
                                      <div style="display:inline" class="idDisplay"><a onClick="javascript:syncItem(this)" name="39975">39975
            	-  
			</a></div>Parenchymal<div class="MetadataDisplay"></div>
                                      <div class="ChangeDisplay"></div>
                                      <div class="MetadataDisplay" style="display:inline">
         		&#xA0;<div class="nameDiv">
                                          <div class="name">name: </div>
                                          <div class="metadataTextValue">
                                            <div class="nameValue">LI_39975</div>
                                          </div>
                                        </div>
                                      </div>
                                      <div class="ChangeDisplay"></div>
                                      <div style="display:inline" class="MetadataDisplay"></div>
                                    </div>
                                  </div>
                                  <div class="Answer"><input type="checkbox" style="float:left;" name="50466.100004300" value="55421.100004300,Other (specify)" onchange="&#xA;						javascript:SelectUnselectParents('q50466.100004300', this)&#xA;					" onblur="&#xA;						javascript:OnChoiceBlur('55421.100004300', this)&#xA;					"><div class="itemTitle">
                                      <div style="display:inline" class="idDisplay"><a onClick="javascript:syncItem(this)" name="55421">55421
            	-  
			</a></div>Other (specify)<div class="MetadataDisplay"></div>
                                      <div class="ChangeDisplay"></div>
                                      <div class="MetadataDisplay" style="display:inline">
         				&#xA0;<div class="reportText">
         			rptText:
         				</div>
                                        <div class="metadataTextValue">{no text}</div>
         		&#xA0;<div class="nameDiv">
                                          <div class="name">name: </div>
                                          <div class="metadataTextValue">
                                            <div class="nameValue">LI_55421</div>
                                          </div>
                                        </div>
                                      </div>
                                      <div class="ChangeDisplay"></div>
                                      <div style="display:inline" class="MetadataDisplay"></div>
                                      <div class="MetadataDisplay">
               &#xA0;<div class="responseRequired">respReq: </div>
         		&#xA0;<div class="ResponseUnits">dt: </div>
                                        <div class="metadataTextValue">string</div>
         		&#xA0;	</div>
                                      <div class="ChangeDisplay"></div><input type="text" class="AnswerTextBox" name="50466.100004300" value="" onkeydown="&#xA;							javascript:SelectChoiceOnKeyPress('55421.100004300', this, event)&#xA;						" onblur="&#xA;							javascript:SelectUnselectChoiceOnBlur('55421.100004300', this)&#xA;						"></div>
                                  </div>
                                  <div class="Answer"><input type="checkbox" style="float:left;" name="50466.100004300" value="40828.100004300,Cannot be determined (explain)" onchange="&#xA;						javascript:SelectUnselectParents('q50466.100004300', this)&#xA;					" onblur="&#xA;						javascript:OnChoiceBlur('40828.100004300', this)&#xA;					"><div class="itemTitle">
                                      <div style="display:inline" class="idDisplay"><a onClick="javascript:syncItem(this)" name="40828">40828
            	-  
			</a></div>Cannot be determined (explain)<div class="MetadataDisplay"></div>
                                      <div class="ChangeDisplay"></div>
                                      <div class="MetadataDisplay" style="display:inline">
         				&#xA0;<div class="reportText">
         			rptText:
         				</div>
                                        <div class="metadataTextValue">Cannot be determined</div>
         		&#xA0;<div class="nameDiv">
                                          <div class="name">name: </div>
                                          <div class="metadataTextValue">
                                            <div class="nameValue">LI_40828</div>
                                          </div>
                                        </div>
                                      </div>
                                      <div class="ChangeDisplay"></div>
                                      <div style="display:inline" class="MetadataDisplay"></div>
                                      <div class="MetadataDisplay">
               &#xA0;<div class="responseRequired">respReq: </div>
         		&#xA0;<div class="ResponseUnits">dt: </div>
                                        <div class="metadataTextValue">string</div>
         		&#xA0;	</div>
                                      <div class="ChangeDisplay"></div><input type="text" class="AnswerTextBox" name="50466.100004300" value="" onkeydown="&#xA;							javascript:SelectChoiceOnKeyPress('40828.100004300', this, event)&#xA;						" onblur="&#xA;							javascript:SelectUnselectChoiceOnBlur('40828.100004300', this)&#xA;						"></div>
                                  </div>
                                  <div style="clear:both;"></div>
                                </div>
                              </div>
                            </div>
                          </div>
                          <div style="clear:both;"></div>
                        </div>
                      </div>
                      <div class="Answer"><input type="radio" style="float:left" name="46319.100004300" value="57726.100004300,One or more margins are involved by tumor, or any margin cannot be assessed" onchange="&#xA;						javascript:SelectUnselectParents('q46319.100004300', this);&#xA;					" onblur="&#xA;						javascript:OnChoiceBlur('57726.100004300', this)&#xA;					"><div class="itemTitle">
                          <div style="display:inline" class="idDisplay"><a onClick="javascript:syncItem(this)" name="57726">57726
            	-  
			</a></div>One or more margins are involved by tumor, or any margin cannot be assessed<div class="MetadataDisplay"></div>
                          <div class="ChangeDisplay"></div>
                          <div class="MetadataDisplay" style="display:inline">
         				&#xA0;<div class="reportText">
         			rptText:
         				</div>
                            <div class="metadataTextValue">{no text}</div>
         		&#xA0;<div class="nameDiv">
                              <div class="name">name: </div>
                              <div class="metadataTextValue">
                                <div class="nameValue">LI_57726</div>
                              </div>
                            </div>
                          </div>
                          <div class="ChangeDisplay"></div>
                          <div style="display:inline" class="MetadataDisplay"></div>
                        </div>
                      </div>
                      <div class="question" id="q51508.100004300"><input type="hidden" class="TextBox" name="q51508.100004300" value="Bronchial Margin"><input id="maxcardinality" type="hidden" value=""><div class="QuestionInListItem">
                          <div class="QuestionTitle collapsable_q">
                            <div style="display:inline" class="idDisplay"><a onClick="javascript:syncItem(this)" name="51508">51508
            	-  
			</a></div>Bronchial Margin<div style="display:inline" class="MetadataDisplay">
                              <div class="MetadataDisplay" style="display:inline-block"></div>
                              <div class="MetadataDisplay" style="display:inline">
         		&#xA0;<div class="nameDiv">
                                  <div class="name">name: </div>
                                  <div class="metadataTextValue">
                                    <div class="nameValue">Q_51508</div>
                                  </div>
                                </div>
                              </div>
                              <div class="ChangeDisplay"></div>
                              <div class="MetadataDisplay"></div>
                              <div class="ChangeDisplay"></div>
                            </div>
                          </div><a class="QuestionReset" onclick="resetAnswer(this);return false" href="&#xA;								#&#xA;							">(reset)</a><div class="command"></div>
                          <div style="clear:both;"></div>
                          <div class="Answer"><input type="radio" style="float:left" name="51508.100004300" value="26756.100004300,Not applicable" onchange="&#xA;						javascript:SelectUnselectParents('q51508.100004300', this);&#xA;					" onblur="&#xA;						javascript:OnChoiceBlur('26756.100004300', this)&#xA;					"><div class="itemTitle">
                              <div style="display:inline" class="idDisplay"><a onClick="javascript:syncItem(this)" name="26756">26756
            	-  
			</a></div>Not applicable<div class="MetadataDisplay"></div>
                              <div class="ChangeDisplay"></div>
                              <div class="MetadataDisplay" style="display:inline">
         		&#xA0;<div class="nameDiv">
                                  <div class="name">name: </div>
                                  <div class="metadataTextValue">
                                    <div class="nameValue">LI_26756</div>
                                  </div>
                                </div>
                              </div>
                              <div class="ChangeDisplay"></div>
                              <div style="display:inline" class="MetadataDisplay"></div>
                              <div class="MetadataDisplay">
         		&#xA0;<div class="ResponseUnits">dt: </div>
                                <div class="metadataTextValue">string</div>
         		&#xA0;	</div>
                              <div class="ChangeDisplay"></div><input type="text" class="AnswerTextBox" width="100" name="51508.100004300" value="" onkeydown="&#xA;							javascript:SelectChoiceOnKeyPress('26756.100004300', this, event)&#xA;						" onblur="&#xA;							javascript:SelectUnselectChoiceOnBlur('26756.100004300', this)&#xA;						">
					&#xA0;</div>
                          </div>
                          <div class="Answer"><input type="radio" style="float:left" name="51508.100004300" value="26757.100004300,Cannot be assessed" onchange="&#xA;						javascript:SelectUnselectParents('q51508.100004300', this);&#xA;					" onblur="&#xA;						javascript:OnChoiceBlur('26757.100004300', this)&#xA;					"><div class="itemTitle">
                              <div style="display:inline" class="idDisplay"><a onClick="javascript:syncItem(this)" name="26757">26757
            	-  
			</a></div>Cannot be assessed<div class="MetadataDisplay"></div>
                              <div class="ChangeDisplay"></div>
                              <div class="MetadataDisplay" style="display:inline">
         		&#xA0;<div class="nameDiv">
                                  <div class="name">name: </div>
                                  <div class="metadataTextValue">
                                    <div class="nameValue">LI_26757</div>
                                  </div>
                                </div>
                              </div>
                              <div class="ChangeDisplay"></div>
                              <div style="display:inline" class="MetadataDisplay"></div>
                              <div class="MetadataDisplay">
         		&#xA0;<div class="ResponseUnits">dt: </div>
                                <div class="metadataTextValue">string</div>
         		&#xA0;	</div>
                              <div class="ChangeDisplay"></div><input type="text" class="AnswerTextBox" width="100" name="51508.100004300" value="" onkeydown="&#xA;							javascript:SelectChoiceOnKeyPress('26757.100004300', this, event)&#xA;						" onblur="&#xA;							javascript:SelectUnselectChoiceOnBlur('26757.100004300', this)&#xA;						">
					&#xA0;</div>
                          </div>
                          <div class="Answer"><input type="radio" style="float:left" name="51508.100004300" value="54582.100004300,Uninvolved by invasive carcinoma" onchange="&#xA;						javascript:SelectUnselectParents('q51508.100004300', this);&#xA;					" onblur="&#xA;						javascript:OnChoiceBlur('54582.100004300', this)&#xA;					"><div class="itemTitle">
                              <div style="display:inline" class="idDisplay"><a onClick="javascript:syncItem(this)" name="54582">54582
            	-  
			</a></div>Uninvolved by invasive carcinoma<div class="MetadataDisplay"></div>
                              <div class="ChangeDisplay"></div>
                              <div class="MetadataDisplay" style="display:inline">
         		&#xA0;<div class="nameDiv">
                                  <div class="name">name: </div>
                                  <div class="metadataTextValue">
                                    <div class="nameValue">LI_54582</div>
                                  </div>
                                </div>
                              </div>
                              <div class="ChangeDisplay"></div>
                              <div style="display:inline" class="MetadataDisplay"></div>
                            </div>
                          </div>
                          <div class="question" id="q40805.100004300"><input type="hidden" class="TextBox" name="q40805.100004300" value="?Status of Carcinoma in Situ at Bronchial Margin"><input id="maxcardinality" type="hidden" value=""><div class="QuestionInListItem">
                              <div class="QuestionTitle collapsable_q">
                                <div style="display:inline" class="idDisplay"><a onClick="javascript:syncItem(this)" name="40805">40805
            	-  
			</a></div>?Status of Carcinoma in Situ at Bronchial Margin<div style="display:inline" class="MetadataDisplay">
                                  <div class="MetadataDisplay" style="display:inline-block"></div>
                                  <div class="MetadataDisplay" style="display:inline">
         				&#xA0;<div class="reportText">
         			rptText:
         				</div>
                                    <div class="metadataTextValue">Status of Carcinoma in Situ at Bronchial Margin</div>
         		&#xA0;<div class="nameDiv">
                                      <div class="name">name: </div>
                                      <div class="metadataTextValue">
                                        <div class="nameValue">Q_40805</div>
                                      </div>
                                    </div>
                                  </div>
                                  <div class="ChangeDisplay"></div>
                                  <div class="MetadataDisplay"></div>
                                  <div class="ChangeDisplay"></div>
                                </div>
                              </div><a class="QuestionReset" onclick="resetAnswer(this);return false" href="&#xA;								#&#xA;							">(reset)</a><div class="command"></div>
                              <div style="clear:both;"></div>
                              <div class="Answer"><input type="radio" style="float:left" name="40805.100004300" value="40270.100004300,Uninvolved by carcinoma in situ" onchange="&#xA;						javascript:SelectUnselectParents('q40805.100004300', this);&#xA;					" onblur="&#xA;						javascript:OnChoiceBlur('40270.100004300', this)&#xA;					"><div class="itemTitle">
                                  <div style="display:inline" class="idDisplay"><a onClick="javascript:syncItem(this)" name="40270">40270
            	-  
			</a></div>Uninvolved by carcinoma in situ<div class="MetadataDisplay"></div>
                                  <div class="ChangeDisplay"></div>
                                  <div class="MetadataDisplay" style="display:inline">
         		&#xA0;<div class="nameDiv">
                                      <div class="name">name: </div>
                                      <div class="metadataTextValue">
                                        <div class="nameValue">LI_40270</div>
                                      </div>
                                    </div>
                                  </div>
                                  <div class="ChangeDisplay"></div>
                                  <div style="display:inline" class="MetadataDisplay"></div>
                                </div>
                              </div>
                              <div class="Answer"><input type="radio" style="float:left" name="40805.100004300" value="26759.100004300,Positive for carcinoma in situ" onchange="&#xA;						javascript:SelectUnselectParents('q40805.100004300', this);&#xA;					" onblur="&#xA;						javascript:OnChoiceBlur('26759.100004300', this)&#xA;					"><div class="itemTitle">
                                  <div style="display:inline" class="idDisplay"><a onClick="javascript:syncItem(this)" name="26759">26759
            	-  
			</a></div>Positive for carcinoma in situ<div class="MetadataDisplay"></div>
                                  <div class="ChangeDisplay"></div>
                                  <div class="MetadataDisplay" style="display:inline">
         		&#xA0;<div class="nameDiv">
                                      <div class="name">name: </div>
                                      <div class="metadataTextValue">
                                        <div class="nameValue">LI_26759</div>
                                      </div>
                                    </div>
                                  </div>
                                  <div class="ChangeDisplay"></div>
                                  <div style="display:inline" class="MetadataDisplay"></div>
                                </div>
                              </div>
                              <div class="Answer"><input type="radio" style="float:left" name="40805.100004300" value="45402.100004300,Cannot be assessed" onchange="&#xA;						javascript:SelectUnselectParents('q40805.100004300', this);&#xA;					" onblur="&#xA;						javascript:OnChoiceBlur('45402.100004300', this)&#xA;					"><div class="itemTitle">
                                  <div style="display:inline" class="idDisplay"><a onClick="javascript:syncItem(this)" name="45402">45402
            	-  
			</a></div>Cannot be assessed<div class="MetadataDisplay"></div>
                                  <div class="ChangeDisplay"></div>
                                  <div class="MetadataDisplay" style="display:inline">
         		&#xA0;<div class="nameDiv">
                                      <div class="name">name: </div>
                                      <div class="metadataTextValue">
                                        <div class="nameValue">LI_45402</div>
                                      </div>
                                    </div>
                                  </div>
                                  <div class="ChangeDisplay"></div>
                                  <div style="display:inline" class="MetadataDisplay"></div>
                                  <div class="MetadataDisplay">
         		&#xA0;<div class="ResponseUnits">dt: </div>
                                    <div class="metadataTextValue">string</div>
         		&#xA0;	</div>
                                  <div class="ChangeDisplay"></div><input type="text" class="AnswerTextBox" width="100" name="40805.100004300" value="" onkeydown="&#xA;							javascript:SelectChoiceOnKeyPress('45402.100004300', this, event)&#xA;						" onblur="&#xA;							javascript:SelectUnselectChoiceOnBlur('45402.100004300', this)&#xA;						">
					&#xA0;</div>
                              </div>
                              <div class="Answer"><input type="radio" style="float:left" name="40805.100004300" value="56514.100004300,?Not applicable" onchange="&#xA;						javascript:SelectUnselectParents('q40805.100004300', this);&#xA;					" onblur="&#xA;						javascript:OnChoiceBlur('56514.100004300', this)&#xA;					"><div class="itemTitle">
                                  <div style="display:inline" class="idDisplay"><a onClick="javascript:syncItem(this)" name="56514">56514
            	-  
			</a></div>?Not applicable<div class="MetadataDisplay">
               &#xA0;<div class="omitWhenSel">ows </div>
                                  </div>
                                  <div class="ChangeDisplay"></div>
                                  <div class="MetadataDisplay" style="display:inline">
         				&#xA0;<div class="reportText">
         			rptText:
         				</div>
                                    <div class="metadataTextValue">Not applicable</div>
         		&#xA0;<div class="nameDiv">
                                      <div class="name">name: </div>
                                      <div class="metadataTextValue">
                                        <div class="nameValue">LI_56514</div>
                                      </div>
                                    </div>
                                  </div>
                                  <div class="ChangeDisplay"></div>
                                  <div style="display:inline" class="MetadataDisplay"></div>
                                </div>
                              </div>
                              <div style="clear:both;"></div>
                            </div>
                          </div>
                          <div class="Answer"><input type="radio" style="float:left" name="51508.100004300" value="1768.100004300,Positive for invasive carcinoma" onchange="&#xA;						javascript:SelectUnselectParents('q51508.100004300', this);&#xA;					" onblur="&#xA;						javascript:OnChoiceBlur('1768.100004300', this)&#xA;					"><div class="itemTitle">
                              <div style="display:inline" class="idDisplay"><a onClick="javascript:syncItem(this)" name="1768">1768
            	-  
			</a></div>Positive for invasive carcinoma<div class="MetadataDisplay"></div>
                              <div class="ChangeDisplay"></div>
                              <div class="MetadataDisplay" style="display:inline">
         		&#xA0;<div class="nameDiv">
                                  <div class="name">name: </div>
                                  <div class="metadataTextValue">
                                    <div class="nameValue">LI_1768</div>
                                  </div>
                                </div>
                              </div>
                              <div class="ChangeDisplay"></div>
                              <div style="display:inline" class="MetadataDisplay"></div>
                            </div>
                          </div>
                          <div style="clear:both;"></div>
                        </div>
                      </div>
                      <div class="question" id="q40624.100004300"><input type="hidden" class="TextBox" name="q40624.100004300" value="Vascular Margin"><input id="maxcardinality" type="hidden" value=""><div class="QuestionInListItem">
                          <div class="QuestionTitle collapsable_q">
                            <div style="display:inline" class="idDisplay"><a onClick="javascript:syncItem(this)" name="40624">40624
            	-  
			</a></div>Vascular Margin<div style="display:inline" class="MetadataDisplay">
                              <div class="MetadataDisplay" style="display:inline-block"></div>
                              <div class="MetadataDisplay" style="display:inline">
         		&#xA0;<div class="nameDiv">
                                  <div class="name">name: </div>
                                  <div class="metadataTextValue">
                                    <div class="nameValue">Q_40624</div>
                                  </div>
                                </div>
                              </div>
                              <div class="ChangeDisplay"></div>
                              <div class="MetadataDisplay"></div>
                              <div class="ChangeDisplay"></div>
                            </div>
                          </div><a class="QuestionReset" onclick="resetAnswer(this);return false" href="&#xA;								#&#xA;							">(reset)</a><div class="command"></div>
                          <div style="clear:both;"></div>
                          <div class="Answer"><input type="radio" style="float:left" name="40624.100004300" value="15971.100004300,Not applicable" onchange="&#xA;						javascript:SelectUnselectParents('q40624.100004300', this);&#xA;					" onblur="&#xA;						javascript:OnChoiceBlur('15971.100004300', this)&#xA;					"><div class="itemTitle">
                              <div style="display:inline" class="idDisplay"><a onClick="javascript:syncItem(this)" name="15971">15971
            	-  
			</a></div>Not applicable<div class="MetadataDisplay"></div>
                              <div class="ChangeDisplay"></div>
                              <div class="MetadataDisplay" style="display:inline">
         		&#xA0;<div class="nameDiv">
                                  <div class="name">name: </div>
                                  <div class="metadataTextValue">
                                    <div class="nameValue">LI_15971</div>
                                  </div>
                                </div>
                              </div>
                              <div class="ChangeDisplay"></div>
                              <div style="display:inline" class="MetadataDisplay"></div>
                              <div class="MetadataDisplay">
         		&#xA0;<div class="ResponseUnits">dt: </div>
                                <div class="metadataTextValue">string</div>
         		&#xA0;	</div>
                              <div class="ChangeDisplay"></div><input type="text" class="AnswerTextBox" width="100" name="40624.100004300" value="" onkeydown="&#xA;							javascript:SelectChoiceOnKeyPress('15971.100004300', this, event)&#xA;						" onblur="&#xA;							javascript:SelectUnselectChoiceOnBlur('15971.100004300', this)&#xA;						">
					&#xA0;</div>
                          </div>
                          <div class="Answer"><input type="radio" style="float:left" name="40624.100004300" value="15972.100004300,Cannot be assessed" onchange="&#xA;						javascript:SelectUnselectParents('q40624.100004300', this);&#xA;					" onblur="&#xA;						javascript:OnChoiceBlur('15972.100004300', this)&#xA;					"><div class="itemTitle">
                              <div style="display:inline" class="idDisplay"><a onClick="javascript:syncItem(this)" name="15972">15972
            	-  
			</a></div>Cannot be assessed<div class="MetadataDisplay"></div>
                              <div class="ChangeDisplay"></div>
                              <div class="MetadataDisplay" style="display:inline">
         		&#xA0;<div class="nameDiv">
                                  <div class="name">name: </div>
                                  <div class="metadataTextValue">
                                    <div class="nameValue">LI_15972</div>
                                  </div>
                                </div>
                              </div>
                              <div class="ChangeDisplay"></div>
                              <div style="display:inline" class="MetadataDisplay"></div>
                              <div class="MetadataDisplay">
         		&#xA0;<div class="ResponseUnits">dt: </div>
                                <div class="metadataTextValue">string</div>
         		&#xA0;	</div>
                              <div class="ChangeDisplay"></div><input type="text" class="AnswerTextBox" width="100" name="40624.100004300" value="" onkeydown="&#xA;							javascript:SelectChoiceOnKeyPress('15972.100004300', this, event)&#xA;						" onblur="&#xA;							javascript:SelectUnselectChoiceOnBlur('15972.100004300', this)&#xA;						">
					&#xA0;</div>
                          </div>
                          <div class="Answer"><input type="radio" style="float:left" name="40624.100004300" value="59983.100004300,Uninvolved by carcinoma" onchange="&#xA;						javascript:SelectUnselectParents('q40624.100004300', this);&#xA;					" onblur="&#xA;						javascript:OnChoiceBlur('59983.100004300', this)&#xA;					"><div class="itemTitle">
                              <div style="display:inline" class="idDisplay"><a onClick="javascript:syncItem(this)" name="59983">59983
            	-  
			</a></div>Uninvolved by carcinoma<div class="MetadataDisplay"></div>
                              <div class="ChangeDisplay"></div>
                              <div class="MetadataDisplay" style="display:inline">
         		&#xA0;<div class="nameDiv">
                                  <div class="name">name: </div>
                                  <div class="metadataTextValue">
                                    <div class="nameValue">LI_59983</div>
                                  </div>
                                </div>
                              </div>
                              <div class="ChangeDisplay"></div>
                              <div style="display:inline" class="MetadataDisplay"></div>
                            </div>
                          </div>
                          <div class="Answer"><input type="radio" style="float:left" name="40624.100004300" value="46595.100004300,Positive for carcinoma" onchange="&#xA;						javascript:SelectUnselectParents('q40624.100004300', this);&#xA;					" onblur="&#xA;						javascript:OnChoiceBlur('46595.100004300', this)&#xA;					"><div class="itemTitle">
                              <div style="display:inline" class="idDisplay"><a onClick="javascript:syncItem(this)" name="46595">46595
            	-  
			</a></div>Positive for carcinoma<div class="MetadataDisplay"></div>
                              <div class="ChangeDisplay"></div>
                              <div class="MetadataDisplay" style="display:inline">
         		&#xA0;<div class="nameDiv">
                                  <div class="name">name: </div>
                                  <div class="metadataTextValue">
                                    <div class="nameValue">LI_46595</div>
                                  </div>
                                </div>
                              </div>
                              <div class="ChangeDisplay"></div>
                              <div style="display:inline" class="MetadataDisplay"></div>
                            </div>
                          </div>
                          <div style="clear:both;"></div>
                        </div>
                      </div>
                      <div class="question" id="q46180.100004300"><input type="hidden" class="TextBox" name="q46180.100004300" value="Parenchymal Margin"><input id="maxcardinality" type="hidden" value=""><div class="QuestionInListItem">
                          <div class="QuestionTitle collapsable_q">
                            <div style="display:inline" class="idDisplay"><a onClick="javascript:syncItem(this)" name="46180">46180
            	-  
			</a></div>Parenchymal Margin<div style="display:inline" class="MetadataDisplay">
                              <div class="MetadataDisplay" style="display:inline-block"></div>
                              <div class="MetadataDisplay" style="display:inline">
         		&#xA0;<div class="nameDiv">
                                  <div class="name">name: </div>
                                  <div class="metadataTextValue">
                                    <div class="nameValue">Q_46180</div>
                                  </div>
                                </div>
                              </div>
                              <div class="ChangeDisplay"></div>
                              <div class="MetadataDisplay"></div>
                              <div class="ChangeDisplay"></div>
                            </div>
                          </div><a class="QuestionReset" onclick="resetAnswer(this);return false" href="&#xA;								#&#xA;							">(reset)</a><div class="command"></div>
                          <div style="clear:both;"></div>
                          <div class="Answer"><input type="radio" style="float:left" name="46180.100004300" value="15975.100004300,Not applicable" onchange="&#xA;						javascript:SelectUnselectParents('q46180.100004300', this);&#xA;					" onblur="&#xA;						javascript:OnChoiceBlur('15975.100004300', this)&#xA;					"><div class="itemTitle">
                              <div style="display:inline" class="idDisplay"><a onClick="javascript:syncItem(this)" name="15975">15975
            	-  
			</a></div>Not applicable<div class="MetadataDisplay"></div>
                              <div class="ChangeDisplay"></div>
                              <div class="MetadataDisplay" style="display:inline">
         		&#xA0;<div class="nameDiv">
                                  <div class="name">name: </div>
                                  <div class="metadataTextValue">
                                    <div class="nameValue">LI_15975</div>
                                  </div>
                                </div>
                              </div>
                              <div class="ChangeDisplay"></div>
                              <div style="display:inline" class="MetadataDisplay"></div>
                              <div class="MetadataDisplay">
         		&#xA0;<div class="ResponseUnits">dt: </div>
                                <div class="metadataTextValue">string</div>
         		&#xA0;	</div>
                              <div class="ChangeDisplay"></div><input type="text" class="AnswerTextBox" width="100" name="46180.100004300" value="" onkeydown="&#xA;							javascript:SelectChoiceOnKeyPress('15975.100004300', this, event)&#xA;						" onblur="&#xA;							javascript:SelectUnselectChoiceOnBlur('15975.100004300', this)&#xA;						">
					&#xA0;</div>
                          </div>
                          <div class="Answer"><input type="radio" style="float:left" name="46180.100004300" value="15976.100004300,Cannot be assessed" onchange="&#xA;						javascript:SelectUnselectParents('q46180.100004300', this);&#xA;					" onblur="&#xA;						javascript:OnChoiceBlur('15976.100004300', this)&#xA;					"><div class="itemTitle">
                              <div style="display:inline" class="idDisplay"><a onClick="javascript:syncItem(this)" name="15976">15976
            	-  
			</a></div>Cannot be assessed<div class="MetadataDisplay"></div>
                              <div class="ChangeDisplay"></div>
                              <div class="MetadataDisplay" style="display:inline">
         		&#xA0;<div class="nameDiv">
                                  <div class="name">name: </div>
                                  <div class="metadataTextValue">
                                    <div class="nameValue">LI_15976</div>
                                  </div>
                                </div>
                              </div>
                              <div class="ChangeDisplay"></div>
                              <div style="display:inline" class="MetadataDisplay"></div>
                              <div class="MetadataDisplay">
         		&#xA0;<div class="ResponseUnits">dt: </div>
                                <div class="metadataTextValue">string</div>
         		&#xA0;	</div>
                              <div class="ChangeDisplay"></div><input type="text" class="AnswerTextBox" width="100" name="46180.100004300" value="" onkeydown="&#xA;							javascript:SelectChoiceOnKeyPress('15976.100004300', this, event)&#xA;						" onblur="&#xA;							javascript:SelectUnselectChoiceOnBlur('15976.100004300', this)&#xA;						">
					&#xA0;</div>
                          </div>
                          <div class="Answer"><input type="radio" style="float:left" name="46180.100004300" value="39963.100004300,Uninvolved by invasive carcinoma" onchange="&#xA;						javascript:SelectUnselectParents('q46180.100004300', this);&#xA;					" onblur="&#xA;						javascript:OnChoiceBlur('39963.100004300', this)&#xA;					"><div class="itemTitle">
                              <div style="display:inline" class="idDisplay"><a onClick="javascript:syncItem(this)" name="39963">39963
            	-  
			</a></div>Uninvolved by invasive carcinoma<div class="MetadataDisplay"></div>
                              <div class="ChangeDisplay"></div>
                              <div class="MetadataDisplay" style="display:inline">
         		&#xA0;<div class="nameDiv">
                                  <div class="name">name: </div>
                                  <div class="metadataTextValue">
                                    <div class="nameValue">LI_39963</div>
                                  </div>
                                </div>
                              </div>
                              <div class="ChangeDisplay"></div>
                              <div style="display:inline" class="MetadataDisplay"></div>
                            </div>
                          </div>
                          <div class="question" id="q37857.100004300"><input type="hidden" class="TextBox" name="q37857.100004300" value="?Status of Adenocarcinoma in Situ at Parenchymal Margin"><input id="maxcardinality" type="hidden" value=""><div class="QuestionInListItem">
                              <div class="QuestionTitle collapsable_q">
                                <div style="display:inline" class="idDisplay"><a onClick="javascript:syncItem(this)" name="37857">37857
            	-  
			</a></div>?Status of Adenocarcinoma in Situ at Parenchymal Margin<div style="display:inline" class="MetadataDisplay">
                                  <div class="MetadataDisplay" style="display:inline-block"></div>
                                  <div class="MetadataDisplay" style="display:inline">
         				&#xA0;<div class="reportText">
         			rptText:
         				</div>
                                    <div class="metadataTextValue">Status of Adenocarcinoma in Situ at Parenchymal Margin</div>
         		&#xA0;<div class="nameDiv">
                                      <div class="name">name: </div>
                                      <div class="metadataTextValue">
                                        <div class="nameValue">Q_37857</div>
                                      </div>
                                    </div>
                                  </div>
                                  <div class="ChangeDisplay"></div>
                                  <div class="MetadataDisplay"></div>
                                  <div class="ChangeDisplay"></div>
                                </div>
                              </div><a class="QuestionReset" onclick="resetAnswer(this);return false" href="&#xA;								#&#xA;							">(reset)</a><div class="command"></div>
                              <div style="clear:both;"></div>
                              <div class="Answer"><input type="radio" style="float:left" name="37857.100004300" value="39746.100004300,Uninvolved by adenocarcinoma in situ" onchange="&#xA;						javascript:SelectUnselectParents('q37857.100004300', this);&#xA;					" onblur="&#xA;						javascript:OnChoiceBlur('39746.100004300', this)&#xA;					"><div class="itemTitle">
                                  <div style="display:inline" class="idDisplay"><a onClick="javascript:syncItem(this)" name="39746">39746
            	-  
			</a></div>Uninvolved by adenocarcinoma in situ<div class="MetadataDisplay"></div>
                                  <div class="ChangeDisplay"></div>
                                  <div class="MetadataDisplay" style="display:inline">
         		&#xA0;<div class="nameDiv">
                                      <div class="name">name: </div>
                                      <div class="metadataTextValue">
                                        <div class="nameValue">LI_39746</div>
                                      </div>
                                    </div>
                                  </div>
                                  <div class="ChangeDisplay"></div>
                                  <div style="display:inline" class="MetadataDisplay"></div>
                                </div>
                              </div>
                              <div class="Answer"><input type="radio" style="float:left" name="37857.100004300" value="51032.100004300,Positive for adenocarcinoma in situ" onchange="&#xA;						javascript:SelectUnselectParents('q37857.100004300', this);&#xA;					" onblur="&#xA;						javascript:OnChoiceBlur('51032.100004300', this)&#xA;					"><div class="itemTitle">
                                  <div style="display:inline" class="idDisplay"><a onClick="javascript:syncItem(this)" name="51032">51032
            	-  
			</a></div>Positive for adenocarcinoma in situ<div class="MetadataDisplay"></div>
                                  <div class="ChangeDisplay"></div>
                                  <div class="MetadataDisplay" style="display:inline">
         		&#xA0;<div class="nameDiv">
                                      <div class="name">name: </div>
                                      <div class="metadataTextValue">
                                        <div class="nameValue">LI_51032</div>
                                      </div>
                                    </div>
                                  </div>
                                  <div class="ChangeDisplay"></div>
                                  <div style="display:inline" class="MetadataDisplay"></div>
                                </div>
                              </div>
                              <div class="Answer"><input type="radio" style="float:left" name="37857.100004300" value="55449.100004300,Cannot be assessed" onchange="&#xA;						javascript:SelectUnselectParents('q37857.100004300', this);&#xA;					" onblur="&#xA;						javascript:OnChoiceBlur('55449.100004300', this)&#xA;					"><div class="itemTitle">
                                  <div style="display:inline" class="idDisplay"><a onClick="javascript:syncItem(this)" name="55449">55449
            	-  
			</a></div>Cannot be assessed<div class="MetadataDisplay"></div>
                                  <div class="ChangeDisplay"></div>
                                  <div class="MetadataDisplay" style="display:inline">
         		&#xA0;<div class="nameDiv">
                                      <div class="name">name: </div>
                                      <div class="metadataTextValue">
                                        <div class="nameValue">LI_55449</div>
                                      </div>
                                    </div>
                                  </div>
                                  <div class="ChangeDisplay"></div>
                                  <div style="display:inline" class="MetadataDisplay"></div>
                                  <div class="MetadataDisplay">
         		&#xA0;<div class="ResponseUnits">dt: </div>
                                    <div class="metadataTextValue">string</div>
         		&#xA0;	</div>
                                  <div class="ChangeDisplay"></div><input type="text" class="AnswerTextBox" width="100" name="37857.100004300" value="" onkeydown="&#xA;							javascript:SelectChoiceOnKeyPress('55449.100004300', this, event)&#xA;						" onblur="&#xA;							javascript:SelectUnselectChoiceOnBlur('55449.100004300', this)&#xA;						">
					&#xA0;</div>
                              </div>
                              <div class="Answer"><input type="radio" style="float:left" name="37857.100004300" value="47623.100004300,?Not applicable" onchange="&#xA;						javascript:SelectUnselectParents('q37857.100004300', this);&#xA;					" onblur="&#xA;						javascript:OnChoiceBlur('47623.100004300', this)&#xA;					"><div class="itemTitle">
                                  <div style="display:inline" class="idDisplay"><a onClick="javascript:syncItem(this)" name="47623">47623
            	-  
			</a></div>?Not applicable<div class="MetadataDisplay">
               &#xA0;<div class="omitWhenSel">ows </div>
                                  </div>
                                  <div class="ChangeDisplay"></div>
                                  <div class="MetadataDisplay" style="display:inline">
         				&#xA0;<div class="reportText">
         			rptText:
         				</div>
                                    <div class="metadataTextValue">Not applicable</div>
         		&#xA0;<div class="nameDiv">
                                      <div class="name">name: </div>
                                      <div class="metadataTextValue">
                                        <div class="nameValue">LI_47623</div>
                                      </div>
                                    </div>
                                  </div>
                                  <div class="ChangeDisplay"></div>
                                  <div style="display:inline" class="MetadataDisplay"></div>
                                </div>
                              </div>
                              <div style="clear:both;"></div>
                            </div>
                          </div>
                          <div class="question" id="q50042.100004300"><input type="hidden" class="TextBox" name="q50042.100004300" value="?Status of Lepidic Component of Invasive Carcinoma at Parenchymal Margin"><input id="maxcardinality" type="hidden" value=""><div class="QuestionInListItem">
                              <div class="QuestionTitle collapsable_q">
                                <div style="display:inline" class="idDisplay"><a onClick="javascript:syncItem(this)" name="50042">50042
            	-  
			</a></div>?Status of Lepidic Component of Invasive Carcinoma at Parenchymal Margin<div style="display:inline" class="MetadataDisplay">
                                  <div class="MetadataDisplay" style="display:inline-block"></div>
                                  <div class="MetadataDisplay" style="display:inline">
         				&#xA0;<div class="reportText">
         			rptText:
         				</div>
                                    <div class="metadataTextValue">Status of Lepidic Component of Invasive Carcinoma at Parenchymal Margin</div>
         		&#xA0;<div class="nameDiv">
                                      <div class="name">name: </div>
                                      <div class="metadataTextValue">
                                        <div class="nameValue">Q_50042</div>
                                      </div>
                                    </div>
                                  </div>
                                  <div class="ChangeDisplay"></div>
                                  <div class="MetadataDisplay"></div>
                                  <div class="ChangeDisplay"></div>
                                </div>
                              </div><a class="QuestionReset" onclick="resetAnswer(this);return false" href="&#xA;								#&#xA;							">(reset)</a><div class="command"></div>
                              <div style="clear:both;"></div>
                              <div class="Answer"><input type="radio" style="float:left" name="50042.100004300" value="46029.100004300,Uninvolved by lepidic component of invasive adenocarcinoma" onchange="&#xA;						javascript:SelectUnselectParents('q50042.100004300', this);&#xA;					" onblur="&#xA;						javascript:OnChoiceBlur('46029.100004300', this)&#xA;					"><div class="itemTitle">
                                  <div style="display:inline" class="idDisplay"><a onClick="javascript:syncItem(this)" name="46029">46029
            	-  
			</a></div>Uninvolved by lepidic component of invasive adenocarcinoma<div class="MetadataDisplay"></div>
                                  <div class="ChangeDisplay"></div>
                                  <div class="MetadataDisplay" style="display:inline">
         		&#xA0;<div class="nameDiv">
                                      <div class="name">name: </div>
                                      <div class="metadataTextValue">
                                        <div class="nameValue">LI_46029</div>
                                      </div>
                                    </div>
                                  </div>
                                  <div class="ChangeDisplay"></div>
                                  <div style="display:inline" class="MetadataDisplay"></div>
                                </div>
                              </div>
                              <div class="Answer"><input type="radio" style="float:left" name="50042.100004300" value="39577.100004300,Positive for lepidic component of invasive adenocarcinoma" onchange="&#xA;						javascript:SelectUnselectParents('q50042.100004300', this);&#xA;					" onblur="&#xA;						javascript:OnChoiceBlur('39577.100004300', this)&#xA;					"><div class="itemTitle">
                                  <div style="display:inline" class="idDisplay"><a onClick="javascript:syncItem(this)" name="39577">39577
            	-  
			</a></div>Positive for lepidic component of invasive adenocarcinoma<div class="MetadataDisplay"></div>
                                  <div class="ChangeDisplay"></div>
                                  <div class="MetadataDisplay" style="display:inline">
         		&#xA0;<div class="nameDiv">
                                      <div class="name">name: </div>
                                      <div class="metadataTextValue">
                                        <div class="nameValue">LI_39577</div>
                                      </div>
                                    </div>
                                  </div>
                                  <div class="ChangeDisplay"></div>
                                  <div style="display:inline" class="MetadataDisplay"></div>
                                </div>
                              </div>
                              <div class="Answer"><input type="radio" style="float:left" name="50042.100004300" value="56617.100004300,Cannot be assessed" onchange="&#xA;						javascript:SelectUnselectParents('q50042.100004300', this);&#xA;					" onblur="&#xA;						javascript:OnChoiceBlur('56617.100004300', this)&#xA;					"><div class="itemTitle">
                                  <div style="display:inline" class="idDisplay"><a onClick="javascript:syncItem(this)" name="56617">56617
            	-  
			</a></div>Cannot be assessed<div class="MetadataDisplay"></div>
                                  <div class="ChangeDisplay"></div>
                                  <div class="MetadataDisplay" style="display:inline">
         		&#xA0;<div class="nameDiv">
                                      <div class="name">name: </div>
                                      <div class="metadataTextValue">
                                        <div class="nameValue">LI_56617</div>
                                      </div>
                                    </div>
                                  </div>
                                  <div class="ChangeDisplay"></div>
                                  <div style="display:inline" class="MetadataDisplay"></div>
                                  <div class="MetadataDisplay">
         		&#xA0;<div class="ResponseUnits">dt: </div>
                                    <div class="metadataTextValue">string</div>
         		&#xA0;	</div>
                                  <div class="ChangeDisplay"></div><input type="text" class="AnswerTextBox" width="100" name="50042.100004300" value="" onkeydown="&#xA;							javascript:SelectChoiceOnKeyPress('56617.100004300', this, event)&#xA;						" onblur="&#xA;							javascript:SelectUnselectChoiceOnBlur('56617.100004300', this)&#xA;						">
					&#xA0;</div>
                              </div>
                              <div class="Answer"><input type="radio" style="float:left" name="50042.100004300" value="42265.100004300,?Not applicable" onchange="&#xA;						javascript:SelectUnselectParents('q50042.100004300', this);&#xA;					" onblur="&#xA;						javascript:OnChoiceBlur('42265.100004300', this)&#xA;					"><div class="itemTitle">
                                  <div style="display:inline" class="idDisplay"><a onClick="javascript:syncItem(this)" name="42265">42265
            	-  
			</a></div>?Not applicable<div class="MetadataDisplay">
               &#xA0;<div class="omitWhenSel">ows </div>
                                  </div>
                                  <div class="ChangeDisplay"></div>
                                  <div class="MetadataDisplay" style="display:inline">
         				&#xA0;<div class="reportText">
         			rptText:
         				</div>
                                    <div class="metadataTextValue">Not applicable</div>
         		&#xA0;<div class="nameDiv">
                                      <div class="name">name: </div>
                                      <div class="metadataTextValue">
                                        <div class="nameValue">LI_42265</div>
                                      </div>
                                    </div>
                                  </div>
                                  <div class="ChangeDisplay"></div>
                                  <div style="display:inline" class="MetadataDisplay"></div>
                                </div>
                              </div>
                              <div style="clear:both;"></div>
                            </div>
                          </div>
                          <div class="Answer"><input type="radio" style="float:left" name="46180.100004300" value="16055.100004300,Positive for invasive carcinoma" onchange="&#xA;						javascript:SelectUnselectParents('q46180.100004300', this);&#xA;					" onblur="&#xA;						javascript:OnChoiceBlur('16055.100004300', this)&#xA;					"><div class="itemTitle">
                              <div style="display:inline" class="idDisplay"><a onClick="javascript:syncItem(this)" name="16055">16055
            	-  
			</a></div>Positive for invasive carcinoma<div class="MetadataDisplay"></div>
                              <div class="ChangeDisplay"></div>
                              <div class="MetadataDisplay" style="display:inline">
         		&#xA0;<div class="nameDiv">
                                  <div class="name">name: </div>
                                  <div class="metadataTextValue">
                                    <div class="nameValue">LI_16055</div>
                                  </div>
                                </div>
                              </div>
                              <div class="ChangeDisplay"></div>
                              <div style="display:inline" class="MetadataDisplay"></div>
                            </div>
                          </div>
                          <div style="clear:both;"></div>
                        </div>
                      </div>
                      <div class="section_wthin_list" id="s45319.100004300"><input id="maxcardinality" type="hidden" value=""><table class="HeaderTableChild" align="center" id="s45319.100004300">
                          <tr>
                            <td>
                              <div class=" collapsable">
                                <div style="display:inline" class="idDisplay"><a onClick="javascript:syncItem(this)" name="45319">45319
            	-  
			</a></div>Other Attached Tissue Margin(s) (repeat as needed)<div style="display:inline" class="MetadataDisplay">
                                  <div class="MetadataDisplay" style="display:inline">
					&#xA0;<div class="minCard">min: </div>
                                    <div class="nameValue">0</div>
						&#xA0;<div class="reportText">
							rptText:
						</div>{no text}
					&#xA0;<div class="nameDiv">
                                      <div class="name">name: </div>
                                      <div class="nameValue">S_45319</div>
                                    </div>
                                  </div>
                                  <div class="ChangeDisplay"></div>
                                </div>
                              </div>
                              <div class="question" id="q42340.100004300"><input type="hidden" class="TextBox" name="q42340.100004300" value="?Specify Margin(s)"><input id="maxcardinality" type="hidden" value="10"><div class="QuestionInListItem">
                                  <div class="QuestionTitle collapsable_q">
                                    <div style="display:inline" class="idDisplay"><a onClick="javascript:syncItem(this)" name="42340">42340
            	-  
			</a></div>?Specify Margin(s)<div style="display:inline" class="MetadataDisplay">
                                      <div class="MetadataDisplay" style="display:inline-block">
               &#xA0;<div class="minCard">min: </div>
                                        <div class="metadataTextValue">0</div>
               &#xA0;<div class="maxCard">max: </div>:
            	<div class="metadataTextValue">10</div>
                                      </div>
                                      <div class="MetadataDisplay" style="display:inline">
         				&#xA0;<div class="reportText">
         			rptText:
         				</div>
                                        <div class="metadataTextValue">Other Margin</div>
         		&#xA0;<div class="nameDiv">
                                          <div class="name">name: </div>
                                          <div class="metadataTextValue">
                                            <div class="nameValue">Q_42340</div>
                                          </div>
                                        </div>
                                      </div>
                                      <div class="ChangeDisplay"></div>
                                      <div class="MetadataDisplay">
         		&#xA0;<div class="ResponseUnits">dt: </div>
                                        <div class="metadataTextValue">string</div>
         		&#xA0;	</div>
                                      <div class="ChangeDisplay"></div>
                                    </div><input type="text" class="TextBox" name="42340.100004300" value=""></div>
                                  <div class="command"><input type="button" class="btnAdd" onclick="addQuestion(this)" value="+"><input type="button" class="btnRemove" onclick="removeQuestion(this)" value="-" style="visibility:hidden;"></div>
                                  <div style="clear:both;"></div>
                                  <div style="clear:both;"></div>
                                  <div class="question" id="q3934.100004300"><input type="hidden" class="TextBox" name="q3934.100004300" value="Margin Status"><input id="maxcardinality" type="hidden" value=""><div class="QuestionInListItem">
                                      <div class="QuestionTitle collapsable_q">
                                        <div style="display:inline" class="idDisplay"><a onClick="javascript:syncItem(this)" name="3934">3934
            	-  
			</a></div>Margin Status<div style="display:inline" class="MetadataDisplay">
                                          <div class="MetadataDisplay" style="display:inline-block"></div>
                                          <div class="MetadataDisplay" style="display:inline">
         		&#xA0;<div class="nameDiv">
                                              <div class="name">name: </div>
                                              <div class="metadataTextValue">
                                                <div class="nameValue">Q_3934</div>
                                              </div>
                                            </div>
                                          </div>
                                          <div class="ChangeDisplay"></div>
                                          <div class="MetadataDisplay"></div>
                                          <div class="ChangeDisplay"></div>
                                        </div>
                                      </div><a class="QuestionReset" onclick="resetAnswer(this);return false" href="&#xA;								#&#xA;							">(reset)</a><div class="command"></div>
                                      <div style="clear:both;"></div>
                                      <div class="Answer"><input type="radio" style="float:left" name="3934.100004300" value="15984.100004300,Cannot be assessed" onchange="&#xA;						javascript:SelectUnselectParents('q3934.100004300', this);&#xA;					" onblur="&#xA;						javascript:OnChoiceBlur('15984.100004300', this)&#xA;					"><div class="itemTitle">
                                          <div style="display:inline" class="idDisplay"><a onClick="javascript:syncItem(this)" name="15984">15984
            	-  
			</a></div>Cannot be assessed<div class="MetadataDisplay"></div>
                                          <div class="ChangeDisplay"></div>
                                          <div class="MetadataDisplay" style="display:inline">
         		&#xA0;<div class="nameDiv">
                                              <div class="name">name: </div>
                                              <div class="metadataTextValue">
                                                <div class="nameValue">LI_15984</div>
                                              </div>
                                            </div>
                                          </div>
                                          <div class="ChangeDisplay"></div>
                                          <div style="display:inline" class="MetadataDisplay"></div>
                                          <div class="MetadataDisplay">
         		&#xA0;<div class="ResponseUnits">dt: </div>
                                            <div class="metadataTextValue">string</div>
         		&#xA0;	</div>
                                          <div class="ChangeDisplay"></div><input type="text" class="AnswerTextBox" width="100" name="3934.100004300" value="" onkeydown="&#xA;							javascript:SelectChoiceOnKeyPress('15984.100004300', this, event)&#xA;						" onblur="&#xA;							javascript:SelectUnselectChoiceOnBlur('15984.100004300', this)&#xA;						">
					&#xA0;</div>
                                      </div>
                                      <div class="Answer"><input type="radio" style="float:left" name="3934.100004300" value="15989.100004300,Uninvolved by invasive carcinoma" onchange="&#xA;						javascript:SelectUnselectParents('q3934.100004300', this);&#xA;					" onblur="&#xA;						javascript:OnChoiceBlur('15989.100004300', this)&#xA;					"><div class="itemTitle">
                                          <div style="display:inline" class="idDisplay"><a onClick="javascript:syncItem(this)" name="15989">15989
            	-  
			</a></div>Uninvolved by invasive carcinoma<div class="MetadataDisplay"></div>
                                          <div class="ChangeDisplay"></div>
                                          <div class="MetadataDisplay" style="display:inline">
         		&#xA0;<div class="nameDiv">
                                              <div class="name">name: </div>
                                              <div class="metadataTextValue">
                                                <div class="nameValue">LI_15989</div>
                                              </div>
                                            </div>
                                          </div>
                                          <div class="ChangeDisplay"></div>
                                          <div style="display:inline" class="MetadataDisplay"></div>
                                        </div>
                                      </div>
                                      <div class="Answer"><input type="radio" style="float:left" name="3934.100004300" value="15990.100004300,Positive for invasive carcinoma" onchange="&#xA;						javascript:SelectUnselectParents('q3934.100004300', this);&#xA;					" onblur="&#xA;						javascript:OnChoiceBlur('15990.100004300', this)&#xA;					"><div class="itemTitle">
                                          <div style="display:inline" class="idDisplay"><a onClick="javascript:syncItem(this)" name="15990">15990
            	-  
			</a></div>Positive for invasive carcinoma<div class="MetadataDisplay"></div>
                                          <div class="ChangeDisplay"></div>
                                          <div class="MetadataDisplay" style="display:inline">
         		&#xA0;<div class="nameDiv">
                                              <div class="name">name: </div>
                                              <div class="metadataTextValue">
                                                <div class="nameValue">LI_15990</div>
                                              </div>
                                            </div>
                                          </div>
                                          <div class="ChangeDisplay"></div>
                                          <div style="display:inline" class="MetadataDisplay"></div>
                                        </div>
                                      </div>
                                      <div style="clear:both;"></div>
                                    </div>
                                  </div>
                                </div>
                              </div>
                              <div style="clear:both"></div>
                            </td>
                          </tr>
                        </table>
                      </div>
                      <div style="clear:both;"></div>
                    </div>
                  </div>
                  <div style="clear:both"></div>
                </td>
              </tr>
            </table>
          </div>
          <div id="s15662.100004300"><input id="maxcardinality" type="hidden" value=""><table class="HeaderTable" align="center" id="s15662.100004300">
              <tr>
                <td>
                  <div class="TopHeader collapsable">
                    <div style="display:inline" class="idDisplay"><a onClick="javascript:syncItem(this)" name="15662">15662
            	-  
			</a></div>LYMPH NODES<div style="display:inline" class="MetadataDisplay">
                      <div class="MetadataDisplay" style="display:inline">
					&#xA0;<div class="nameDiv">
                          <div class="name">name: </div>
                          <div class="nameValue">S_15662</div>
                        </div>
                      </div>
                      <div class="ChangeDisplay"></div>
                    </div>
                  </div>
                  <div style="clear:both"></div>
                  <div class="question" id="q33884.100004300"><input type="hidden" class="TextBox" name="q33884.100004300" value=""><input id="maxcardinality" type="hidden" value=""><div class="QuestionInSection">
                      <div class="mustImplement"></div>
                      <div class="QuestionTitle collapsable_q">
                        <div class="notRequired">+</div>
                        <div style="display:inline" class="idDisplay"><a onClick="javascript:syncItem(this)" name="33884">33884
            	-  
			</a></div>
                        <div style="display:inline-block" class="metadata"></div>
                        <div class="MetadataDisplay" style="display:inline-block">
               &#xA0;<div class="minCard">min: </div>
                          <div class="metadataTextValue">0</div>
                        </div>
                        <div class="MetadataDisplay" style="display:inline">
               &#xA0;<div class="mustImplement">mI: </div>
                          <div class="metadataTextValue">false</div>
                          <div class="altText">
         					altText:
         				</div>
                          <div class="metadataTextValue">Note</div>
         		&#xA0;<div class="nameDiv">
                            <div class="name">name: </div>
                            <div class="metadataTextValue">
                              <div class="nameValue">Q_33884</div>
                            </div>
                          </div>
                        </div>
                        <div class="ChangeDisplay"></div>
                        <div class="MetadataDisplay"></div>
                        <div class="ChangeDisplay"></div>
                      </div><a class="QuestionReset" onclick="resetAnswer(this);return false" href="&#xA;								#&#xA;							">(reset)</a><div class="command"></div>
                      <div style="clear:both;"></div>
                      <div class="Answer"><input type="checkbox" style="float:left;" name="33884.100004300" value="34242.100004300,Includes nodes from other procedure(s)" onchange="&#xA;						javascript:SelectUnselectParents('q33884.100004300', this)&#xA;					" onblur="&#xA;						javascript:OnChoiceBlur('34242.100004300', this)&#xA;					"><div class="itemTitle">
                          <div style="display:inline" class="idDisplay"><a onClick="javascript:syncItem(this)" name="34242">34242
            	-  
			</a></div>Includes nodes from other procedure(s)<div class="MetadataDisplay"></div>
                          <div class="ChangeDisplay"></div>
                          <div class="MetadataDisplay" style="display:inline">
         		&#xA0;<div class="nameDiv">
                              <div class="name">name: </div>
                              <div class="metadataTextValue">
                                <div class="nameValue">LI_34242</div>
                              </div>
                            </div>
                          </div>
                          <div class="ChangeDisplay"></div>
                          <div style="display:inline" class="MetadataDisplay"></div>
                        </div>
                      </div>
                      <div class="section_wthin_list" id="s33868.100004300">
                        <div class="mustImplement"></div><input id="maxcardinality" type="hidden" value=""><table class="HeaderTableChild" align="center" id="s33868.100004300">
                          <tr>
                            <td>
                              <div class=" collapsable">
                                <div class="notRequired">+</div>
                                <div style="display:inline" class="idDisplay"><a onClick="javascript:syncItem(this)" name="33868">33868
            	-  
			</a></div>Additional Lymph Node Procedures (repeat for each procedure)<div style="display:inline" class="MetadataDisplay">
                                  <div class="MetadataDisplay" style="display:inline">
					&#xA0;<div class="mustImplement">mI: </div>false
					&#xA0;<div class="minCard">min: </div>
                                    <div class="nameValue">0</div>
						&#xA0;<div class="reportText">
							rptText:
						</div>Additional Lymph Node Procedures
					&#xA0;<div class="nameDiv">
                                      <div class="name">name: </div>
                                      <div class="nameValue">S_33868</div>
                                    </div>
                                  </div>
                                  <div class="ChangeDisplay"></div>
                                </div>
                              </div>
                              <div class="question" id="q33869.100004300"><input type="hidden" class="TextBox" name="q33869.100004300" value="Procedure Description"><input id="maxcardinality" type="hidden" value="10"><div class="QuestionInListItem">
                                  <div class="mustImplement"></div>
                                  <div class="QuestionTitle collapsable_q">
                                    <div class="notRequired">+</div>
                                    <div style="display:inline" class="idDisplay"><a onClick="javascript:syncItem(this)" name="33869">33869
            	-  
			</a></div>Procedure Description<div style="display:inline" class="MetadataDisplay">
                                      <div class="MetadataDisplay" style="display:inline-block">
               &#xA0;<div class="minCard">min: </div>
                                        <div class="metadataTextValue">0</div>
               &#xA0;<div class="maxCard">max: </div>:
            	<div class="metadataTextValue">10</div>
                                      </div>
                                      <div class="MetadataDisplay" style="display:inline">
               &#xA0;<div class="mustImplement">mI: </div>
                                        <div class="metadataTextValue">false</div>
         		&#xA0;<div class="nameDiv">
                                          <div class="name">name: </div>
                                          <div class="metadataTextValue">
                                            <div class="nameValue">Q_33869</div>
                                          </div>
                                        </div>
                                      </div>
                                      <div class="ChangeDisplay"></div>
                                      <div class="MetadataDisplay">
         		&#xA0;<div class="ResponseUnits">dt: </div>
                                        <div class="metadataTextValue">string</div>
         		&#xA0;	</div>
                                      <div class="ChangeDisplay"></div>
                                    </div><input type="text" class="TextBox" name="33869.100004300" value=""></div>
                                  <div class="command"><input type="button" class="btnAdd" onclick="addQuestion(this)" value="+"><input type="button" class="btnRemove" onclick="removeQuestion(this)" value="-" style="visibility:hidden;"></div>
                                  <div style="clear:both;"></div>
                                  <div style="clear:both;"></div>
                                  <div class="question" id="q33870.100004300"><input type="hidden" class="TextBox" name="q33870.100004300" value="Procedure Identifier"><input id="maxcardinality" type="hidden" value=""><div class="QuestionInListItem">
                                      <div class="mustImplement"></div>
                                      <div class="QuestionTitle collapsable_q">
                                        <div class="notRequired">+</div>
                                        <div style="display:inline" class="idDisplay"><a onClick="javascript:syncItem(this)" name="33870">33870
            	-  
			</a></div>Procedure Identifier<div style="display:inline" class="MetadataDisplay">
                                          <div class="MetadataDisplay" style="display:inline-block">
               &#xA0;<div class="minCard">min: </div>
                                            <div class="metadataTextValue">0</div>
                                          </div>
                                          <div class="MetadataDisplay" style="display:inline">
               &#xA0;<div class="mustImplement">mI: </div>
                                            <div class="metadataTextValue">false</div>
         		&#xA0;<div class="nameDiv">
                                              <div class="name">name: </div>
                                              <div class="metadataTextValue">
                                                <div class="nameValue">Q_33870</div>
                                              </div>
                                            </div>
                                          </div>
                                          <div class="ChangeDisplay"></div>
                                          <div class="MetadataDisplay">
         		&#xA0;<div class="ResponseUnits">dt: </div>
                                            <div class="metadataTextValue">string</div>
         		&#xA0;	</div>
                                          <div class="ChangeDisplay"></div>
                                        </div><input type="text" class="TextBox" name="33870.100004300" value=""></div>
                                      <div class="command"></div>
                                      <div style="clear:both;"></div>
                                      <div style="clear:both;"></div>
                                    </div>
                                  </div>
                                  <div class="question" id="q33871.100004300"><input type="hidden" class="TextBox" name="q33871.100004300" value="Procedure Date / Time"><input id="maxcardinality" type="hidden" value=""><div class="QuestionInListItem">
                                      <div class="mustImplement"></div>
                                      <div class="QuestionTitle collapsable_q">
                                        <div class="notRequired">+</div>
                                        <div style="display:inline" class="idDisplay"><a onClick="javascript:syncItem(this)" name="33871">33871
            	-  
			</a></div>Procedure Date / Time<div style="display:inline" class="MetadataDisplay">
                                          <div class="MetadataDisplay" style="display:inline-block">
               &#xA0;<div class="minCard">min: </div>
                                            <div class="metadataTextValue">0</div>
                                          </div>
                                          <div class="MetadataDisplay" style="display:inline">
               &#xA0;<div class="mustImplement">mI: </div>
                                            <div class="metadataTextValue">false</div>
         		&#xA0;<div class="nameDiv">
                                              <div class="name">name: </div>
                                              <div class="metadataTextValue">
                                                <div class="nameValue">Q_33871</div>
                                              </div>
                                            </div>
                                          </div>
                                          <div class="ChangeDisplay"></div>
                                          <div class="MetadataDisplay">
         		&#xA0;<div class="ResponseUnits">dt: </div>
                                            <div class="metadataTextValue">string</div>
         		&#xA0;	</div>
                                          <div class="ChangeDisplay"></div>
                                        </div><input type="text" class="TextBox" name="33871.100004300" value=""></div>
                                      <div class="command"></div>
                                      <div style="clear:both;"></div>
                                      <div style="clear:both;"></div>
                                    </div>
                                  </div>
                                </div>
                              </div>
                              <div style="clear:both"></div>
                            </td>
                          </tr>
                        </table>
                      </div>
                      <div style="clear:both;"></div>
                    </div>
                  </div>
                  <div class="question" id="q7808.100004300"><input type="hidden" class="TextBox" name="q7808.100004300" value="Regional Lymph Nodes"><input id="maxcardinality" type="hidden" value=""><div class="QuestionInSection">
                      <div class="QuestionTitle collapsable_q">
                        <div style="display:inline" class="idDisplay"><a onClick="javascript:syncItem(this)" name="7808">7808
            	-  
			</a></div>Regional Lymph Nodes<div style="display:inline-block" class="metadata"></div>
                        <div class="MetadataDisplay" style="display:inline-block"></div>
                        <div class="MetadataDisplay" style="display:inline">
         		&#xA0;<div class="nameDiv">
                            <div class="name">name: </div>
                            <div class="metadataTextValue">
                              <div class="nameValue">Q_7808</div>
                            </div>
                          </div>
                        </div>
                        <div class="ChangeDisplay"></div>
                        <div class="MetadataDisplay"></div>
                        <div class="ChangeDisplay"></div>
                      </div><a class="QuestionReset" onclick="resetAnswer(this);return false" href="&#xA;								#&#xA;							">(reset)</a><div class="command"></div>
                      <div style="clear:both;"></div>
                      <div class="Answer"><input type="checkbox" style="float:left;" name="7808.100004300" value="7811.100004300,No lymph nodes submitted or found" onchange="&#xA;						javascript:SelectUnselectParents('q7808.100004300', this)&#xA;					" onblur="&#xA;						javascript:OnChoiceBlur('7811.100004300', this)&#xA;					"><div class="itemTitle">
                          <div style="display:inline" class="idDisplay"><a onClick="javascript:syncItem(this)" name="7811">7811
            	-  
			</a></div>No lymph nodes submitted or found<div class="MetadataDisplay">
               &#xA0;<div class="sdc">sdac </div>
                          </div>
                          <div class="ChangeDisplay"></div>
                          <div class="MetadataDisplay" style="display:inline">
         		&#xA0;<div class="nameDiv">
                              <div class="name">name: </div>
                              <div class="metadataTextValue">
                                <div class="nameValue">LI_7811</div>
                              </div>
                            </div>
                          </div>
                          <div class="ChangeDisplay"></div>
                          <div style="display:inline" class="MetadataDisplay"></div>
                        </div>
                      </div>
                      <div class="question" id="q7841.100004300"><input type="hidden" class="TextBox" name="q7841.100004300" value="Number of Lymph Nodes Involved"><input id="maxcardinality" type="hidden" value=""><div class="QuestionInListItem">
                          <div class="QuestionTitle collapsable_q">
                            <div style="display:inline" class="idDisplay"><a onClick="javascript:syncItem(this)" name="7841">7841
            	-  
			</a></div>Number of Lymph Nodes Involved<div style="display:inline" class="MetadataDisplay">
                              <div class="MetadataDisplay" style="display:inline-block"></div>
                              <div class="MetadataDisplay" style="display:inline">
         		&#xA0;<div class="nameDiv">
                                  <div class="name">name: </div>
                                  <div class="metadataTextValue">
                                    <div class="nameValue">Q_7841</div>
                                  </div>
                                </div>
                              </div>
                              <div class="ChangeDisplay"></div>
                              <div class="MetadataDisplay"></div>
                              <div class="ChangeDisplay"></div>
                            </div>
                          </div><a class="QuestionReset" onclick="resetAnswer(this);return false" href="&#xA;								#&#xA;							">(reset)</a><div class="command"></div>
                          <div style="clear:both;"></div>
                          <div class="Answer"><input type="checkbox" style="float:left;" name="7841.100004300" value="14471.100004300,None identified" onchange="&#xA;						javascript:SelectUnselectParents('q7841.100004300', this)&#xA;					" onblur="&#xA;						javascript:OnChoiceBlur('14471.100004300', this)&#xA;					"><div class="itemTitle">
                              <div style="display:inline" class="idDisplay"><a onClick="javascript:syncItem(this)" name="14471">14471
            	-  
			</a></div>None identified<div class="MetadataDisplay">
               &#xA0;<div class="sdc">sdac </div>
                              </div>
                              <div class="ChangeDisplay"></div>
                              <div class="MetadataDisplay" style="display:inline">
         				&#xA0;<div class="reportText">
         			rptText:
         				</div>
                                <div class="metadataTextValue">0</div>
         		&#xA0;<div class="nameDiv">
                                  <div class="name">name: </div>
                                  <div class="metadataTextValue">
                                    <div class="nameValue">LI_14471</div>
                                  </div>
                                </div>
                              </div>
                              <div class="ChangeDisplay"></div>
                              <div style="display:inline" class="MetadataDisplay"></div>
                            </div>
                          </div>
                          <div class="question" id="q33448.100004300"><input type="hidden" class="TextBox" name="q33448.100004300" value="Number of Lymph Nodes Involved"><input id="maxcardinality" type="hidden" value=""><div class="QuestionInListItem">
                              <div class="QuestionTitle collapsable_q">
                                <div style="display:inline" class="idDisplay"><a onClick="javascript:syncItem(this)" name="33448">33448
            	-  
			</a></div>Number of Lymph Nodes Involved<div style="display:inline" class="MetadataDisplay">
                                  <div class="MetadataDisplay" style="display:inline-block"></div>
                                  <div class="MetadataDisplay" style="display:inline">
         		&#xA0;<div class="nameDiv">
                                      <div class="name">name: </div>
                                      <div class="metadataTextValue">
                                        <div class="nameValue">Q_33448</div>
                                      </div>
                                    </div>
                                  </div>
                                  <div class="ChangeDisplay"></div>
                                  <div class="MetadataDisplay"></div>
                                  <div class="ChangeDisplay"></div>
                                </div>
                              </div><a class="QuestionReset" onclick="resetAnswer(this);return false" href="&#xA;								#&#xA;							">(reset)</a><div class="command"></div>
                              <div style="clear:both;"></div>
                              <div class="Answer"><input type="radio" style="float:left" name="33448.100004300" value="7844.100004300,Specify number" onchange="&#xA;						javascript:SelectUnselectParents('q33448.100004300', this);&#xA;					" onblur="&#xA;						javascript:OnChoiceBlur('7844.100004300', this)&#xA;					"><div class="itemTitle">
                                  <div style="display:inline" class="idDisplay"><a onClick="javascript:syncItem(this)" name="7844">7844
            	-  
			</a></div>Specify number<div class="MetadataDisplay"></div>
                                  <div class="ChangeDisplay"></div>
                                  <div class="MetadataDisplay" style="display:inline">
         				&#xA0;<div class="reportText">
         			rptText:
         				</div>
                                    <div class="metadataTextValue">{no text}</div>
         		&#xA0;<div class="nameDiv">
                                      <div class="name">name: </div>
                                      <div class="metadataTextValue">
                                        <div class="nameValue">LI_7844</div>
                                      </div>
                                    </div>
                                  </div>
                                  <div class="ChangeDisplay"></div>
                                  <div style="display:inline" class="MetadataDisplay"></div>
                                  <div class="MetadataDisplay">
               &#xA0;<div class="responseRequired">respReq: </div>
         		&#xA0;<div class="ResponseUnits">dt: </div>
                                    <div class="metadataTextValue">integer</div>
         		&#xA0;	</div>
                                  <div class="ChangeDisplay"></div><input type="text" class="AnswerTextBox" width="100" name="33448.100004300" value="" onkeydown="&#xA;							javascript:SelectChoiceOnKeyPress('7844.100004300', this, event)&#xA;						" onblur="&#xA;							javascript:SelectUnselectChoiceOnBlur('7844.100004300', this)&#xA;						">
					&#xA0;</div>
                              </div>
                              <div class="Answer"><input type="radio" style="float:left" name="33448.100004300" value="33449.100004300,At least" onchange="&#xA;						javascript:SelectUnselectParents('q33448.100004300', this);&#xA;					" onblur="&#xA;						javascript:OnChoiceBlur('33449.100004300', this)&#xA;					"><div class="itemTitle">
                                  <div style="display:inline" class="idDisplay"><a onClick="javascript:syncItem(this)" name="33449">33449
            	-  
			</a></div>At least<div class="MetadataDisplay"></div>
                                  <div class="ChangeDisplay"></div>
                                  <div class="MetadataDisplay" style="display:inline">
         		&#xA0;<div class="nameDiv">
                                      <div class="name">name: </div>
                                      <div class="metadataTextValue">
                                        <div class="nameValue">LI_33449</div>
                                      </div>
                                    </div>
                                  </div>
                                  <div class="ChangeDisplay"></div>
                                  <div style="display:inline" class="MetadataDisplay"></div>
                                  <div class="MetadataDisplay">
               &#xA0;<div class="responseRequired">respReq: </div>
         		&#xA0;<div class="ResponseUnits">dt: </div>
                                    <div class="metadataTextValue">integer</div>
         		&#xA0;	</div>
                                  <div class="ChangeDisplay"></div><input type="text" class="AnswerTextBox" width="100" name="33448.100004300" value="" onkeydown="&#xA;							javascript:SelectChoiceOnKeyPress('33449.100004300', this, event)&#xA;						" onblur="&#xA;							javascript:SelectUnselectChoiceOnBlur('33449.100004300', this)&#xA;						">
					&#xA0;</div>
                              </div>
                              <div class="Answer"><input type="radio" style="float:left" name="33448.100004300" value="34452.100004300,Number cannot be determined (explain)" onchange="&#xA;						javascript:SelectUnselectParents('q33448.100004300', this);&#xA;					" onblur="&#xA;						javascript:OnChoiceBlur('34452.100004300', this)&#xA;					"><div class="itemTitle">
                                  <div style="display:inline" class="idDisplay"><a onClick="javascript:syncItem(this)" name="34452">34452
            	-  
			</a></div>Number cannot be determined (explain)<div class="MetadataDisplay"></div>
                                  <div class="ChangeDisplay"></div>
                                  <div class="MetadataDisplay" style="display:inline">
         				&#xA0;<div class="reportText">
         			rptText:
         				</div>
                                    <div class="metadataTextValue">Number cannot be determined</div>
         		&#xA0;<div class="nameDiv">
                                      <div class="name">name: </div>
                                      <div class="metadataTextValue">
                                        <div class="nameValue">LI_34452</div>
                                      </div>
                                    </div>
                                  </div>
                                  <div class="ChangeDisplay"></div>
                                  <div style="display:inline" class="MetadataDisplay"></div>
                                  <div class="MetadataDisplay">
               &#xA0;<div class="responseRequired">respReq: </div>
         		&#xA0;<div class="ResponseUnits">dt: </div>
                                    <div class="metadataTextValue">string</div>
         		&#xA0;	</div>
                                  <div class="ChangeDisplay"></div><input type="text" class="AnswerTextBox" width="100" name="33448.100004300" value="" onkeydown="&#xA;							javascript:SelectChoiceOnKeyPress('34452.100004300', this, event)&#xA;						" onblur="&#xA;							javascript:SelectUnselectChoiceOnBlur('34452.100004300', this)&#xA;						">
					&#xA0;</div>
                              </div>
                              <div style="clear:both;"></div>
                              <div class="question" id="q33426.100004300"><input type="hidden" class="TextBox" name="q33426.100004300" value="Nodal Stations Involved"><input id="maxcardinality" type="hidden" value=""><div class="QuestionInListItem">
                                  <div class="QuestionTitle collapsable_q">
                                    <div style="display:inline" class="idDisplay"><a onClick="javascript:syncItem(this)" name="33426">33426
            	-  
			</a></div>Nodal Stations Involved<div style="display:inline" class="MetadataDisplay">
                                      <div class="MetadataDisplay" style="display:inline-block"></div>
                                      <div class="MetadataDisplay" style="display:inline">
         		&#xA0;<div class="nameDiv">
                                          <div class="name">name: </div>
                                          <div class="metadataTextValue">
                                            <div class="nameValue">Q_33426</div>
                                          </div>
                                        </div>
                                      </div>
                                      <div class="ChangeDisplay"></div>
                                      <div class="MetadataDisplay"></div>
                                      <div class="ChangeDisplay"></div>
                                    </div>
                                  </div><a class="QuestionReset" onclick="resetAnswer(this);return false" href="&#xA;								#&#xA;							">(reset)</a><div class="command"></div>
                                  <div style="clear:both;"></div>
                                  <div>
                                    <div class="ListNote">
                                      <div style="display:inline" class="idDisplay"><a onClick="javascript:syncItem(this)" name="33540">33540
            	-  
			</a></div>Right Nodal Stations Involved<div style="display:inline" class="MetadataDisplay">
                                        <div class="MetadataDisplay" style="display:inline">
						&#xA0;<div class="reportText">
							rptText:
						</div>
                                          <div class="metadataTextValue">{no text}</div>
					&#xA0;<div class="nameDiv">
                                            <div class="name">name: </div>
                                            <div class="metadataTextValue">
                                              <div class="nameValue">DI_33540</div>
                                            </div>
                                          </div>
                                        </div>
                                        <div class="ChangeDisplay"></div>
                                      </div>
                                    </div>
                                    <div style="clear:both;"></div>
                                  </div>
                                  <div class="Answer"><input type="checkbox" style="float:left;" name="33426.100004300" value="33663.100004300,1R: Low cervical, supraclavicular, scalene and sternal notch" onchange="&#xA;						javascript:SelectUnselectParents('q33426.100004300', this)&#xA;					" onblur="&#xA;						javascript:OnChoiceBlur('33663.100004300', this)&#xA;					"><div class="itemTitle">
                                      <div style="display:inline" class="idDisplay"><a onClick="javascript:syncItem(this)" name="33663">33663
            	-  
			</a></div>1R: Low cervical, supraclavicular, scalene and sternal notch<div class="MetadataDisplay"></div>
                                      <div class="ChangeDisplay"></div>
                                      <div class="MetadataDisplay" style="display:inline">
         		&#xA0;<div class="nameDiv">
                                          <div class="name">name: </div>
                                          <div class="metadataTextValue">
                                            <div class="nameValue">LI_33663</div>
                                          </div>
                                        </div>
                                      </div>
                                      <div class="ChangeDisplay"></div>
                                      <div style="display:inline" class="MetadataDisplay"></div>
                                    </div>
                                  </div>
                                  <div class="Answer"><input type="checkbox" style="float:left;" name="33426.100004300" value="33770.100004300,2R: Upper paratracheal" onchange="&#xA;						javascript:SelectUnselectParents('q33426.100004300', this)&#xA;					" onblur="&#xA;						javascript:OnChoiceBlur('33770.100004300', this)&#xA;					"><div class="itemTitle">
                                      <div style="display:inline" class="idDisplay"><a onClick="javascript:syncItem(this)" name="33770">33770
            	-  
			</a></div>2R: Upper paratracheal<div class="MetadataDisplay"></div>
                                      <div class="ChangeDisplay"></div>
                                      <div class="MetadataDisplay" style="display:inline">
         		&#xA0;<div class="nameDiv">
                                          <div class="name">name: </div>
                                          <div class="metadataTextValue">
                                            <div class="nameValue">LI_33770</div>
                                          </div>
                                        </div>
                                      </div>
                                      <div class="ChangeDisplay"></div>
                                      <div style="display:inline" class="MetadataDisplay"></div>
                                    </div>
                                  </div>
                                  <div class="Answer"><input type="checkbox" style="float:left;" name="33426.100004300" value="33772.100004300,4R: Lower paratracheal" onchange="&#xA;						javascript:SelectUnselectParents('q33426.100004300', this)&#xA;					" onblur="&#xA;						javascript:OnChoiceBlur('33772.100004300', this)&#xA;					"><div class="itemTitle">
                                      <div style="display:inline" class="idDisplay"><a onClick="javascript:syncItem(this)" name="33772">33772
            	-  
			</a></div>4R: Lower paratracheal<div class="MetadataDisplay"></div>
                                      <div class="ChangeDisplay"></div>
                                      <div class="MetadataDisplay" style="display:inline">
         		&#xA0;<div class="nameDiv">
                                          <div class="name">name: </div>
                                          <div class="metadataTextValue">
                                            <div class="nameValue">LI_33772</div>
                                          </div>
                                        </div>
                                      </div>
                                      <div class="ChangeDisplay"></div>
                                      <div style="display:inline" class="MetadataDisplay"></div>
                                    </div>
                                  </div>
                                  <div class="Answer"><input type="checkbox" style="float:left;" name="33426.100004300" value="33787.100004300,8R: Para-esophageal (below carina)" onchange="&#xA;						javascript:SelectUnselectParents('q33426.100004300', this)&#xA;					" onblur="&#xA;						javascript:OnChoiceBlur('33787.100004300', this)&#xA;					"><div class="itemTitle">
                                      <div style="display:inline" class="idDisplay"><a onClick="javascript:syncItem(this)" name="33787">33787
            	-  
			</a></div>8R: Para-esophageal (below carina)<div class="MetadataDisplay"></div>
                                      <div class="ChangeDisplay"></div>
                                      <div class="MetadataDisplay" style="display:inline">
         		&#xA0;<div class="nameDiv">
                                          <div class="name">name: </div>
                                          <div class="metadataTextValue">
                                            <div class="nameValue">LI_33787</div>
                                          </div>
                                        </div>
                                      </div>
                                      <div class="ChangeDisplay"></div>
                                      <div style="display:inline" class="MetadataDisplay"></div>
                                    </div>
                                  </div>
                                  <div class="Answer"><input type="checkbox" style="float:left;" name="33426.100004300" value="33794.100004300,9R: Pulmonary ligament" onchange="&#xA;						javascript:SelectUnselectParents('q33426.100004300', this)&#xA;					" onblur="&#xA;						javascript:OnChoiceBlur('33794.100004300', this)&#xA;					"><div class="itemTitle">
                                      <div style="display:inline" class="idDisplay"><a onClick="javascript:syncItem(this)" name="33794">33794
            	-  
			</a></div>9R: Pulmonary ligament<div class="MetadataDisplay"></div>
                                      <div class="ChangeDisplay"></div>
                                      <div class="MetadataDisplay" style="display:inline">
         		&#xA0;<div class="nameDiv">
                                          <div class="name">name: </div>
                                          <div class="metadataTextValue">
                                            <div class="nameValue">LI_33794</div>
                                          </div>
                                        </div>
                                      </div>
                                      <div class="ChangeDisplay"></div>
                                      <div style="display:inline" class="MetadataDisplay"></div>
                                    </div>
                                  </div>
                                  <div class="Answer"><input type="checkbox" style="float:left;" name="33426.100004300" value="33866.100004300,10R: Hilar" onchange="&#xA;						javascript:SelectUnselectParents('q33426.100004300', this)&#xA;					" onblur="&#xA;						javascript:OnChoiceBlur('33866.100004300', this)&#xA;					"><div class="itemTitle">
                                      <div style="display:inline" class="idDisplay"><a onClick="javascript:syncItem(this)" name="33866">33866
            	-  
			</a></div>10R: Hilar<div class="MetadataDisplay"></div>
                                      <div class="ChangeDisplay"></div>
                                      <div class="MetadataDisplay" style="display:inline">
         		&#xA0;<div class="nameDiv">
                                          <div class="name">name: </div>
                                          <div class="metadataTextValue">
                                            <div class="nameValue">LI_33866</div>
                                          </div>
                                        </div>
                                      </div>
                                      <div class="ChangeDisplay"></div>
                                      <div style="display:inline" class="MetadataDisplay"></div>
                                    </div>
                                  </div>
                                  <div class="Answer"><input type="checkbox" style="float:left;" name="33426.100004300" value="33867.100004300,11R: Interlobar" onchange="&#xA;						javascript:SelectUnselectParents('q33426.100004300', this)&#xA;					" onblur="&#xA;						javascript:OnChoiceBlur('33867.100004300', this)&#xA;					"><div class="itemTitle">
                                      <div style="display:inline" class="idDisplay"><a onClick="javascript:syncItem(this)" name="33867">33867
            	-  
			</a></div>11R: Interlobar<div class="MetadataDisplay"></div>
                                      <div class="ChangeDisplay"></div>
                                      <div class="MetadataDisplay" style="display:inline">
         		&#xA0;<div class="nameDiv">
                                          <div class="name">name: </div>
                                          <div class="metadataTextValue">
                                            <div class="nameValue">LI_33867</div>
                                          </div>
                                        </div>
                                      </div>
                                      <div class="ChangeDisplay"></div>
                                      <div style="display:inline" class="MetadataDisplay"></div>
                                    </div>
                                  </div>
                                  <div class="Answer"><input type="checkbox" style="float:left;" name="33426.100004300" value="34147.100004300,12R: Lobar" onchange="&#xA;						javascript:SelectUnselectParents('q33426.100004300', this)&#xA;					" onblur="&#xA;						javascript:OnChoiceBlur('34147.100004300', this)&#xA;					"><div class="itemTitle">
                                      <div style="display:inline" class="idDisplay"><a onClick="javascript:syncItem(this)" name="34147">34147
            	-  
			</a></div>12R: Lobar<div class="MetadataDisplay"></div>
                                      <div class="ChangeDisplay"></div>
                                      <div class="MetadataDisplay" style="display:inline">
         		&#xA0;<div class="nameDiv">
                                          <div class="name">name: </div>
                                          <div class="metadataTextValue">
                                            <div class="nameValue">LI_34147</div>
                                          </div>
                                        </div>
                                      </div>
                                      <div class="ChangeDisplay"></div>
                                      <div style="display:inline" class="MetadataDisplay"></div>
                                    </div>
                                  </div>
                                  <div class="Answer"><input type="checkbox" style="float:left;" name="33426.100004300" value="34148.100004300,13R: Segmental" onchange="&#xA;						javascript:SelectUnselectParents('q33426.100004300', this)&#xA;					" onblur="&#xA;						javascript:OnChoiceBlur('34148.100004300', this)&#xA;					"><div class="itemTitle">
                                      <div style="display:inline" class="idDisplay"><a onClick="javascript:syncItem(this)" name="34148">34148
            	-  
			</a></div>13R: Segmental<div class="MetadataDisplay"></div>
                                      <div class="ChangeDisplay"></div>
                                      <div class="MetadataDisplay" style="display:inline">
         		&#xA0;<div class="nameDiv">
                                          <div class="name">name: </div>
                                          <div class="metadataTextValue">
                                            <div class="nameValue">LI_34148</div>
                                          </div>
                                        </div>
                                      </div>
                                      <div class="ChangeDisplay"></div>
                                      <div style="display:inline" class="MetadataDisplay"></div>
                                    </div>
                                  </div>
                                  <div class="Answer"><input type="checkbox" style="float:left;" name="33426.100004300" value="34258.100004300,14R: Subsegmental" onchange="&#xA;						javascript:SelectUnselectParents('q33426.100004300', this)&#xA;					" onblur="&#xA;						javascript:OnChoiceBlur('34258.100004300', this)&#xA;					"><div class="itemTitle">
                                      <div style="display:inline" class="idDisplay"><a onClick="javascript:syncItem(this)" name="34258">34258
            	-  
			</a></div>14R: Subsegmental<div class="MetadataDisplay"></div>
                                      <div class="ChangeDisplay"></div>
                                      <div class="MetadataDisplay" style="display:inline">
         		&#xA0;<div class="nameDiv">
                                          <div class="name">name: </div>
                                          <div class="metadataTextValue">
                                            <div class="nameValue">LI_34258</div>
                                          </div>
                                        </div>
                                      </div>
                                      <div class="ChangeDisplay"></div>
                                      <div style="display:inline" class="MetadataDisplay"></div>
                                    </div>
                                  </div>
                                  <div class="Answer"><input type="checkbox" style="float:left;" name="33426.100004300" value="34259.100004300,Other right nodes (specify)" onchange="&#xA;						javascript:SelectUnselectParents('q33426.100004300', this)&#xA;					" onblur="&#xA;						javascript:OnChoiceBlur('34259.100004300', this)&#xA;					"><div class="itemTitle">
                                      <div style="display:inline" class="idDisplay"><a onClick="javascript:syncItem(this)" name="34259">34259
            	-  
			</a></div>Other right nodes (specify)<div class="MetadataDisplay"></div>
                                      <div class="ChangeDisplay"></div>
                                      <div class="MetadataDisplay" style="display:inline">
         				&#xA0;<div class="reportText">
         			rptText:
         				</div>
                                        <div class="metadataTextValue">Right</div>
         		&#xA0;<div class="nameDiv">
                                          <div class="name">name: </div>
                                          <div class="metadataTextValue">
                                            <div class="nameValue">LI_34259</div>
                                          </div>
                                        </div>
                                      </div>
                                      <div class="ChangeDisplay"></div>
                                      <div style="display:inline" class="MetadataDisplay"></div>
                                      <div class="MetadataDisplay">
               &#xA0;<div class="responseRequired">respReq: </div>
         		&#xA0;<div class="ResponseUnits">dt: </div>
                                        <div class="metadataTextValue">string</div>
         		&#xA0;	</div>
                                      <div class="ChangeDisplay"></div><input type="text" class="AnswerTextBox" name="33426.100004300" value="" onkeydown="&#xA;							javascript:SelectChoiceOnKeyPress('34259.100004300', this, event)&#xA;						" onblur="&#xA;							javascript:SelectUnselectChoiceOnBlur('34259.100004300', this)&#xA;						"></div>
                                  </div>
                                  <div>
                                    <div class="ListNote">
                                      <div style="display:inline" class="idDisplay"><a onClick="javascript:syncItem(this)" name="34260">34260
            	-  
			</a></div>Central Nodal Stations Involved<div style="display:inline" class="MetadataDisplay">
                                        <div class="MetadataDisplay" style="display:inline">
						&#xA0;<div class="reportText">
							rptText:
						</div>
                                          <div class="metadataTextValue">{no text}</div>
					&#xA0;<div class="nameDiv">
                                            <div class="name">name: </div>
                                            <div class="metadataTextValue">
                                              <div class="nameValue">DI_34260</div>
                                            </div>
                                          </div>
                                        </div>
                                        <div class="ChangeDisplay"></div>
                                      </div>
                                    </div>
                                    <div style="clear:both;"></div>
                                  </div>
                                  <div class="Answer"><input type="checkbox" style="float:left;" name="33426.100004300" value="34261.100004300,3a: Pre-vascular" onchange="&#xA;						javascript:SelectUnselectParents('q33426.100004300', this)&#xA;					" onblur="&#xA;						javascript:OnChoiceBlur('34261.100004300', this)&#xA;					"><div class="itemTitle">
                                      <div style="display:inline" class="idDisplay"><a onClick="javascript:syncItem(this)" name="34261">34261
            	-  
			</a></div>3a: Pre-vascular<div class="MetadataDisplay"></div>
                                      <div class="ChangeDisplay"></div>
                                      <div class="MetadataDisplay" style="display:inline">
         		&#xA0;<div class="nameDiv">
                                          <div class="name">name: </div>
                                          <div class="metadataTextValue">
                                            <div class="nameValue">LI_34261</div>
                                          </div>
                                        </div>
                                      </div>
                                      <div class="ChangeDisplay"></div>
                                      <div style="display:inline" class="MetadataDisplay"></div>
                                    </div>
                                  </div>
                                  <div class="Answer"><input type="checkbox" style="float:left;" name="33426.100004300" value="34262.100004300,3p: Retrotracheal" onchange="&#xA;						javascript:SelectUnselectParents('q33426.100004300', this)&#xA;					" onblur="&#xA;						javascript:OnChoiceBlur('34262.100004300', this)&#xA;					"><div class="itemTitle">
                                      <div style="display:inline" class="idDisplay"><a onClick="javascript:syncItem(this)" name="34262">34262
            	-  
			</a></div>3p: Retrotracheal<div class="MetadataDisplay"></div>
                                      <div class="ChangeDisplay"></div>
                                      <div class="MetadataDisplay" style="display:inline">
         		&#xA0;<div class="nameDiv">
                                          <div class="name">name: </div>
                                          <div class="metadataTextValue">
                                            <div class="nameValue">LI_34262</div>
                                          </div>
                                        </div>
                                      </div>
                                      <div class="ChangeDisplay"></div>
                                      <div style="display:inline" class="MetadataDisplay"></div>
                                    </div>
                                  </div>
                                  <div class="Answer"><input type="checkbox" style="float:left;" name="33426.100004300" value="34263.100004300,7: Subcarinal" onchange="&#xA;						javascript:SelectUnselectParents('q33426.100004300', this)&#xA;					" onblur="&#xA;						javascript:OnChoiceBlur('34263.100004300', this)&#xA;					"><div class="itemTitle">
                                      <div style="display:inline" class="idDisplay"><a onClick="javascript:syncItem(this)" name="34263">34263
            	-  
			</a></div>7: Subcarinal<div class="MetadataDisplay"></div>
                                      <div class="ChangeDisplay"></div>
                                      <div class="MetadataDisplay" style="display:inline">
         		&#xA0;<div class="nameDiv">
                                          <div class="name">name: </div>
                                          <div class="metadataTextValue">
                                            <div class="nameValue">LI_34263</div>
                                          </div>
                                        </div>
                                      </div>
                                      <div class="ChangeDisplay"></div>
                                      <div style="display:inline" class="MetadataDisplay"></div>
                                    </div>
                                  </div>
                                  <div class="Answer"><input type="checkbox" style="float:left;" name="33426.100004300" value="34264.100004300,Other central nodes (specify)" onchange="&#xA;						javascript:SelectUnselectParents('q33426.100004300', this)&#xA;					" onblur="&#xA;						javascript:OnChoiceBlur('34264.100004300', this)&#xA;					"><div class="itemTitle">
                                      <div style="display:inline" class="idDisplay"><a onClick="javascript:syncItem(this)" name="34264">34264
            	-  
			</a></div>Other central nodes (specify)<div class="MetadataDisplay"></div>
                                      <div class="ChangeDisplay"></div>
                                      <div class="MetadataDisplay" style="display:inline">
         				&#xA0;<div class="reportText">
         			rptText:
         				</div>
                                        <div class="metadataTextValue">Central</div>
         		&#xA0;<div class="nameDiv">
                                          <div class="name">name: </div>
                                          <div class="metadataTextValue">
                                            <div class="nameValue">LI_34264</div>
                                          </div>
                                        </div>
                                      </div>
                                      <div class="ChangeDisplay"></div>
                                      <div style="display:inline" class="MetadataDisplay"></div>
                                      <div class="MetadataDisplay">
               &#xA0;<div class="responseRequired">respReq: </div>
         		&#xA0;<div class="ResponseUnits">dt: </div>
                                        <div class="metadataTextValue">string</div>
         		&#xA0;	</div>
                                      <div class="ChangeDisplay"></div><input type="text" class="AnswerTextBox" name="33426.100004300" value="" onkeydown="&#xA;							javascript:SelectChoiceOnKeyPress('34264.100004300', this, event)&#xA;						" onblur="&#xA;							javascript:SelectUnselectChoiceOnBlur('34264.100004300', this)&#xA;						"></div>
                                  </div>
                                  <div>
                                    <div class="ListNote">
                                      <div style="display:inline" class="idDisplay"><a onClick="javascript:syncItem(this)" name="34265">34265
            	-  
			</a></div>Left Nodal Stations Involved<div style="display:inline" class="MetadataDisplay">
                                        <div class="MetadataDisplay" style="display:inline">
						&#xA0;<div class="reportText">
							rptText:
						</div>
                                          <div class="metadataTextValue">{no text}</div>
					&#xA0;<div class="nameDiv">
                                            <div class="name">name: </div>
                                            <div class="metadataTextValue">
                                              <div class="nameValue">DI_34265</div>
                                            </div>
                                          </div>
                                        </div>
                                        <div class="ChangeDisplay"></div>
                                      </div>
                                    </div>
                                    <div style="clear:both;"></div>
                                  </div>
                                  <div class="Answer"><input type="checkbox" style="float:left;" name="33426.100004300" value="34266.100004300,1L: Low cervical, supraclavicular, scalene and sternal notch" onchange="&#xA;						javascript:SelectUnselectParents('q33426.100004300', this)&#xA;					" onblur="&#xA;						javascript:OnChoiceBlur('34266.100004300', this)&#xA;					"><div class="itemTitle">
                                      <div style="display:inline" class="idDisplay"><a onClick="javascript:syncItem(this)" name="34266">34266
            	-  
			</a></div>1L: Low cervical, supraclavicular, scalene and sternal notch<div class="MetadataDisplay"></div>
                                      <div class="ChangeDisplay"></div>
                                      <div class="MetadataDisplay" style="display:inline">
         		&#xA0;<div class="nameDiv">
                                          <div class="name">name: </div>
                                          <div class="metadataTextValue">
                                            <div class="nameValue">LI_34266</div>
                                          </div>
                                        </div>
                                      </div>
                                      <div class="ChangeDisplay"></div>
                                      <div style="display:inline" class="MetadataDisplay"></div>
                                    </div>
                                  </div>
                                  <div class="Answer"><input type="checkbox" style="float:left;" name="33426.100004300" value="34323.100004300,2L: Upper paratracheal" onchange="&#xA;						javascript:SelectUnselectParents('q33426.100004300', this)&#xA;					" onblur="&#xA;						javascript:OnChoiceBlur('34323.100004300', this)&#xA;					"><div class="itemTitle">
                                      <div style="display:inline" class="idDisplay"><a onClick="javascript:syncItem(this)" name="34323">34323
            	-  
			</a></div>2L: Upper paratracheal<div class="MetadataDisplay"></div>
                                      <div class="ChangeDisplay"></div>
                                      <div class="MetadataDisplay" style="display:inline">
         		&#xA0;<div class="nameDiv">
                                          <div class="name">name: </div>
                                          <div class="metadataTextValue">
                                            <div class="nameValue">LI_34323</div>
                                          </div>
                                        </div>
                                      </div>
                                      <div class="ChangeDisplay"></div>
                                      <div style="display:inline" class="MetadataDisplay"></div>
                                    </div>
                                  </div>
                                  <div class="Answer"><input type="checkbox" style="float:left;" name="33426.100004300" value="34324.100004300,4L: Lower paratracheal" onchange="&#xA;						javascript:SelectUnselectParents('q33426.100004300', this)&#xA;					" onblur="&#xA;						javascript:OnChoiceBlur('34324.100004300', this)&#xA;					"><div class="itemTitle">
                                      <div style="display:inline" class="idDisplay"><a onClick="javascript:syncItem(this)" name="34324">34324
            	-  
			</a></div>4L: Lower paratracheal<div class="MetadataDisplay"></div>
                                      <div class="ChangeDisplay"></div>
                                      <div class="MetadataDisplay" style="display:inline">
         		&#xA0;<div class="nameDiv">
                                          <div class="name">name: </div>
                                          <div class="metadataTextValue">
                                            <div class="nameValue">LI_34324</div>
                                          </div>
                                        </div>
                                      </div>
                                      <div class="ChangeDisplay"></div>
                                      <div style="display:inline" class="MetadataDisplay"></div>
                                    </div>
                                  </div>
                                  <div class="Answer"><input type="checkbox" style="float:left;" name="33426.100004300" value="34325.100004300,5: Subaortic / aortopulmonary (AP) / AP window" onchange="&#xA;						javascript:SelectUnselectParents('q33426.100004300', this)&#xA;					" onblur="&#xA;						javascript:OnChoiceBlur('34325.100004300', this)&#xA;					"><div class="itemTitle">
                                      <div style="display:inline" class="idDisplay"><a onClick="javascript:syncItem(this)" name="34325">34325
            	-  
			</a></div>5: Subaortic / aortopulmonary (AP) / AP window<div class="MetadataDisplay"></div>
                                      <div class="ChangeDisplay"></div>
                                      <div class="MetadataDisplay" style="display:inline">
         		&#xA0;<div class="nameDiv">
                                          <div class="name">name: </div>
                                          <div class="metadataTextValue">
                                            <div class="nameValue">LI_34325</div>
                                          </div>
                                        </div>
                                      </div>
                                      <div class="ChangeDisplay"></div>
                                      <div style="display:inline" class="MetadataDisplay"></div>
                                    </div>
                                  </div>
                                  <div class="Answer"><input type="checkbox" style="float:left;" name="33426.100004300" value="34326.100004300,6: Para-aortic (ascending aorta or phrenic)" onchange="&#xA;						javascript:SelectUnselectParents('q33426.100004300', this)&#xA;					" onblur="&#xA;						javascript:OnChoiceBlur('34326.100004300', this)&#xA;					"><div class="itemTitle">
                                      <div style="display:inline" class="idDisplay"><a onClick="javascript:syncItem(this)" name="34326">34326
            	-  
			</a></div>6: Para-aortic (ascending aorta or phrenic)<div class="MetadataDisplay"></div>
                                      <div class="ChangeDisplay"></div>
                                      <div class="MetadataDisplay" style="display:inline">
         		&#xA0;<div class="nameDiv">
                                          <div class="name">name: </div>
                                          <div class="metadataTextValue">
                                            <div class="nameValue">LI_34326</div>
                                          </div>
                                        </div>
                                      </div>
                                      <div class="ChangeDisplay"></div>
                                      <div style="display:inline" class="MetadataDisplay"></div>
                                    </div>
                                  </div>
                                  <div class="Answer"><input type="checkbox" style="float:left;" name="33426.100004300" value="34327.100004300,8L: Para-esophageal" onchange="&#xA;						javascript:SelectUnselectParents('q33426.100004300', this)&#xA;					" onblur="&#xA;						javascript:OnChoiceBlur('34327.100004300', this)&#xA;					"><div class="itemTitle">
                                      <div style="display:inline" class="idDisplay"><a onClick="javascript:syncItem(this)" name="34327">34327
            	-  
			</a></div>8L: Para-esophageal<div class="MetadataDisplay"></div>
                                      <div class="ChangeDisplay"></div>
                                      <div class="MetadataDisplay" style="display:inline">
         		&#xA0;<div class="nameDiv">
                                          <div class="name">name: </div>
                                          <div class="metadataTextValue">
                                            <div class="nameValue">LI_34327</div>
                                          </div>
                                        </div>
                                      </div>
                                      <div class="ChangeDisplay"></div>
                                      <div style="display:inline" class="MetadataDisplay"></div>
                                    </div>
                                  </div>
                                  <div class="Answer"><input type="checkbox" style="float:left;" name="33426.100004300" value="34328.100004300,9L: Pulmonary ligament" onchange="&#xA;						javascript:SelectUnselectParents('q33426.100004300', this)&#xA;					" onblur="&#xA;						javascript:OnChoiceBlur('34328.100004300', this)&#xA;					"><div class="itemTitle">
                                      <div style="display:inline" class="idDisplay"><a onClick="javascript:syncItem(this)" name="34328">34328
            	-  
			</a></div>9L: Pulmonary ligament<div class="MetadataDisplay"></div>
                                      <div class="ChangeDisplay"></div>
                                      <div class="MetadataDisplay" style="display:inline">
         		&#xA0;<div class="nameDiv">
                                          <div class="name">name: </div>
                                          <div class="metadataTextValue">
                                            <div class="nameValue">LI_34328</div>
                                          </div>
                                        </div>
                                      </div>
                                      <div class="ChangeDisplay"></div>
                                      <div style="display:inline" class="MetadataDisplay"></div>
                                    </div>
                                  </div>
                                  <div class="Answer"><input type="checkbox" style="float:left;" name="33426.100004300" value="34376.100004300,10L: Hilar" onchange="&#xA;						javascript:SelectUnselectParents('q33426.100004300', this)&#xA;					" onblur="&#xA;						javascript:OnChoiceBlur('34376.100004300', this)&#xA;					"><div class="itemTitle">
                                      <div style="display:inline" class="idDisplay"><a onClick="javascript:syncItem(this)" name="34376">34376
            	-  
			</a></div>10L: Hilar<div class="MetadataDisplay"></div>
                                      <div class="ChangeDisplay"></div>
                                      <div class="MetadataDisplay" style="display:inline">
         		&#xA0;<div class="nameDiv">
                                          <div class="name">name: </div>
                                          <div class="metadataTextValue">
                                            <div class="nameValue">LI_34376</div>
                                          </div>
                                        </div>
                                      </div>
                                      <div class="ChangeDisplay"></div>
                                      <div style="display:inline" class="MetadataDisplay"></div>
                                    </div>
                                  </div>
                                  <div class="Answer"><input type="checkbox" style="float:left;" name="33426.100004300" value="34377.100004300,11L: Interlobar" onchange="&#xA;						javascript:SelectUnselectParents('q33426.100004300', this)&#xA;					" onblur="&#xA;						javascript:OnChoiceBlur('34377.100004300', this)&#xA;					"><div class="itemTitle">
                                      <div style="display:inline" class="idDisplay"><a onClick="javascript:syncItem(this)" name="34377">34377
            	-  
			</a></div>11L: Interlobar<div class="MetadataDisplay"></div>
                                      <div class="ChangeDisplay"></div>
                                      <div class="MetadataDisplay" style="display:inline">
         		&#xA0;<div class="nameDiv">
                                          <div class="name">name: </div>
                                          <div class="metadataTextValue">
                                            <div class="nameValue">LI_34377</div>
                                          </div>
                                        </div>
                                      </div>
                                      <div class="ChangeDisplay"></div>
                                      <div style="display:inline" class="MetadataDisplay"></div>
                                    </div>
                                  </div>
                                  <div class="Answer"><input type="checkbox" style="float:left;" name="33426.100004300" value="34378.100004300,12L: Lobar" onchange="&#xA;						javascript:SelectUnselectParents('q33426.100004300', this)&#xA;					" onblur="&#xA;						javascript:OnChoiceBlur('34378.100004300', this)&#xA;					"><div class="itemTitle">
                                      <div style="display:inline" class="idDisplay"><a onClick="javascript:syncItem(this)" name="34378">34378
            	-  
			</a></div>12L: Lobar<div class="MetadataDisplay"></div>
                                      <div class="ChangeDisplay"></div>
                                      <div class="MetadataDisplay" style="display:inline">
         		&#xA0;<div class="nameDiv">
                                          <div class="name">name: </div>
                                          <div class="metadataTextValue">
                                            <div class="nameValue">LI_34378</div>
                                          </div>
                                        </div>
                                      </div>
                                      <div class="ChangeDisplay"></div>
                                      <div style="display:inline" class="MetadataDisplay"></div>
                                    </div>
                                  </div>
                                  <div class="Answer"><input type="checkbox" style="float:left;" name="33426.100004300" value="34379.100004300,13L: Segmental" onchange="&#xA;						javascript:SelectUnselectParents('q33426.100004300', this)&#xA;					" onblur="&#xA;						javascript:OnChoiceBlur('34379.100004300', this)&#xA;					"><div class="itemTitle">
                                      <div style="display:inline" class="idDisplay"><a onClick="javascript:syncItem(this)" name="34379">34379
            	-  
			</a></div>13L: Segmental<div class="MetadataDisplay"></div>
                                      <div class="ChangeDisplay"></div>
                                      <div class="MetadataDisplay" style="display:inline">
         		&#xA0;<div class="nameDiv">
                                          <div class="name">name: </div>
                                          <div class="metadataTextValue">
                                            <div class="nameValue">LI_34379</div>
                                          </div>
                                        </div>
                                      </div>
                                      <div class="ChangeDisplay"></div>
                                      <div style="display:inline" class="MetadataDisplay"></div>
                                    </div>
                                  </div>
                                  <div class="Answer"><input type="checkbox" style="float:left;" name="33426.100004300" value="34380.100004300,14L: Subsegmental" onchange="&#xA;						javascript:SelectUnselectParents('q33426.100004300', this)&#xA;					" onblur="&#xA;						javascript:OnChoiceBlur('34380.100004300', this)&#xA;					"><div class="itemTitle">
                                      <div style="display:inline" class="idDisplay"><a onClick="javascript:syncItem(this)" name="34380">34380
            	-  
			</a></div>14L: Subsegmental<div class="MetadataDisplay"></div>
                                      <div class="ChangeDisplay"></div>
                                      <div class="MetadataDisplay" style="display:inline">
         		&#xA0;<div class="nameDiv">
                                          <div class="name">name: </div>
                                          <div class="metadataTextValue">
                                            <div class="nameValue">LI_34380</div>
                                          </div>
                                        </div>
                                      </div>
                                      <div class="ChangeDisplay"></div>
                                      <div style="display:inline" class="MetadataDisplay"></div>
                                    </div>
                                  </div>
                                  <div class="Answer"><input type="checkbox" style="float:left;" name="33426.100004300" value="34381.100004300,Other left nodes (specify)" onchange="&#xA;						javascript:SelectUnselectParents('q33426.100004300', this)&#xA;					" onblur="&#xA;						javascript:OnChoiceBlur('34381.100004300', this)&#xA;					"><div class="itemTitle">
                                      <div style="display:inline" class="idDisplay"><a onClick="javascript:syncItem(this)" name="34381">34381
            	-  
			</a></div>Other left nodes (specify)<div class="MetadataDisplay"></div>
                                      <div class="ChangeDisplay"></div>
                                      <div class="MetadataDisplay" style="display:inline">
         				&#xA0;<div class="reportText">
         			rptText:
         				</div>
                                        <div class="metadataTextValue">Left</div>
         		&#xA0;<div class="nameDiv">
                                          <div class="name">name: </div>
                                          <div class="metadataTextValue">
                                            <div class="nameValue">LI_34381</div>
                                          </div>
                                        </div>
                                      </div>
                                      <div class="ChangeDisplay"></div>
                                      <div style="display:inline" class="MetadataDisplay"></div>
                                      <div class="MetadataDisplay">
               &#xA0;<div class="responseRequired">respReq: </div>
         		&#xA0;<div class="ResponseUnits">dt: </div>
                                        <div class="metadataTextValue">string</div>
         		&#xA0;	</div>
                                      <div class="ChangeDisplay"></div><input type="text" class="AnswerTextBox" name="33426.100004300" value="" onkeydown="&#xA;							javascript:SelectChoiceOnKeyPress('34381.100004300', this, event)&#xA;						" onblur="&#xA;							javascript:SelectUnselectChoiceOnBlur('34381.100004300', this)&#xA;						"></div>
                                  </div>
                                  <div class="Answer"><input type="checkbox" style="float:left;" name="33426.100004300" value="48539.100004300,Cannot be determined" onchange="&#xA;						javascript:SelectUnselectParents('q33426.100004300', this)&#xA;					" onblur="&#xA;						javascript:OnChoiceBlur('48539.100004300', this)&#xA;					"><div class="itemTitle">
                                      <div style="display:inline" class="idDisplay"><a onClick="javascript:syncItem(this)" name="48539">48539
            	-  
			</a></div>Cannot be determined<div class="MetadataDisplay"></div>
                                      <div class="ChangeDisplay"></div>
                                      <div class="MetadataDisplay" style="display:inline">
         		&#xA0;<div class="nameDiv">
                                          <div class="name">name: </div>
                                          <div class="metadataTextValue">
                                            <div class="nameValue">LI_48539</div>
                                          </div>
                                        </div>
                                      </div>
                                      <div class="ChangeDisplay"></div>
                                      <div style="display:inline" class="MetadataDisplay"></div>
                                      <div class="MetadataDisplay">
         		&#xA0;<div class="ResponseUnits">dt: </div>
                                        <div class="metadataTextValue">string</div>
         		&#xA0;	</div>
                                      <div class="ChangeDisplay"></div><input type="text" class="AnswerTextBox" name="33426.100004300" value="" onkeydown="&#xA;							javascript:SelectChoiceOnKeyPress('48539.100004300', this, event)&#xA;						" onblur="&#xA;							javascript:SelectUnselectChoiceOnBlur('48539.100004300', this)&#xA;						"></div>
                                  </div>
                                  <div style="clear:both;"></div>
                                </div>
                              </div>
                            </div>
                          </div>
                          <div class="question" id="q54482.100004300"><input type="hidden" class="TextBox" name="q54482.100004300" value="Extranodal Extension (Note J)"><input id="maxcardinality" type="hidden" value=""><div class="QuestionInListItem">
                              <div class="mustImplement"></div>
                              <div class="QuestionTitle collapsable_q">
                                <div class="notRequired">+</div>
                                <div style="display:inline" class="idDisplay"><a onClick="javascript:syncItem(this)" name="54482">54482
            	-  
			</a></div>Extranodal Extension (Note J)<div style="display:inline" class="MetadataDisplay">
                                  <div class="MetadataDisplay" style="display:inline-block">
               &#xA0;<div class="minCard">min: </div>
                                    <div class="metadataTextValue">0</div>
                                  </div>
                                  <div class="MetadataDisplay" style="display:inline">
               &#xA0;<div class="mustImplement">mI: </div>
                                    <div class="metadataTextValue">false</div>
         				&#xA0;<div class="reportText">
         			rptText:
         				</div>
                                    <div class="metadataTextValue">Extranodal Extension </div>
         		&#xA0;<div class="nameDiv">
                                      <div class="name">name: </div>
                                      <div class="metadataTextValue">
                                        <div class="nameValue">Q_54482</div>
                                      </div>
                                    </div>
                                  </div>
                                  <div class="ChangeDisplay"></div>
                                  <div class="MetadataDisplay"></div>
                                  <div class="ChangeDisplay"></div>
                                </div>
                              </div><a class="QuestionReset" onclick="resetAnswer(this);return false" href="&#xA;								#&#xA;							">(reset)</a><div class="command"></div>
                              <div style="clear:both;"></div>
                              <div class="Answer"><input type="radio" style="float:left" name="54482.100004300" value="15739.100004300,Not identified" onchange="&#xA;						javascript:SelectUnselectParents('q54482.100004300', this);&#xA;					" onblur="&#xA;						javascript:OnChoiceBlur('15739.100004300', this)&#xA;					"><div class="itemTitle">
                                  <div style="display:inline" class="idDisplay"><a onClick="javascript:syncItem(this)" name="15739">15739
            	-  
			</a></div>Not identified<div class="MetadataDisplay"></div>
                                  <div class="ChangeDisplay"></div>
                                  <div class="MetadataDisplay" style="display:inline">
         		&#xA0;<div class="nameDiv">
                                      <div class="name">name: </div>
                                      <div class="metadataTextValue">
                                        <div class="nameValue">LI_15739</div>
                                      </div>
                                    </div>
                                  </div>
                                  <div class="ChangeDisplay"></div>
                                  <div style="display:inline" class="MetadataDisplay"></div>
                                </div>
                              </div>
                              <div class="Answer"><input type="radio" style="float:left" name="54482.100004300" value="15740.100004300,Present" onchange="&#xA;						javascript:SelectUnselectParents('q54482.100004300', this);&#xA;					" onblur="&#xA;						javascript:OnChoiceBlur('15740.100004300', this)&#xA;					"><div class="itemTitle">
                                  <div style="display:inline" class="idDisplay"><a onClick="javascript:syncItem(this)" name="15740">15740
            	-  
			</a></div>Present<div class="MetadataDisplay"></div>
                                  <div class="ChangeDisplay"></div>
                                  <div class="MetadataDisplay" style="display:inline">
         		&#xA0;<div class="nameDiv">
                                      <div class="name">name: </div>
                                      <div class="metadataTextValue">
                                        <div class="nameValue">LI_15740</div>
                                      </div>
                                    </div>
                                  </div>
                                  <div class="ChangeDisplay"></div>
                                  <div style="display:inline" class="MetadataDisplay"></div>
                                </div>
                              </div>
                              <div class="Answer"><input type="radio" style="float:left" name="54482.100004300" value="54811.100004300,Cannot be determined" onchange="&#xA;						javascript:SelectUnselectParents('q54482.100004300', this);&#xA;					" onblur="&#xA;						javascript:OnChoiceBlur('54811.100004300', this)&#xA;					"><div class="itemTitle">
                                  <div style="display:inline" class="idDisplay"><a onClick="javascript:syncItem(this)" name="54811">54811
            	-  
			</a></div>Cannot be determined<div class="MetadataDisplay"></div>
                                  <div class="ChangeDisplay"></div>
                                  <div class="MetadataDisplay" style="display:inline">
         		&#xA0;<div class="nameDiv">
                                      <div class="name">name: </div>
                                      <div class="metadataTextValue">
                                        <div class="nameValue">LI_54811</div>
                                      </div>
                                    </div>
                                  </div>
                                  <div class="ChangeDisplay"></div>
                                  <div style="display:inline" class="MetadataDisplay"></div>
                                  <div class="MetadataDisplay">
         		&#xA0;<div class="ResponseUnits">dt: </div>
                                    <div class="metadataTextValue">string</div>
         		&#xA0;	</div>
                                  <div class="ChangeDisplay"></div><input type="text" class="AnswerTextBox" width="100" name="54482.100004300" value="" onkeydown="&#xA;							javascript:SelectChoiceOnKeyPress('54811.100004300', this, event)&#xA;						" onblur="&#xA;							javascript:SelectUnselectChoiceOnBlur('54811.100004300', this)&#xA;						">
					&#xA0;</div>
                              </div>
                              <div style="clear:both;"></div>
                            </div>
                          </div>
                          <div style="clear:both;"></div>
                        </div>
                      </div>
                      <div class="question" id="q33444.100004300"><input type="hidden" class="TextBox" name="q33444.100004300" value="Number of Lymph Nodes Examined"><input id="maxcardinality" type="hidden" value=""><div class="QuestionInListItem">
                          <div class="QuestionTitle collapsable_q">
                            <div style="display:inline" class="idDisplay"><a onClick="javascript:syncItem(this)" name="33444">33444
            	-  
			</a></div>Number of Lymph Nodes Examined<div style="display:inline" class="MetadataDisplay">
                              <div class="MetadataDisplay" style="display:inline-block"></div>
                              <div class="MetadataDisplay" style="display:inline">
         		&#xA0;<div class="nameDiv">
                                  <div class="name">name: </div>
                                  <div class="metadataTextValue">
                                    <div class="nameValue">Q_33444</div>
                                  </div>
                                </div>
                              </div>
                              <div class="ChangeDisplay"></div>
                              <div class="MetadataDisplay"></div>
                              <div class="ChangeDisplay"></div>
                            </div>
                          </div><a class="QuestionReset" onclick="resetAnswer(this);return false" href="&#xA;								#&#xA;							">(reset)</a><div class="command"></div>
                          <div style="clear:both;"></div>
                          <div class="Answer"><input type="radio" style="float:left" name="33444.100004300" value="7835.100004300,Specify number" onchange="&#xA;						javascript:SelectUnselectParents('q33444.100004300', this);&#xA;					" onblur="&#xA;						javascript:OnChoiceBlur('7835.100004300', this)&#xA;					"><div class="itemTitle">
                              <div style="display:inline" class="idDisplay"><a onClick="javascript:syncItem(this)" name="7835">7835
            	-  
			</a></div>Specify number<div class="MetadataDisplay"></div>
                              <div class="ChangeDisplay"></div>
                              <div class="MetadataDisplay" style="display:inline">
         				&#xA0;<div class="reportText">
         			rptText:
         				</div>
                                <div class="metadataTextValue">{no text}</div>
         		&#xA0;<div class="nameDiv">
                                  <div class="name">name: </div>
                                  <div class="metadataTextValue">
                                    <div class="nameValue">LI_7835</div>
                                  </div>
                                </div>
                              </div>
                              <div class="ChangeDisplay"></div>
                              <div style="display:inline" class="MetadataDisplay"></div>
                              <div class="MetadataDisplay">
               &#xA0;<div class="responseRequired">respReq: </div>
         		&#xA0;<div class="ResponseUnits">dt: </div>
                                <div class="metadataTextValue">integer</div>
         		&#xA0;	</div>
                              <div class="ChangeDisplay"></div><input type="text" class="AnswerTextBox" width="100" name="33444.100004300" value="" onkeydown="&#xA;							javascript:SelectChoiceOnKeyPress('7835.100004300', this, event)&#xA;						" onblur="&#xA;							javascript:SelectUnselectChoiceOnBlur('7835.100004300', this)&#xA;						">
					&#xA0;</div>
                          </div>
                          <div class="Answer"><input type="radio" style="float:left" name="33444.100004300" value="33445.100004300,At least" onchange="&#xA;						javascript:SelectUnselectParents('q33444.100004300', this);&#xA;					" onblur="&#xA;						javascript:OnChoiceBlur('33445.100004300', this)&#xA;					"><div class="itemTitle">
                              <div style="display:inline" class="idDisplay"><a onClick="javascript:syncItem(this)" name="33445">33445
            	-  
			</a></div>At least<div class="MetadataDisplay"></div>
                              <div class="ChangeDisplay"></div>
                              <div class="MetadataDisplay" style="display:inline">
         		&#xA0;<div class="nameDiv">
                                  <div class="name">name: </div>
                                  <div class="metadataTextValue">
                                    <div class="nameValue">LI_33445</div>
                                  </div>
                                </div>
                              </div>
                              <div class="ChangeDisplay"></div>
                              <div style="display:inline" class="MetadataDisplay"></div>
                              <div class="MetadataDisplay">
               &#xA0;<div class="responseRequired">respReq: </div>
         		&#xA0;<div class="ResponseUnits">dt: </div>
                                <div class="metadataTextValue">integer</div>
         		&#xA0;	</div>
                              <div class="ChangeDisplay"></div><input type="text" class="AnswerTextBox" width="100" name="33444.100004300" value="" onkeydown="&#xA;							javascript:SelectChoiceOnKeyPress('33445.100004300', this, event)&#xA;						" onblur="&#xA;							javascript:SelectUnselectChoiceOnBlur('33445.100004300', this)&#xA;						">
					&#xA0;</div>
                          </div>
                          <div class="Answer"><input type="radio" style="float:left" name="33444.100004300" value="34451.100004300,Number cannot be determined (explain)" onchange="&#xA;						javascript:SelectUnselectParents('q33444.100004300', this);&#xA;					" onblur="&#xA;						javascript:OnChoiceBlur('34451.100004300', this)&#xA;					"><div class="itemTitle">
                              <div style="display:inline" class="idDisplay"><a onClick="javascript:syncItem(this)" name="34451">34451
            	-  
			</a></div>Number cannot be determined (explain)<div class="MetadataDisplay"></div>
                              <div class="ChangeDisplay"></div>
                              <div class="MetadataDisplay" style="display:inline">
         				&#xA0;<div class="reportText">
         			rptText:
         				</div>
                                <div class="metadataTextValue">Number cannot be determined</div>
         		&#xA0;<div class="nameDiv">
                                  <div class="name">name: </div>
                                  <div class="metadataTextValue">
                                    <div class="nameValue">LI_34451</div>
                                  </div>
                                </div>
                              </div>
                              <div class="ChangeDisplay"></div>
                              <div style="display:inline" class="MetadataDisplay"></div>
                              <div class="MetadataDisplay">
               &#xA0;<div class="responseRequired">respReq: </div>
         		&#xA0;<div class="ResponseUnits">dt: </div>
                                <div class="metadataTextValue">string</div>
         		&#xA0;	</div>
                              <div class="ChangeDisplay"></div><input type="text" class="AnswerTextBox" width="100" name="33444.100004300" value="" onkeydown="&#xA;							javascript:SelectChoiceOnKeyPress('34451.100004300', this, event)&#xA;						" onblur="&#xA;							javascript:SelectUnselectChoiceOnBlur('34451.100004300', this)&#xA;						">
					&#xA0;</div>
                          </div>
                          <div style="clear:both;"></div>
                          <div class="question" id="q33450.100004300"><input type="hidden" class="TextBox" name="q33450.100004300" value="Nodal Stations Examined"><input id="maxcardinality" type="hidden" value=""><div class="QuestionInListItem">
                              <div class="QuestionTitle collapsable_q">
                                <div style="display:inline" class="idDisplay"><a onClick="javascript:syncItem(this)" name="33450">33450
            	-  
			</a></div>Nodal Stations Examined<div style="display:inline" class="MetadataDisplay">
                                  <div class="MetadataDisplay" style="display:inline-block"></div>
                                  <div class="MetadataDisplay" style="display:inline">
         		&#xA0;<div class="nameDiv">
                                      <div class="name">name: </div>
                                      <div class="metadataTextValue">
                                        <div class="nameValue">Q_33450</div>
                                      </div>
                                    </div>
                                  </div>
                                  <div class="ChangeDisplay"></div>
                                  <div class="MetadataDisplay"></div>
                                  <div class="ChangeDisplay"></div>
                                </div>
                              </div><a class="QuestionReset" onclick="resetAnswer(this);return false" href="&#xA;								#&#xA;							">(reset)</a><div class="command"></div>
                              <div style="clear:both;"></div>
                              <div>
                                <div class="ListNote">
                                  <div style="display:inline" class="idDisplay"><a onClick="javascript:syncItem(this)" name="33539">33539
            	-  
			</a></div>Right Nodal Stations Examined<div style="display:inline" class="MetadataDisplay">
                                    <div class="MetadataDisplay" style="display:inline">
						&#xA0;<div class="reportText">
							rptText:
						</div>
                                      <div class="metadataTextValue">{no text}</div>
					&#xA0;<div class="nameDiv">
                                        <div class="name">name: </div>
                                        <div class="metadataTextValue">
                                          <div class="nameValue">DI_33539</div>
                                        </div>
                                      </div>
                                    </div>
                                    <div class="ChangeDisplay"></div>
                                  </div>
                                </div>
                                <div style="clear:both;"></div>
                              </div>
                              <div class="Answer"><input type="checkbox" style="float:left;" name="33450.100004300" value="33424.100004300,1R: Low cervical, supraclavicular, scalene and sternal notch" onchange="&#xA;						javascript:SelectUnselectParents('q33450.100004300', this)&#xA;					" onblur="&#xA;						javascript:OnChoiceBlur('33424.100004300', this)&#xA;					"><div class="itemTitle">
                                  <div style="display:inline" class="idDisplay"><a onClick="javascript:syncItem(this)" name="33424">33424
            	-  
			</a></div>1R: Low cervical, supraclavicular, scalene and sternal notch<div class="MetadataDisplay"></div>
                                  <div class="ChangeDisplay"></div>
                                  <div class="MetadataDisplay" style="display:inline">
         		&#xA0;<div class="nameDiv">
                                      <div class="name">name: </div>
                                      <div class="metadataTextValue">
                                        <div class="nameValue">LI_33424</div>
                                      </div>
                                    </div>
                                  </div>
                                  <div class="ChangeDisplay"></div>
                                  <div style="display:inline" class="MetadataDisplay"></div>
                                </div>
                              </div>
                              <div class="Answer"><input type="checkbox" style="float:left;" name="33450.100004300" value="33425.100004300,2R: Upper paratracheal" onchange="&#xA;						javascript:SelectUnselectParents('q33450.100004300', this)&#xA;					" onblur="&#xA;						javascript:OnChoiceBlur('33425.100004300', this)&#xA;					"><div class="itemTitle">
                                  <div style="display:inline" class="idDisplay"><a onClick="javascript:syncItem(this)" name="33425">33425
            	-  
			</a></div>2R: Upper paratracheal<div class="MetadataDisplay"></div>
                                  <div class="ChangeDisplay"></div>
                                  <div class="MetadataDisplay" style="display:inline">
         		&#xA0;<div class="nameDiv">
                                      <div class="name">name: </div>
                                      <div class="metadataTextValue">
                                        <div class="nameValue">LI_33425</div>
                                      </div>
                                    </div>
                                  </div>
                                  <div class="ChangeDisplay"></div>
                                  <div style="display:inline" class="MetadataDisplay"></div>
                                </div>
                              </div>
                              <div class="Answer"><input type="checkbox" style="float:left;" name="33450.100004300" value="33427.100004300,4R: Lower paratracheal" onchange="&#xA;						javascript:SelectUnselectParents('q33450.100004300', this)&#xA;					" onblur="&#xA;						javascript:OnChoiceBlur('33427.100004300', this)&#xA;					"><div class="itemTitle">
                                  <div style="display:inline" class="idDisplay"><a onClick="javascript:syncItem(this)" name="33427">33427
            	-  
			</a></div>4R: Lower paratracheal<div class="MetadataDisplay"></div>
                                  <div class="ChangeDisplay"></div>
                                  <div class="MetadataDisplay" style="display:inline">
         		&#xA0;<div class="nameDiv">
                                      <div class="name">name: </div>
                                      <div class="metadataTextValue">
                                        <div class="nameValue">LI_33427</div>
                                      </div>
                                    </div>
                                  </div>
                                  <div class="ChangeDisplay"></div>
                                  <div style="display:inline" class="MetadataDisplay"></div>
                                </div>
                              </div>
                              <div class="Answer"><input type="checkbox" style="float:left;" name="33450.100004300" value="33431.100004300,8R: Para-esophageal (below carina)" onchange="&#xA;						javascript:SelectUnselectParents('q33450.100004300', this)&#xA;					" onblur="&#xA;						javascript:OnChoiceBlur('33431.100004300', this)&#xA;					"><div class="itemTitle">
                                  <div style="display:inline" class="idDisplay"><a onClick="javascript:syncItem(this)" name="33431">33431
            	-  
			</a></div>8R: Para-esophageal (below carina)<div class="MetadataDisplay"></div>
                                  <div class="ChangeDisplay"></div>
                                  <div class="MetadataDisplay" style="display:inline">
         		&#xA0;<div class="nameDiv">
                                      <div class="name">name: </div>
                                      <div class="metadataTextValue">
                                        <div class="nameValue">LI_33431</div>
                                      </div>
                                    </div>
                                  </div>
                                  <div class="ChangeDisplay"></div>
                                  <div style="display:inline" class="MetadataDisplay"></div>
                                </div>
                              </div>
                              <div class="Answer"><input type="checkbox" style="float:left;" name="33450.100004300" value="33432.100004300,9R: Pulmonary ligament" onchange="&#xA;						javascript:SelectUnselectParents('q33450.100004300', this)&#xA;					" onblur="&#xA;						javascript:OnChoiceBlur('33432.100004300', this)&#xA;					"><div class="itemTitle">
                                  <div style="display:inline" class="idDisplay"><a onClick="javascript:syncItem(this)" name="33432">33432
            	-  
			</a></div>9R: Pulmonary ligament<div class="MetadataDisplay"></div>
                                  <div class="ChangeDisplay"></div>
                                  <div class="MetadataDisplay" style="display:inline">
         		&#xA0;<div class="nameDiv">
                                      <div class="name">name: </div>
                                      <div class="metadataTextValue">
                                        <div class="nameValue">LI_33432</div>
                                      </div>
                                    </div>
                                  </div>
                                  <div class="ChangeDisplay"></div>
                                  <div style="display:inline" class="MetadataDisplay"></div>
                                </div>
                              </div>
                              <div class="Answer"><input type="checkbox" style="float:left;" name="33450.100004300" value="33433.100004300,10R: Hilar" onchange="&#xA;						javascript:SelectUnselectParents('q33450.100004300', this)&#xA;					" onblur="&#xA;						javascript:OnChoiceBlur('33433.100004300', this)&#xA;					"><div class="itemTitle">
                                  <div style="display:inline" class="idDisplay"><a onClick="javascript:syncItem(this)" name="33433">33433
            	-  
			</a></div>10R: Hilar<div class="MetadataDisplay"></div>
                                  <div class="ChangeDisplay"></div>
                                  <div class="MetadataDisplay" style="display:inline">
         		&#xA0;<div class="nameDiv">
                                      <div class="name">name: </div>
                                      <div class="metadataTextValue">
                                        <div class="nameValue">LI_33433</div>
                                      </div>
                                    </div>
                                  </div>
                                  <div class="ChangeDisplay"></div>
                                  <div style="display:inline" class="MetadataDisplay"></div>
                                </div>
                              </div>
                              <div class="Answer"><input type="checkbox" style="float:left;" name="33450.100004300" value="33434.100004300,11R: Interlobar" onchange="&#xA;						javascript:SelectUnselectParents('q33450.100004300', this)&#xA;					" onblur="&#xA;						javascript:OnChoiceBlur('33434.100004300', this)&#xA;					"><div class="itemTitle">
                                  <div style="display:inline" class="idDisplay"><a onClick="javascript:syncItem(this)" name="33434">33434
            	-  
			</a></div>11R: Interlobar<div class="MetadataDisplay"></div>
                                  <div class="ChangeDisplay"></div>
                                  <div class="MetadataDisplay" style="display:inline">
         		&#xA0;<div class="nameDiv">
                                      <div class="name">name: </div>
                                      <div class="metadataTextValue">
                                        <div class="nameValue">LI_33434</div>
                                      </div>
                                    </div>
                                  </div>
                                  <div class="ChangeDisplay"></div>
                                  <div style="display:inline" class="MetadataDisplay"></div>
                                </div>
                              </div>
                              <div class="Answer"><input type="checkbox" style="float:left;" name="33450.100004300" value="33435.100004300,12R: Lobar" onchange="&#xA;						javascript:SelectUnselectParents('q33450.100004300', this)&#xA;					" onblur="&#xA;						javascript:OnChoiceBlur('33435.100004300', this)&#xA;					"><div class="itemTitle">
                                  <div style="display:inline" class="idDisplay"><a onClick="javascript:syncItem(this)" name="33435">33435
            	-  
			</a></div>12R: Lobar<div class="MetadataDisplay"></div>
                                  <div class="ChangeDisplay"></div>
                                  <div class="MetadataDisplay" style="display:inline">
         		&#xA0;<div class="nameDiv">
                                      <div class="name">name: </div>
                                      <div class="metadataTextValue">
                                        <div class="nameValue">LI_33435</div>
                                      </div>
                                    </div>
                                  </div>
                                  <div class="ChangeDisplay"></div>
                                  <div style="display:inline" class="MetadataDisplay"></div>
                                </div>
                              </div>
                              <div class="Answer"><input type="checkbox" style="float:left;" name="33450.100004300" value="33436.100004300,13R: Segmental" onchange="&#xA;						javascript:SelectUnselectParents('q33450.100004300', this)&#xA;					" onblur="&#xA;						javascript:OnChoiceBlur('33436.100004300', this)&#xA;					"><div class="itemTitle">
                                  <div style="display:inline" class="idDisplay"><a onClick="javascript:syncItem(this)" name="33436">33436
            	-  
			</a></div>13R: Segmental<div class="MetadataDisplay"></div>
                                  <div class="ChangeDisplay"></div>
                                  <div class="MetadataDisplay" style="display:inline">
         		&#xA0;<div class="nameDiv">
                                      <div class="name">name: </div>
                                      <div class="metadataTextValue">
                                        <div class="nameValue">LI_33436</div>
                                      </div>
                                    </div>
                                  </div>
                                  <div class="ChangeDisplay"></div>
                                  <div style="display:inline" class="MetadataDisplay"></div>
                                </div>
                              </div>
                              <div class="Answer"><input type="checkbox" style="float:left;" name="33450.100004300" value="33437.100004300,14R: Subsegmental" onchange="&#xA;						javascript:SelectUnselectParents('q33450.100004300', this)&#xA;					" onblur="&#xA;						javascript:OnChoiceBlur('33437.100004300', this)&#xA;					"><div class="itemTitle">
                                  <div style="display:inline" class="idDisplay"><a onClick="javascript:syncItem(this)" name="33437">33437
            	-  
			</a></div>14R: Subsegmental<div class="MetadataDisplay"></div>
                                  <div class="ChangeDisplay"></div>
                                  <div class="MetadataDisplay" style="display:inline">
         		&#xA0;<div class="nameDiv">
                                      <div class="name">name: </div>
                                      <div class="metadataTextValue">
                                        <div class="nameValue">LI_33437</div>
                                      </div>
                                    </div>
                                  </div>
                                  <div class="ChangeDisplay"></div>
                                  <div style="display:inline" class="MetadataDisplay"></div>
                                </div>
                              </div>
                              <div class="Answer"><input type="checkbox" style="float:left;" name="33450.100004300" value="33720.100004300,Other right nodes (specify)" onchange="&#xA;						javascript:SelectUnselectParents('q33450.100004300', this)&#xA;					" onblur="&#xA;						javascript:OnChoiceBlur('33720.100004300', this)&#xA;					"><div class="itemTitle">
                                  <div style="display:inline" class="idDisplay"><a onClick="javascript:syncItem(this)" name="33720">33720
            	-  
			</a></div>Other right nodes (specify)<div class="MetadataDisplay"></div>
                                  <div class="ChangeDisplay"></div>
                                  <div class="MetadataDisplay" style="display:inline">
         				&#xA0;<div class="reportText">
         			rptText:
         				</div>
                                    <div class="metadataTextValue">Right</div>
         		&#xA0;<div class="nameDiv">
                                      <div class="name">name: </div>
                                      <div class="metadataTextValue">
                                        <div class="nameValue">LI_33720</div>
                                      </div>
                                    </div>
                                  </div>
                                  <div class="ChangeDisplay"></div>
                                  <div style="display:inline" class="MetadataDisplay"></div>
                                  <div class="MetadataDisplay">
               &#xA0;<div class="responseRequired">respReq: </div>
         		&#xA0;<div class="ResponseUnits">dt: </div>
                                    <div class="metadataTextValue">string</div>
         		&#xA0;	</div>
                                  <div class="ChangeDisplay"></div><input type="text" class="AnswerTextBox" name="33450.100004300" value="" onkeydown="&#xA;							javascript:SelectChoiceOnKeyPress('33720.100004300', this, event)&#xA;						" onblur="&#xA;							javascript:SelectUnselectChoiceOnBlur('33720.100004300', this)&#xA;						"></div>
                              </div>
                              <div>
                                <div class="ListNote">
                                  <div style="display:inline" class="idDisplay"><a onClick="javascript:syncItem(this)" name="33778">33778
            	-  
			</a></div>Central Nodal Stations Examined<div style="display:inline" class="MetadataDisplay">
                                    <div class="MetadataDisplay" style="display:inline">
						&#xA0;<div class="reportText">
							rptText:
						</div>
                                      <div class="metadataTextValue">{no text}</div>
					&#xA0;<div class="nameDiv">
                                        <div class="name">name: </div>
                                        <div class="metadataTextValue">
                                          <div class="nameValue">DI_33778</div>
                                        </div>
                                      </div>
                                    </div>
                                    <div class="ChangeDisplay"></div>
                                  </div>
                                </div>
                                <div style="clear:both;"></div>
                              </div>
                              <div class="Answer"><input type="checkbox" style="float:left;" name="33450.100004300" value="33801.100004300,3a: Pre-vascular" onchange="&#xA;						javascript:SelectUnselectParents('q33450.100004300', this)&#xA;					" onblur="&#xA;						javascript:OnChoiceBlur('33801.100004300', this)&#xA;					"><div class="itemTitle">
                                  <div style="display:inline" class="idDisplay"><a onClick="javascript:syncItem(this)" name="33801">33801
            	-  
			</a></div>3a: Pre-vascular<div class="MetadataDisplay"></div>
                                  <div class="ChangeDisplay"></div>
                                  <div class="MetadataDisplay" style="display:inline">
         		&#xA0;<div class="nameDiv">
                                      <div class="name">name: </div>
                                      <div class="metadataTextValue">
                                        <div class="nameValue">LI_33801</div>
                                      </div>
                                    </div>
                                  </div>
                                  <div class="ChangeDisplay"></div>
                                  <div style="display:inline" class="MetadataDisplay"></div>
                                </div>
                              </div>
                              <div class="Answer"><input type="checkbox" style="float:left;" name="33450.100004300" value="33446.100004300,3p: Retrotracheal" onchange="&#xA;						javascript:SelectUnselectParents('q33450.100004300', this)&#xA;					" onblur="&#xA;						javascript:OnChoiceBlur('33446.100004300', this)&#xA;					"><div class="itemTitle">
                                  <div style="display:inline" class="idDisplay"><a onClick="javascript:syncItem(this)" name="33446">33446
            	-  
			</a></div>3p: Retrotracheal<div class="MetadataDisplay"></div>
                                  <div class="ChangeDisplay"></div>
                                  <div class="MetadataDisplay" style="display:inline">
         		&#xA0;<div class="nameDiv">
                                      <div class="name">name: </div>
                                      <div class="metadataTextValue">
                                        <div class="nameValue">LI_33446</div>
                                      </div>
                                    </div>
                                  </div>
                                  <div class="ChangeDisplay"></div>
                                  <div style="display:inline" class="MetadataDisplay"></div>
                                </div>
                              </div>
                              <div class="Answer"><input type="checkbox" style="float:left;" name="33450.100004300" value="33430.100004300,7: Subcarinal" onchange="&#xA;						javascript:SelectUnselectParents('q33450.100004300', this)&#xA;					" onblur="&#xA;						javascript:OnChoiceBlur('33430.100004300', this)&#xA;					"><div class="itemTitle">
                                  <div style="display:inline" class="idDisplay"><a onClick="javascript:syncItem(this)" name="33430">33430
            	-  
			</a></div>7: Subcarinal<div class="MetadataDisplay"></div>
                                  <div class="ChangeDisplay"></div>
                                  <div class="MetadataDisplay" style="display:inline">
         		&#xA0;<div class="nameDiv">
                                      <div class="name">name: </div>
                                      <div class="metadataTextValue">
                                        <div class="nameValue">LI_33430</div>
                                      </div>
                                    </div>
                                  </div>
                                  <div class="ChangeDisplay"></div>
                                  <div style="display:inline" class="MetadataDisplay"></div>
                                </div>
                              </div>
                              <div class="Answer"><input type="checkbox" style="float:left;" name="33450.100004300" value="33729.100004300,Other central nodes (specify)" onchange="&#xA;						javascript:SelectUnselectParents('q33450.100004300', this)&#xA;					" onblur="&#xA;						javascript:OnChoiceBlur('33729.100004300', this)&#xA;					"><div class="itemTitle">
                                  <div style="display:inline" class="idDisplay"><a onClick="javascript:syncItem(this)" name="33729">33729
            	-  
			</a></div>Other central nodes (specify)<div class="MetadataDisplay"></div>
                                  <div class="ChangeDisplay"></div>
                                  <div class="MetadataDisplay" style="display:inline">
         				&#xA0;<div class="reportText">
         			rptText:
         				</div>
                                    <div class="metadataTextValue">Central</div>
         		&#xA0;<div class="nameDiv">
                                      <div class="name">name: </div>
                                      <div class="metadataTextValue">
                                        <div class="nameValue">LI_33729</div>
                                      </div>
                                    </div>
                                  </div>
                                  <div class="ChangeDisplay"></div>
                                  <div style="display:inline" class="MetadataDisplay"></div>
                                  <div class="MetadataDisplay">
               &#xA0;<div class="responseRequired">respReq: </div>
         		&#xA0;<div class="ResponseUnits">dt: </div>
                                    <div class="metadataTextValue">string</div>
         		&#xA0;	</div>
                                  <div class="ChangeDisplay"></div><input type="text" class="AnswerTextBox" name="33450.100004300" value="" onkeydown="&#xA;							javascript:SelectChoiceOnKeyPress('33729.100004300', this, event)&#xA;						" onblur="&#xA;							javascript:SelectUnselectChoiceOnBlur('33729.100004300', this)&#xA;						"></div>
                              </div>
                              <div>
                                <div class="ListNote">
                                  <div style="display:inline" class="idDisplay"><a onClick="javascript:syncItem(this)" name="33441">33441
            	-  
			</a></div>Left Nodal Stations Examined<div style="display:inline" class="MetadataDisplay">
                                    <div class="MetadataDisplay" style="display:inline">
						&#xA0;<div class="reportText">
							rptText:
						</div>
                                      <div class="metadataTextValue">{no text}</div>
					&#xA0;<div class="nameDiv">
                                        <div class="name">name: </div>
                                        <div class="metadataTextValue">
                                          <div class="nameValue">DI_33441</div>
                                        </div>
                                      </div>
                                    </div>
                                    <div class="ChangeDisplay"></div>
                                  </div>
                                </div>
                                <div style="clear:both;"></div>
                              </div>
                              <div class="Answer"><input type="checkbox" style="float:left;" name="33450.100004300" value="33442.100004300,1L: Low cervical, supraclavicular, scalene and sternal notch" onchange="&#xA;						javascript:SelectUnselectParents('q33450.100004300', this)&#xA;					" onblur="&#xA;						javascript:OnChoiceBlur('33442.100004300', this)&#xA;					"><div class="itemTitle">
                                  <div style="display:inline" class="idDisplay"><a onClick="javascript:syncItem(this)" name="33442">33442
            	-  
			</a></div>1L: Low cervical, supraclavicular, scalene and sternal notch<div class="MetadataDisplay"></div>
                                  <div class="ChangeDisplay"></div>
                                  <div class="MetadataDisplay" style="display:inline">
         		&#xA0;<div class="nameDiv">
                                      <div class="name">name: </div>
                                      <div class="metadataTextValue">
                                        <div class="nameValue">LI_33442</div>
                                      </div>
                                    </div>
                                  </div>
                                  <div class="ChangeDisplay"></div>
                                  <div style="display:inline" class="MetadataDisplay"></div>
                                </div>
                              </div>
                              <div class="Answer"><input type="checkbox" style="float:left;" name="33450.100004300" value="33438.100004300,2L: Upper paratracheal" onchange="&#xA;						javascript:SelectUnselectParents('q33450.100004300', this)&#xA;					" onblur="&#xA;						javascript:OnChoiceBlur('33438.100004300', this)&#xA;					"><div class="itemTitle">
                                  <div style="display:inline" class="idDisplay"><a onClick="javascript:syncItem(this)" name="33438">33438
            	-  
			</a></div>2L: Upper paratracheal<div class="MetadataDisplay"></div>
                                  <div class="ChangeDisplay"></div>
                                  <div class="MetadataDisplay" style="display:inline">
         		&#xA0;<div class="nameDiv">
                                      <div class="name">name: </div>
                                      <div class="metadataTextValue">
                                        <div class="nameValue">LI_33438</div>
                                      </div>
                                    </div>
                                  </div>
                                  <div class="ChangeDisplay"></div>
                                  <div style="display:inline" class="MetadataDisplay"></div>
                                </div>
                              </div>
                              <div class="Answer"><input type="checkbox" style="float:left;" name="33450.100004300" value="33439.100004300,4L: Lower paratracheal" onchange="&#xA;						javascript:SelectUnselectParents('q33450.100004300', this)&#xA;					" onblur="&#xA;						javascript:OnChoiceBlur('33439.100004300', this)&#xA;					"><div class="itemTitle">
                                  <div style="display:inline" class="idDisplay"><a onClick="javascript:syncItem(this)" name="33439">33439
            	-  
			</a></div>4L: Lower paratracheal<div class="MetadataDisplay"></div>
                                  <div class="ChangeDisplay"></div>
                                  <div class="MetadataDisplay" style="display:inline">
         		&#xA0;<div class="nameDiv">
                                      <div class="name">name: </div>
                                      <div class="metadataTextValue">
                                        <div class="nameValue">LI_33439</div>
                                      </div>
                                    </div>
                                  </div>
                                  <div class="ChangeDisplay"></div>
                                  <div style="display:inline" class="MetadataDisplay"></div>
                                </div>
                              </div>
                              <div class="Answer"><input type="checkbox" style="float:left;" name="33450.100004300" value="33656.100004300,5: Subaortic / aortopulmonary (AP) / AP window" onchange="&#xA;						javascript:SelectUnselectParents('q33450.100004300', this)&#xA;					" onblur="&#xA;						javascript:OnChoiceBlur('33656.100004300', this)&#xA;					"><div class="itemTitle">
                                  <div style="display:inline" class="idDisplay"><a onClick="javascript:syncItem(this)" name="33656">33656
            	-  
			</a></div>5: Subaortic / aortopulmonary (AP) / AP window<div class="MetadataDisplay"></div>
                                  <div class="ChangeDisplay"></div>
                                  <div class="MetadataDisplay" style="display:inline">
         		&#xA0;<div class="nameDiv">
                                      <div class="name">name: </div>
                                      <div class="metadataTextValue">
                                        <div class="nameValue">LI_33656</div>
                                      </div>
                                    </div>
                                  </div>
                                  <div class="ChangeDisplay"></div>
                                  <div style="display:inline" class="MetadataDisplay"></div>
                                </div>
                              </div>
                              <div class="Answer"><input type="checkbox" style="float:left;" name="33450.100004300" value="33649.100004300,6: Para-aortic (ascending aorta or phrenic)" onchange="&#xA;						javascript:SelectUnselectParents('q33450.100004300', this)&#xA;					" onblur="&#xA;						javascript:OnChoiceBlur('33649.100004300', this)&#xA;					"><div class="itemTitle">
                                  <div style="display:inline" class="idDisplay"><a onClick="javascript:syncItem(this)" name="33649">33649
            	-  
			</a></div>6: Para-aortic (ascending aorta or phrenic)<div class="MetadataDisplay"></div>
                                  <div class="ChangeDisplay"></div>
                                  <div class="MetadataDisplay" style="display:inline">
         		&#xA0;<div class="nameDiv">
                                      <div class="name">name: </div>
                                      <div class="metadataTextValue">
                                        <div class="nameValue">LI_33649</div>
                                      </div>
                                    </div>
                                  </div>
                                  <div class="ChangeDisplay"></div>
                                  <div style="display:inline" class="MetadataDisplay"></div>
                                </div>
                              </div>
                              <div class="Answer"><input type="checkbox" style="float:left;" name="33450.100004300" value="33670.100004300,8L: Para-esophageal" onchange="&#xA;						javascript:SelectUnselectParents('q33450.100004300', this)&#xA;					" onblur="&#xA;						javascript:OnChoiceBlur('33670.100004300', this)&#xA;					"><div class="itemTitle">
                                  <div style="display:inline" class="idDisplay"><a onClick="javascript:syncItem(this)" name="33670">33670
            	-  
			</a></div>8L: Para-esophageal<div class="MetadataDisplay"></div>
                                  <div class="ChangeDisplay"></div>
                                  <div class="MetadataDisplay" style="display:inline">
         		&#xA0;<div class="nameDiv">
                                      <div class="name">name: </div>
                                      <div class="metadataTextValue">
                                        <div class="nameValue">LI_33670</div>
                                      </div>
                                    </div>
                                  </div>
                                  <div class="ChangeDisplay"></div>
                                  <div style="display:inline" class="MetadataDisplay"></div>
                                </div>
                              </div>
                              <div class="Answer"><input type="checkbox" style="float:left;" name="33450.100004300" value="33677.100004300,9L: Pulmonary ligament" onchange="&#xA;						javascript:SelectUnselectParents('q33450.100004300', this)&#xA;					" onblur="&#xA;						javascript:OnChoiceBlur('33677.100004300', this)&#xA;					"><div class="itemTitle">
                                  <div style="display:inline" class="idDisplay"><a onClick="javascript:syncItem(this)" name="33677">33677
            	-  
			</a></div>9L: Pulmonary ligament<div class="MetadataDisplay"></div>
                                  <div class="ChangeDisplay"></div>
                                  <div class="MetadataDisplay" style="display:inline">
         		&#xA0;<div class="nameDiv">
                                      <div class="name">name: </div>
                                      <div class="metadataTextValue">
                                        <div class="nameValue">LI_33677</div>
                                      </div>
                                    </div>
                                  </div>
                                  <div class="ChangeDisplay"></div>
                                  <div style="display:inline" class="MetadataDisplay"></div>
                                </div>
                              </div>
                              <div class="Answer"><input type="checkbox" style="float:left;" name="33450.100004300" value="33440.100004300,10L: Hilar" onchange="&#xA;						javascript:SelectUnselectParents('q33450.100004300', this)&#xA;					" onblur="&#xA;						javascript:OnChoiceBlur('33440.100004300', this)&#xA;					"><div class="itemTitle">
                                  <div style="display:inline" class="idDisplay"><a onClick="javascript:syncItem(this)" name="33440">33440
            	-  
			</a></div>10L: Hilar<div class="MetadataDisplay"></div>
                                  <div class="ChangeDisplay"></div>
                                  <div class="MetadataDisplay" style="display:inline">
         		&#xA0;<div class="nameDiv">
                                      <div class="name">name: </div>
                                      <div class="metadataTextValue">
                                        <div class="nameValue">LI_33440</div>
                                      </div>
                                    </div>
                                  </div>
                                  <div class="ChangeDisplay"></div>
                                  <div style="display:inline" class="MetadataDisplay"></div>
                                </div>
                              </div>
                              <div class="Answer"><input type="checkbox" style="float:left;" name="33450.100004300" value="33684.100004300,11L: Interlobar" onchange="&#xA;						javascript:SelectUnselectParents('q33450.100004300', this)&#xA;					" onblur="&#xA;						javascript:OnChoiceBlur('33684.100004300', this)&#xA;					"><div class="itemTitle">
                                  <div style="display:inline" class="idDisplay"><a onClick="javascript:syncItem(this)" name="33684">33684
            	-  
			</a></div>11L: Interlobar<div class="MetadataDisplay"></div>
                                  <div class="ChangeDisplay"></div>
                                  <div class="MetadataDisplay" style="display:inline">
         		&#xA0;<div class="nameDiv">
                                      <div class="name">name: </div>
                                      <div class="metadataTextValue">
                                        <div class="nameValue">LI_33684</div>
                                      </div>
                                    </div>
                                  </div>
                                  <div class="ChangeDisplay"></div>
                                  <div style="display:inline" class="MetadataDisplay"></div>
                                </div>
                              </div>
                              <div class="Answer"><input type="checkbox" style="float:left;" name="33450.100004300" value="33691.100004300,12L: Lobar" onchange="&#xA;						javascript:SelectUnselectParents('q33450.100004300', this)&#xA;					" onblur="&#xA;						javascript:OnChoiceBlur('33691.100004300', this)&#xA;					"><div class="itemTitle">
                                  <div style="display:inline" class="idDisplay"><a onClick="javascript:syncItem(this)" name="33691">33691
            	-  
			</a></div>12L: Lobar<div class="MetadataDisplay"></div>
                                  <div class="ChangeDisplay"></div>
                                  <div class="MetadataDisplay" style="display:inline">
         		&#xA0;<div class="nameDiv">
                                      <div class="name">name: </div>
                                      <div class="metadataTextValue">
                                        <div class="nameValue">LI_33691</div>
                                      </div>
                                    </div>
                                  </div>
                                  <div class="ChangeDisplay"></div>
                                  <div style="display:inline" class="MetadataDisplay"></div>
                                </div>
                              </div>
                              <div class="Answer"><input type="checkbox" style="float:left;" name="33450.100004300" value="33698.100004300,13L: Segmental" onchange="&#xA;						javascript:SelectUnselectParents('q33450.100004300', this)&#xA;					" onblur="&#xA;						javascript:OnChoiceBlur('33698.100004300', this)&#xA;					"><div class="itemTitle">
                                  <div style="display:inline" class="idDisplay"><a onClick="javascript:syncItem(this)" name="33698">33698
            	-  
			</a></div>13L: Segmental<div class="MetadataDisplay"></div>
                                  <div class="ChangeDisplay"></div>
                                  <div class="MetadataDisplay" style="display:inline">
         		&#xA0;<div class="nameDiv">
                                      <div class="name">name: </div>
                                      <div class="metadataTextValue">
                                        <div class="nameValue">LI_33698</div>
                                      </div>
                                    </div>
                                  </div>
                                  <div class="ChangeDisplay"></div>
                                  <div style="display:inline" class="MetadataDisplay"></div>
                                </div>
                              </div>
                              <div class="Answer"><input type="checkbox" style="float:left;" name="33450.100004300" value="33705.100004300,14L: Subsegmental" onchange="&#xA;						javascript:SelectUnselectParents('q33450.100004300', this)&#xA;					" onblur="&#xA;						javascript:OnChoiceBlur('33705.100004300', this)&#xA;					"><div class="itemTitle">
                                  <div style="display:inline" class="idDisplay"><a onClick="javascript:syncItem(this)" name="33705">33705
            	-  
			</a></div>14L: Subsegmental<div class="MetadataDisplay"></div>
                                  <div class="ChangeDisplay"></div>
                                  <div class="MetadataDisplay" style="display:inline">
         		&#xA0;<div class="nameDiv">
                                      <div class="name">name: </div>
                                      <div class="metadataTextValue">
                                        <div class="nameValue">LI_33705</div>
                                      </div>
                                    </div>
                                  </div>
                                  <div class="ChangeDisplay"></div>
                                  <div style="display:inline" class="MetadataDisplay"></div>
                                </div>
                              </div>
                              <div class="Answer"><input type="checkbox" style="float:left;" name="33450.100004300" value="33712.100004300,Other left nodes (specify)" onchange="&#xA;						javascript:SelectUnselectParents('q33450.100004300', this)&#xA;					" onblur="&#xA;						javascript:OnChoiceBlur('33712.100004300', this)&#xA;					"><div class="itemTitle">
                                  <div style="display:inline" class="idDisplay"><a onClick="javascript:syncItem(this)" name="33712">33712
            	-  
			</a></div>Other left nodes (specify)<div class="MetadataDisplay"></div>
                                  <div class="ChangeDisplay"></div>
                                  <div class="MetadataDisplay" style="display:inline">
         				&#xA0;<div class="reportText">
         			rptText:
         				</div>
                                    <div class="metadataTextValue">Left</div>
         		&#xA0;<div class="nameDiv">
                                      <div class="name">name: </div>
                                      <div class="metadataTextValue">
                                        <div class="nameValue">LI_33712</div>
                                      </div>
                                    </div>
                                  </div>
                                  <div class="ChangeDisplay"></div>
                                  <div style="display:inline" class="MetadataDisplay"></div>
                                  <div class="MetadataDisplay">
               &#xA0;<div class="responseRequired">respReq: </div>
         		&#xA0;<div class="ResponseUnits">dt: </div>
                                    <div class="metadataTextValue">string</div>
         		&#xA0;	</div>
                                  <div class="ChangeDisplay"></div><input type="text" class="AnswerTextBox" name="33450.100004300" value="" onkeydown="&#xA;							javascript:SelectChoiceOnKeyPress('33712.100004300', this, event)&#xA;						" onblur="&#xA;							javascript:SelectUnselectChoiceOnBlur('33712.100004300', this)&#xA;						"></div>
                              </div>
                              <div class="Answer"><input type="checkbox" style="float:left;" name="33450.100004300" value="55956.100004300,Cannot be determined" onchange="&#xA;						javascript:SelectUnselectParents('q33450.100004300', this)&#xA;					" onblur="&#xA;						javascript:OnChoiceBlur('55956.100004300', this)&#xA;					"><div class="itemTitle">
                                  <div style="display:inline" class="idDisplay"><a onClick="javascript:syncItem(this)" name="55956">55956
            	-  
			</a></div>Cannot be determined<div class="MetadataDisplay"></div>
                                  <div class="ChangeDisplay"></div>
                                  <div class="MetadataDisplay" style="display:inline">
         		&#xA0;<div class="nameDiv">
                                      <div class="name">name: </div>
                                      <div class="metadataTextValue">
                                        <div class="nameValue">LI_55956</div>
                                      </div>
                                    </div>
                                  </div>
                                  <div class="ChangeDisplay"></div>
                                  <div style="display:inline" class="MetadataDisplay"></div>
                                  <div class="MetadataDisplay">
         		&#xA0;<div class="ResponseUnits">dt: </div>
                                    <div class="metadataTextValue">string</div>
         		&#xA0;	</div>
                                  <div class="ChangeDisplay"></div><input type="text" class="AnswerTextBox" name="33450.100004300" value="" onkeydown="&#xA;							javascript:SelectChoiceOnKeyPress('55956.100004300', this, event)&#xA;						" onblur="&#xA;							javascript:SelectUnselectChoiceOnBlur('55956.100004300', this)&#xA;						"></div>
                              </div>
                              <div style="clear:both;"></div>
                            </div>
                          </div>
                        </div>
                      </div>
                      <div style="clear:both;"></div>
                    </div>
                  </div>
                  <div style="clear:both"></div>
                </td>
              </tr>
            </table>
          </div>
          <div id="s1739.100004300"><input id="maxcardinality" type="hidden" value=""><table class="HeaderTable" align="center" id="s1739.100004300">
              <tr>
                <td>
                  <div class="TopHeader collapsable">
                    <div style="display:inline" class="idDisplay"><a onClick="javascript:syncItem(this)" name="1739">1739
            	-  
			</a></div>PATHOLOGIC STAGE CLASSIFICATION (pTNM, AJCC 8th Edition) (Note J)<div style="display:inline" class="MetadataDisplay">
                      <div class="MetadataDisplay" style="display:inline">
						&#xA0;<div class="reportText">
							rptText:
						</div>PATHOLOGIC STAGE CLASSIFICATION (pTNM, AJCC 8th Edition)
					&#xA0;<div class="nameDiv">
                          <div class="name">name: </div>
                          <div class="nameValue">S_1739</div>
                        </div>
                      </div>
                      <div class="ChangeDisplay"></div>
                    </div>
                  </div>
                  <div style="clear:both"></div>
                  <div>
                    <div class="NoteText">
                      <div style="display:inline" class="idDisplay"><a onClick="javascript:syncItem(this)" name="59520">59520
            	-  
			</a></div>Note: Reporting of pT, pN, and (when applicable) pM categories is based on information available to the pathologist at the time the report is issued. As per the AJCC (Chapter 1, 8th Ed.) it is the managing physician&#x2019;s responsibility to establish the final pathologic stage based upon all pertinent information, including but potentially not limited to this pathology report.<div style="display:inline" class="MetadataDisplay">
                        <div class="MetadataDisplay" style="display:inline">
						&#xA0;<div class="reportText">
							rptText:
						</div>
                          <div class="metadataTextValue">Note: Reporting of pT, pN, and (when applicable) pM categories is based on information available to the pathologist at the time the report is issued. As per the AJCC (Chapter 1, 8th Ed.) it is the managing physician&#x2019;s responsibility to establish the final pathologic stage based upon all pertinent information, including but potentially not limited to this pathology report.</div>
					&#xA0;<div class="nameDiv">
                            <div class="name">name: </div>
                            <div class="metadataTextValue">
                              <div class="nameValue">DI_59520</div>
                            </div>
                          </div>
                        </div>
                        <div class="ChangeDisplay"></div>
                      </div>
                    </div>
                    <div style="clear:both;"></div>
                  </div>
                  <div class="question" id="q15994.100004300"><input type="hidden" class="TextBox" name="q15994.100004300" value="?TNM Descriptors"><input id="maxcardinality" type="hidden" value=""><div class="QuestionInSection">
                      <div class="QuestionTitle collapsable_q">
                        <div style="display:inline" class="idDisplay"><a onClick="javascript:syncItem(this)" name="15994">15994
            	-  
			</a></div>?TNM Descriptors<div style="display:inline-block" class="metadata"></div>
                        <div class="MetadataDisplay" style="display:inline-block"></div>
                        <div class="MetadataDisplay" style="display:inline">
         				&#xA0;<div class="reportText">
         			rptText:
         				</div>
                          <div class="metadataTextValue">TNM Descriptors</div>
         		&#xA0;<div class="nameDiv">
                            <div class="name">name: </div>
                            <div class="metadataTextValue">
                              <div class="nameValue">Q_15994</div>
                            </div>
                          </div>
                        </div>
                        <div class="ChangeDisplay"></div>
                        <div class="MetadataDisplay"></div>
                        <div class="ChangeDisplay"></div>
                      </div><a class="QuestionReset" onclick="resetAnswer(this);return false" href="&#xA;								#&#xA;							">(reset)</a><div class="command"></div>
                      <div style="clear:both;"></div>
                      <div class="Answer"><input type="checkbox" style="float:left;" name="15994.100004300" value="2027.100004300,?Not applicable" onchange="&#xA;						javascript:SelectUnselectParents('q15994.100004300', this)&#xA;					" onblur="&#xA;						javascript:OnChoiceBlur('2027.100004300', this)&#xA;					"><div class="itemTitle">
                          <div style="display:inline" class="idDisplay"><a onClick="javascript:syncItem(this)" name="2027">2027
            	-  
			</a></div>?Not applicable<div class="MetadataDisplay">
               &#xA0;<div class="omitWhenSel">ows </div>
               &#xA0;<div class="sds">sds </div>
                          </div>
                          <div class="ChangeDisplay"></div>
                          <div class="MetadataDisplay" style="display:inline">
         				&#xA0;<div class="reportText">
         			rptText:
         				</div>
                            <div class="metadataTextValue">Not applicable</div>
         		&#xA0;<div class="nameDiv">
                              <div class="name">name: </div>
                              <div class="metadataTextValue">
                                <div class="nameValue">LI_2027</div>
                              </div>
                            </div>
                          </div>
                          <div class="ChangeDisplay"></div>
                          <div style="display:inline" class="MetadataDisplay"></div>
                          <div class="MetadataDisplay">
         		&#xA0;<div class="ResponseUnits">dt: </div>
                            <div class="metadataTextValue">string</div>
         		&#xA0;	</div>
                          <div class="ChangeDisplay"></div><input type="text" class="AnswerTextBox" name="15994.100004300" value="" onkeydown="&#xA;							javascript:SelectChoiceOnKeyPress('2027.100004300', this, event)&#xA;						" onblur="&#xA;							javascript:SelectUnselectChoiceOnBlur('2027.100004300', this)&#xA;						"></div>
                      </div>
                      <div>
                        <div class="ListNote">
                          <div style="display:inline" class="idDisplay"><a onClick="javascript:syncItem(this)" name="43572">43572
            	-  
			</a></div># Note: The suffix m (or a specific number) should only be used in the setting of multifocal ground-glass / lepidic nodules that histologically present as adenocarcinomas with prominent lepidic component. Multiple primary lung cancers showing different histologic type or different morphology based on comprehensive histologic subtyping are staged as independent tumors without m suffix.<div style="display:inline" class="MetadataDisplay">
                            <div class="MetadataDisplay" style="display:inline">
						&#xA0;<div class="reportText">
							rptText:
						</div>
                              <div class="metadataTextValue">{no text}</div>
					&#xA0;<div class="nameDiv">
                                <div class="name">name: </div>
                                <div class="metadataTextValue">
                                  <div class="nameValue">DI_43572</div>
                                </div>
                              </div>
                            </div>
                            <div class="ChangeDisplay"></div>
                          </div>
                        </div>
                        <div style="clear:both;"></div>
                      </div>
                      <div class="Answer"><input type="checkbox" style="float:left;" name="15994.100004300" value="15995.100004300,m (multiple primary tumors)#" onchange="&#xA;						javascript:SelectUnselectParents('q15994.100004300', this)&#xA;					" onblur="&#xA;						javascript:OnChoiceBlur('15995.100004300', this)&#xA;					"><div class="itemTitle">
                          <div style="display:inline" class="idDisplay"><a onClick="javascript:syncItem(this)" name="15995">15995
            	-  
			</a></div>m (multiple primary tumors)#<div class="MetadataDisplay"></div>
                          <div class="ChangeDisplay"></div>
                          <div class="MetadataDisplay" style="display:inline">
         				&#xA0;<div class="reportText">
         			rptText:
         				</div>
                            <div class="metadataTextValue">m (multiple primary tumors)</div>
         		&#xA0;<div class="nameDiv">
                              <div class="name">name: </div>
                              <div class="metadataTextValue">
                                <div class="nameValue">LI_15995</div>
                              </div>
                            </div>
                          </div>
                          <div class="ChangeDisplay"></div>
                          <div style="display:inline" class="MetadataDisplay"></div>
                        </div>
                      </div>
                      <div class="Answer"><input type="checkbox" style="float:left;" name="15994.100004300" value="15993.100004300,r (recurrent)" onchange="&#xA;						javascript:SelectUnselectParents('q15994.100004300', this)&#xA;					" onblur="&#xA;						javascript:OnChoiceBlur('15993.100004300', this)&#xA;					"><div class="itemTitle">
                          <div style="display:inline" class="idDisplay"><a onClick="javascript:syncItem(this)" name="15993">15993
            	-  
			</a></div>r (recurrent)<div class="MetadataDisplay"></div>
                          <div class="ChangeDisplay"></div>
                          <div class="MetadataDisplay" style="display:inline">
         		&#xA0;<div class="nameDiv">
                              <div class="name">name: </div>
                              <div class="metadataTextValue">
                                <div class="nameValue">LI_15993</div>
                              </div>
                            </div>
                          </div>
                          <div class="ChangeDisplay"></div>
                          <div style="display:inline" class="MetadataDisplay"></div>
                        </div>
                      </div>
                      <div class="Answer"><input type="checkbox" style="float:left;" name="15994.100004300" value="15992.100004300,y (post-treatment)" onchange="&#xA;						javascript:SelectUnselectParents('q15994.100004300', this)&#xA;					" onblur="&#xA;						javascript:OnChoiceBlur('15992.100004300', this)&#xA;					"><div class="itemTitle">
                          <div style="display:inline" class="idDisplay"><a onClick="javascript:syncItem(this)" name="15992">15992
            	-  
			</a></div>y (post-treatment)<div class="MetadataDisplay"></div>
                          <div class="ChangeDisplay"></div>
                          <div class="MetadataDisplay" style="display:inline">
         		&#xA0;<div class="nameDiv">
                              <div class="name">name: </div>
                              <div class="metadataTextValue">
                                <div class="nameValue">LI_15992</div>
                              </div>
                            </div>
                          </div>
                          <div class="ChangeDisplay"></div>
                          <div style="display:inline" class="MetadataDisplay"></div>
                        </div>
                      </div>
                      <div style="clear:both;"></div>
                    </div>
                  </div>
                  <div class="question" id="q42713.100004300"><input type="hidden" class="TextBox" name="q42713.100004300" value="Primary Tumor (pT)"><input id="maxcardinality" type="hidden" value=""><div class="QuestionInSection">
                      <div class="QuestionTitle collapsable_q">
                        <div style="display:inline" class="idDisplay"><a onClick="javascript:syncItem(this)" name="42713">42713
            	-  
			</a></div>Primary Tumor (pT)<div style="display:inline-block" class="metadata"></div>
                        <div class="MetadataDisplay" style="display:inline-block"></div>
                        <div class="MetadataDisplay" style="display:inline">
         		&#xA0;<div class="nameDiv">
                            <div class="name">name: </div>
                            <div class="metadataTextValue">
                              <div class="nameValue">Q_42713</div>
                            </div>
                          </div>
                        </div>
                        <div class="ChangeDisplay"></div>
                        <div class="MetadataDisplay"></div>
                        <div class="ChangeDisplay"></div>
                      </div><a class="QuestionReset" onclick="resetAnswer(this);return false" href="&#xA;								#&#xA;							">(reset)</a><div class="command"></div>
                      <div style="clear:both;"></div>
                      <div class="Answer"><input type="radio" style="float:left" name="42713.100004300" value="1741.100004300,pTX: Primary tumor cannot be assessed, or tumor proven by presence of malignant cells in sputum or bronchial washings but not visualized by imaging or bronchoscopy" onchange="&#xA;						javascript:SelectUnselectParents('q42713.100004300', this);&#xA;					" onblur="&#xA;						javascript:OnChoiceBlur('1741.100004300', this)&#xA;					"><div class="itemTitle">
                          <div style="display:inline" class="idDisplay"><a onClick="javascript:syncItem(this)" name="1741">1741
            	-  
			</a></div>pTX: Primary tumor cannot be assessed, or tumor proven by presence of malignant cells in sputum or bronchial washings but not visualized by imaging or bronchoscopy<div class="MetadataDisplay"></div>
                          <div class="ChangeDisplay"></div>
                          <div class="MetadataDisplay" style="display:inline">
         				&#xA0;<div class="reportText">
         			rptText:
         				</div>
                            <div class="metadataTextValue">pTX</div>
         		&#xA0;<div class="nameDiv">
                              <div class="name">name: </div>
                              <div class="metadataTextValue">
                                <div class="nameValue">LI_1741</div>
                              </div>
                            </div>
                          </div>
                          <div class="ChangeDisplay"></div>
                          <div style="display:inline" class="MetadataDisplay"></div>
                        </div>
                      </div>
                      <div class="Answer"><input type="radio" style="float:left" name="42713.100004300" value="1742.100004300,pT0: No evidence of primary tumor" onchange="&#xA;						javascript:SelectUnselectParents('q42713.100004300', this);&#xA;					" onblur="&#xA;						javascript:OnChoiceBlur('1742.100004300', this)&#xA;					"><div class="itemTitle">
                          <div style="display:inline" class="idDisplay"><a onClick="javascript:syncItem(this)" name="1742">1742
            	-  
			</a></div>pT0: No evidence of primary tumor<div class="MetadataDisplay"></div>
                          <div class="ChangeDisplay"></div>
                          <div class="MetadataDisplay" style="display:inline">
         				&#xA0;<div class="reportText">
         			rptText:
         				</div>
                            <div class="metadataTextValue">pT0</div>
         		&#xA0;<div class="nameDiv">
                              <div class="name">name: </div>
                              <div class="metadataTextValue">
                                <div class="nameValue">LI_1742</div>
                              </div>
                            </div>
                          </div>
                          <div class="ChangeDisplay"></div>
                          <div style="display:inline" class="MetadataDisplay"></div>
                        </div>
                      </div>
                      <div class="Answer"><input type="radio" style="float:left" name="42713.100004300" value="40209.100004300,pTis (SCIS): Squamous cell carcinoma in situ (SCIS)" onchange="&#xA;						javascript:SelectUnselectParents('q42713.100004300', this);&#xA;					" onblur="&#xA;						javascript:OnChoiceBlur('40209.100004300', this)&#xA;					"><div class="itemTitle">
                          <div style="display:inline" class="idDisplay"><a onClick="javascript:syncItem(this)" name="40209">40209
            	-  
			</a></div>pTis (SCIS): Squamous cell carcinoma in situ (SCIS)<div class="MetadataDisplay"></div>
                          <div class="ChangeDisplay"></div>
                          <div class="MetadataDisplay" style="display:inline">
         				&#xA0;<div class="reportText">
         			rptText:
         				</div>
                            <div class="metadataTextValue">pTis (SCIS)</div>
         		&#xA0;<div class="nameDiv">
                              <div class="name">name: </div>
                              <div class="metadataTextValue">
                                <div class="nameValue">LI_40209</div>
                              </div>
                            </div>
                          </div>
                          <div class="ChangeDisplay"></div>
                          <div style="display:inline" class="MetadataDisplay"></div>
                        </div>
                      </div>
                      <div class="Answer"><input type="radio" style="float:left" name="42713.100004300" value="53855.100004300,pTis (AIS): Adenocarcinoma in situ (AIS): adenocarcinoma with pure lepidic pattern, <= 3 cm in greatest dimension" onchange="&#xA;						javascript:SelectUnselectParents('q42713.100004300', this);&#xA;					" onblur="&#xA;						javascript:OnChoiceBlur('53855.100004300', this)&#xA;					"><div class="itemTitle">
                          <div style="display:inline" class="idDisplay"><a onClick="javascript:syncItem(this)" name="53855">53855
            	-  
			</a></div>pTis (AIS): Adenocarcinoma in situ (AIS): adenocarcinoma with pure lepidic pattern, &lt;= 3 cm in greatest dimension<div class="MetadataDisplay"></div>
                          <div class="ChangeDisplay"></div>
                          <div class="MetadataDisplay" style="display:inline">
         				&#xA0;<div class="reportText">
         			rptText:
         				</div>
                            <div class="metadataTextValue">pTis (AIS)</div>
         		&#xA0;<div class="nameDiv">
                              <div class="name">name: </div>
                              <div class="metadataTextValue">
                                <div class="nameValue">LI_53855</div>
                              </div>
                            </div>
                          </div>
                          <div class="ChangeDisplay"></div>
                          <div style="display:inline" class="MetadataDisplay"></div>
                        </div>
                      </div>
                      <div>
                        <div class="ListNote">
                          <div style="display:inline" class="idDisplay"><a onClick="javascript:syncItem(this)" name="43216">43216
            	-  
			</a></div>pT1: Tumor &lt;= 3 cm in greatest dimension, surrounded by lung or visceral pleura, without bronchoscopic evidence of invasion more proximal than the lobar bronchus (i.e., not in the main bronchus)<div style="display:inline" class="MetadataDisplay">
                            <div class="MetadataDisplay" style="display:inline">
						&#xA0;<div class="reportText">
							rptText:
						</div>
                              <div class="metadataTextValue">{no text}</div>
					&#xA0;<div class="nameDiv">
                                <div class="name">name: </div>
                                <div class="metadataTextValue">
                                  <div class="nameValue">DI_43216</div>
                                </div>
                              </div>
                            </div>
                            <div class="ChangeDisplay"></div>
                          </div>
                        </div>
                        <div style="clear:both;"></div>
                      </div>
                      <div class="Answer"><input type="radio" style="float:left" name="42713.100004300" value="53734.100004300,pT1mi: Minimally invasive adenocarcinoma: adenocarcinoma (<= 3 cm in greatest dimension) with a predominantly lepidic pattern and <= 5 mm invasion in greatest dimension" onchange="&#xA;						javascript:SelectUnselectParents('q42713.100004300', this);&#xA;					" onblur="&#xA;						javascript:OnChoiceBlur('53734.100004300', this)&#xA;					"><div class="itemTitle">
                          <div style="display:inline" class="idDisplay"><a onClick="javascript:syncItem(this)" name="53734">53734
            	-  
			</a></div>pT1mi: Minimally invasive adenocarcinoma: adenocarcinoma (&lt;= 3 cm in greatest dimension) with a predominantly lepidic pattern and &lt;= 5 mm invasion in greatest dimension<div class="MetadataDisplay"></div>
                          <div class="ChangeDisplay"></div>
                          <div class="MetadataDisplay" style="display:inline">
         				&#xA0;<div class="reportText">
         			rptText:
         				</div>
                            <div class="metadataTextValue">pT1mi</div>
         		&#xA0;<div class="nameDiv">
                              <div class="name">name: </div>
                              <div class="metadataTextValue">
                                <div class="nameValue">LI_53734</div>
                              </div>
                            </div>
                          </div>
                          <div class="ChangeDisplay"></div>
                          <div style="display:inline" class="MetadataDisplay"></div>
                        </div>
                      </div>
                      <div class="Answer"><input type="radio" style="float:left" name="42713.100004300" value="51616.100004300,pT1a: Tumor <= 1 cm in greatest dimension. A superficial, spreading tumor of any size whose invasive component is limited to the bronchial wall and may extend proximal to the main bronchus also is classified as T1a, but these tumors are uncommon" onchange="&#xA;						javascript:SelectUnselectParents('q42713.100004300', this);&#xA;					" onblur="&#xA;						javascript:OnChoiceBlur('51616.100004300', this)&#xA;					"><div class="itemTitle">
                          <div style="display:inline" class="idDisplay"><a onClick="javascript:syncItem(this)" name="51616">51616
            	-  
			</a></div>pT1a: Tumor &lt;= 1 cm in greatest dimension. A superficial, spreading tumor of any size whose invasive component is limited to the bronchial wall and may extend proximal to the main bronchus also is classified as T1a, but these tumors are uncommon<div class="MetadataDisplay"></div>
                          <div class="ChangeDisplay"></div>
                          <div class="MetadataDisplay" style="display:inline">
         				&#xA0;<div class="reportText">
         			rptText:
         				</div>
                            <div class="metadataTextValue">pT1a</div>
         		&#xA0;<div class="nameDiv">
                              <div class="name">name: </div>
                              <div class="metadataTextValue">
                                <div class="nameValue">LI_51616</div>
                              </div>
                            </div>
                          </div>
                          <div class="ChangeDisplay"></div>
                          <div style="display:inline" class="MetadataDisplay"></div>
                        </div>
                      </div>
                      <div class="Answer"><input type="radio" style="float:left" name="42713.100004300" value="44477.100004300,pT1b: Tumor > 1 cm but <= 2 cm in greatest dimension" onchange="&#xA;						javascript:SelectUnselectParents('q42713.100004300', this);&#xA;					" onblur="&#xA;						javascript:OnChoiceBlur('44477.100004300', this)&#xA;					"><div class="itemTitle">
                          <div style="display:inline" class="idDisplay"><a onClick="javascript:syncItem(this)" name="44477">44477
            	-  
			</a></div>pT1b: Tumor &gt; 1 cm but &lt;= 2 cm in greatest dimension<div class="MetadataDisplay"></div>
                          <div class="ChangeDisplay"></div>
                          <div class="MetadataDisplay" style="display:inline">
         				&#xA0;<div class="reportText">
         			rptText:
         				</div>
                            <div class="metadataTextValue">pT1b</div>
         		&#xA0;<div class="nameDiv">
                              <div class="name">name: </div>
                              <div class="metadataTextValue">
                                <div class="nameValue">LI_44477</div>
                              </div>
                            </div>
                          </div>
                          <div class="ChangeDisplay"></div>
                          <div style="display:inline" class="MetadataDisplay"></div>
                        </div>
                      </div>
                      <div class="Answer"><input type="radio" style="float:left" name="42713.100004300" value="42081.100004300,pT1c: Tumor > 2 cm but <= 3 cm in greatest dimension" onchange="&#xA;						javascript:SelectUnselectParents('q42713.100004300', this);&#xA;					" onblur="&#xA;						javascript:OnChoiceBlur('42081.100004300', this)&#xA;					"><div class="itemTitle">
                          <div style="display:inline" class="idDisplay"><a onClick="javascript:syncItem(this)" name="42081">42081
            	-  
			</a></div>pT1c: Tumor &gt; 2 cm but &lt;= 3 cm in greatest dimension<div class="MetadataDisplay"></div>
                          <div class="ChangeDisplay"></div>
                          <div class="MetadataDisplay" style="display:inline">
         				&#xA0;<div class="reportText">
         			rptText:
         				</div>
                            <div class="metadataTextValue">pT1c</div>
         		&#xA0;<div class="nameDiv">
                              <div class="name">name: </div>
                              <div class="metadataTextValue">
                                <div class="nameValue">LI_42081</div>
                              </div>
                            </div>
                          </div>
                          <div class="ChangeDisplay"></div>
                          <div style="display:inline" class="MetadataDisplay"></div>
                        </div>
                      </div>
                      <div class="Answer"><input type="radio" style="float:left" name="42713.100004300" value="56200.100004300,pT1 (subgroup cannot be determined)" onchange="&#xA;						javascript:SelectUnselectParents('q42713.100004300', this);&#xA;					" onblur="&#xA;						javascript:OnChoiceBlur('56200.100004300', this)&#xA;					"><div class="itemTitle">
                          <div style="display:inline" class="idDisplay"><a onClick="javascript:syncItem(this)" name="56200">56200
            	-  
			</a></div>pT1 (subgroup cannot be determined)<div class="MetadataDisplay"></div>
                          <div class="ChangeDisplay"></div>
                          <div class="MetadataDisplay" style="display:inline">
         				&#xA0;<div class="reportText">
         			rptText:
         				</div>
                            <div class="metadataTextValue">pT1</div>
         		&#xA0;<div class="nameDiv">
                              <div class="name">name: </div>
                              <div class="metadataTextValue">
                                <div class="nameValue">LI_56200</div>
                              </div>
                            </div>
                          </div>
                          <div class="ChangeDisplay"></div>
                          <div style="display:inline" class="MetadataDisplay"></div>
                        </div>
                      </div>
                      <div>
                        <div class="ListNote">
                          <div style="display:inline" class="idDisplay"><a onClick="javascript:syncItem(this)" name="35831">35831
            	-  
			</a></div>pT2: Tumor &gt; 3 cm but &lt;= 5 cm or having any of the following features: Involves the main bronchus regardless of distance to the carina, but without involvement of the carina; OR Invades visceral pleura (PL1 or PL2); OR Associated with atelectasis or obstructive pneumonitis that extends to the hilar region, involving part or all of the lung<div style="display:inline" class="MetadataDisplay">
                            <div class="MetadataDisplay" style="display:inline">
						&#xA0;<div class="reportText">
							rptText:
						</div>
                              <div class="metadataTextValue">{no text}</div>
					&#xA0;<div class="nameDiv">
                                <div class="name">name: </div>
                                <div class="metadataTextValue">
                                  <div class="nameValue">DI_35831</div>
                                </div>
                              </div>
                            </div>
                            <div class="ChangeDisplay"></div>
                          </div>
                        </div>
                        <div style="clear:both;"></div>
                      </div>
                      <div>
                        <div class="ListNote">
                          <div style="display:inline" class="idDisplay"><a onClick="javascript:syncItem(this)" name="54962">54962
            	-  
			</a></div>Note: T2 tumors with these features are classified as T2a if &lt;= 4 cm or if the size cannot be determined and T2b if &gt; 4 cm but &lt;= 5 cm.<div style="display:inline" class="MetadataDisplay">
                            <div class="MetadataDisplay" style="display:inline">
						&#xA0;<div class="reportText">
							rptText:
						</div>
                              <div class="metadataTextValue">{no text}</div>
					&#xA0;<div class="nameDiv">
                                <div class="name">name: </div>
                                <div class="metadataTextValue">
                                  <div class="nameValue">DI_54962</div>
                                </div>
                              </div>
                            </div>
                            <div class="ChangeDisplay"></div>
                          </div>
                        </div>
                        <div style="clear:both;"></div>
                      </div>
                      <div class="Answer"><input type="radio" style="float:left" name="42713.100004300" value="54487.100004300,pT2a: Tumor > 3 cm, but <= 4 cm in greatest dimension" onchange="&#xA;						javascript:SelectUnselectParents('q42713.100004300', this);&#xA;					" onblur="&#xA;						javascript:OnChoiceBlur('54487.100004300', this)&#xA;					"><div class="itemTitle">
                          <div style="display:inline" class="idDisplay"><a onClick="javascript:syncItem(this)" name="54487">54487
            	-  
			</a></div>pT2a: Tumor &gt; 3 cm, but &lt;= 4 cm in greatest dimension<div class="MetadataDisplay"></div>
                          <div class="ChangeDisplay"></div>
                          <div class="MetadataDisplay" style="display:inline">
         				&#xA0;<div class="reportText">
         			rptText:
         				</div>
                            <div class="metadataTextValue">pT2a</div>
         		&#xA0;<div class="nameDiv">
                              <div class="name">name: </div>
                              <div class="metadataTextValue">
                                <div class="nameValue">LI_54487</div>
                              </div>
                            </div>
                          </div>
                          <div class="ChangeDisplay"></div>
                          <div style="display:inline" class="MetadataDisplay"></div>
                        </div>
                      </div>
                      <div class="Answer"><input type="radio" style="float:left" name="42713.100004300" value="46349.100004300,pT2b: Tumor > 4 cm, but <= 5 cm in greatest dimension" onchange="&#xA;						javascript:SelectUnselectParents('q42713.100004300', this);&#xA;					" onblur="&#xA;						javascript:OnChoiceBlur('46349.100004300', this)&#xA;					"><div class="itemTitle">
                          <div style="display:inline" class="idDisplay"><a onClick="javascript:syncItem(this)" name="46349">46349
            	-  
			</a></div>pT2b: Tumor &gt; 4 cm, but &lt;= 5 cm in greatest dimension<div class="MetadataDisplay"></div>
                          <div class="ChangeDisplay"></div>
                          <div class="MetadataDisplay" style="display:inline">
         				&#xA0;<div class="reportText">
         			rptText:
         				</div>
                            <div class="metadataTextValue">pT2b</div>
         		&#xA0;<div class="nameDiv">
                              <div class="name">name: </div>
                              <div class="metadataTextValue">
                                <div class="nameValue">LI_46349</div>
                              </div>
                            </div>
                          </div>
                          <div class="ChangeDisplay"></div>
                          <div style="display:inline" class="MetadataDisplay"></div>
                        </div>
                      </div>
                      <div class="Answer"><input type="radio" style="float:left" name="42713.100004300" value="46651.100004300,pT2 (subgroup cannot be determined)" onchange="&#xA;						javascript:SelectUnselectParents('q42713.100004300', this);&#xA;					" onblur="&#xA;						javascript:OnChoiceBlur('46651.100004300', this)&#xA;					"><div class="itemTitle">
                          <div style="display:inline" class="idDisplay"><a onClick="javascript:syncItem(this)" name="46651">46651
            	-  
			</a></div>pT2 (subgroup cannot be determined)<div class="MetadataDisplay"></div>
                          <div class="ChangeDisplay"></div>
                          <div class="MetadataDisplay" style="display:inline">
         				&#xA0;<div class="reportText">
         			rptText:
         				</div>
                            <div class="metadataTextValue">pT2</div>
         		&#xA0;<div class="nameDiv">
                              <div class="name">name: </div>
                              <div class="metadataTextValue">
                                <div class="nameValue">LI_46651</div>
                              </div>
                            </div>
                          </div>
                          <div class="ChangeDisplay"></div>
                          <div style="display:inline" class="MetadataDisplay"></div>
                        </div>
                      </div>
                      <div class="Answer"><input type="radio" style="float:left" name="42713.100004300" value="42630.100004300,pT3: Tumor > 5 cm but <= 7 cm in greatest dimension; or directly invading any of the following: parietal pleura (PL3), chest wall (including superior sulcus tumors), phrenic nerve, parietal pericardium; or separate tumor nodule(s) in the same lobe as the primary" onchange="&#xA;						javascript:SelectUnselectParents('q42713.100004300', this);&#xA;					" onblur="&#xA;						javascript:OnChoiceBlur('42630.100004300', this)&#xA;					"><div class="itemTitle">
                          <div style="display:inline" class="idDisplay"><a onClick="javascript:syncItem(this)" name="42630">42630
            	-  
			</a></div>pT3: Tumor &gt; 5 cm but &lt;= 7 cm in greatest dimension; or directly invading any of the following: parietal pleura (PL3), chest wall (including superior sulcus tumors), phrenic nerve, parietal pericardium; or separate tumor nodule(s) in the same lobe as the primary<div class="MetadataDisplay"></div>
                          <div class="ChangeDisplay"></div>
                          <div class="MetadataDisplay" style="display:inline">
         				&#xA0;<div class="reportText">
         			rptText:
         				</div>
                            <div class="metadataTextValue">pT3</div>
         		&#xA0;<div class="nameDiv">
                              <div class="name">name: </div>
                              <div class="metadataTextValue">
                                <div class="nameValue">LI_42630</div>
                              </div>
                            </div>
                          </div>
                          <div class="ChangeDisplay"></div>
                          <div style="display:inline" class="MetadataDisplay"></div>
                        </div>
                      </div>
                      <div class="Answer"><input type="radio" style="float:left" name="42713.100004300" value="56528.100004300,pT4: Tumor > 7 cm in greatest dimension; or tumor of any size invading one or more of the following: diaphragm, mediastinum, heart, great vessels, trachea, recurrent laryngeal nerve, esophagus, vertebral body or carina; or separate tumor nodule(s) in an ipsilateral lobe different from that of the primary" onchange="&#xA;						javascript:SelectUnselectParents('q42713.100004300', this);&#xA;					" onblur="&#xA;						javascript:OnChoiceBlur('56528.100004300', this)&#xA;					"><div class="itemTitle">
                          <div style="display:inline" class="idDisplay"><a onClick="javascript:syncItem(this)" name="56528">56528
            	-  
			</a></div>pT4: Tumor &gt; 7 cm in greatest dimension; or tumor of any size invading one or more of the following: diaphragm, mediastinum, heart, great vessels, trachea, recurrent laryngeal nerve, esophagus, vertebral body or carina; or separate tumor nodule(s) in an ipsilateral lobe different from that of the primary<div class="MetadataDisplay"></div>
                          <div class="ChangeDisplay"></div>
                          <div class="MetadataDisplay" style="display:inline">
         				&#xA0;<div class="reportText">
         			rptText:
         				</div>
                            <div class="metadataTextValue">pT4</div>
         		&#xA0;<div class="nameDiv">
                              <div class="name">name: </div>
                              <div class="metadataTextValue">
                                <div class="nameValue">LI_56528</div>
                              </div>
                            </div>
                          </div>
                          <div class="ChangeDisplay"></div>
                          <div style="display:inline" class="MetadataDisplay"></div>
                        </div>
                      </div>
                      <div style="clear:both;"></div>
                    </div>
                  </div>
                  <div class="question" id="q1748.100004300"><input type="hidden" class="TextBox" name="q1748.100004300" value="Regional Lymph Nodes (pN)"><input id="maxcardinality" type="hidden" value=""><div class="QuestionInSection">
                      <div class="QuestionTitle collapsable_q">
                        <div style="display:inline" class="idDisplay"><a onClick="javascript:syncItem(this)" name="1748">1748
            	-  
			</a></div>Regional Lymph Nodes (pN)<div style="display:inline-block" class="metadata"></div>
                        <div class="MetadataDisplay" style="display:inline-block"></div>
                        <div class="MetadataDisplay" style="display:inline">
         		&#xA0;<div class="nameDiv">
                            <div class="name">name: </div>
                            <div class="metadataTextValue">
                              <div class="nameValue">Q_1748</div>
                            </div>
                          </div>
                        </div>
                        <div class="ChangeDisplay"></div>
                        <div class="MetadataDisplay"></div>
                        <div class="ChangeDisplay"></div>
                      </div><a class="QuestionReset" onclick="resetAnswer(this);return false" href="&#xA;								#&#xA;							">(reset)</a><div class="command"></div>
                      <div style="clear:both;"></div>
                      <div class="Answer"><input type="radio" style="float:left" name="1748.100004300" value="1749.100004300,pNX: Regional lymph nodes cannot be assessed" onchange="&#xA;						javascript:SelectUnselectParents('q1748.100004300', this);&#xA;					" onblur="&#xA;						javascript:OnChoiceBlur('1749.100004300', this)&#xA;					"><div class="itemTitle">
                          <div style="display:inline" class="idDisplay"><a onClick="javascript:syncItem(this)" name="1749">1749
            	-  
			</a></div>pNX: Regional lymph nodes cannot be assessed<div class="MetadataDisplay"></div>
                          <div class="ChangeDisplay"></div>
                          <div class="MetadataDisplay" style="display:inline">
         				&#xA0;<div class="reportText">
         			rptText:
         				</div>
                            <div class="metadataTextValue">pNX</div>
         		&#xA0;<div class="nameDiv">
                              <div class="name">name: </div>
                              <div class="metadataTextValue">
                                <div class="nameValue">LI_1749</div>
                              </div>
                            </div>
                          </div>
                          <div class="ChangeDisplay"></div>
                          <div style="display:inline" class="MetadataDisplay"></div>
                        </div>
                      </div>
                      <div class="Answer"><input type="radio" style="float:left" name="1748.100004300" value="1750.100004300,pN0: No regional lymph node metastasis" onchange="&#xA;						javascript:SelectUnselectParents('q1748.100004300', this);&#xA;					" onblur="&#xA;						javascript:OnChoiceBlur('1750.100004300', this)&#xA;					"><div class="itemTitle">
                          <div style="display:inline" class="idDisplay"><a onClick="javascript:syncItem(this)" name="1750">1750
            	-  
			</a></div>pN0: No regional lymph node metastasis<div class="MetadataDisplay"></div>
                          <div class="ChangeDisplay"></div>
                          <div class="MetadataDisplay" style="display:inline">
         				&#xA0;<div class="reportText">
         			rptText:
         				</div>
                            <div class="metadataTextValue">pN0</div>
         		&#xA0;<div class="nameDiv">
                              <div class="name">name: </div>
                              <div class="metadataTextValue">
                                <div class="nameValue">LI_1750</div>
                              </div>
                            </div>
                          </div>
                          <div class="ChangeDisplay"></div>
                          <div style="display:inline" class="MetadataDisplay"></div>
                        </div>
                      </div>
                      <div class="Answer"><input type="radio" style="float:left" name="1748.100004300" value="1751.100004300,pN1: Metastasis in ipsilateral peribronchial and / or ipsilateral hilar lymph nodes, and intrapulmonary nodes including involvement by direct extension" onchange="&#xA;						javascript:SelectUnselectParents('q1748.100004300', this);&#xA;					" onblur="&#xA;						javascript:OnChoiceBlur('1751.100004300', this)&#xA;					"><div class="itemTitle">
                          <div style="display:inline" class="idDisplay"><a onClick="javascript:syncItem(this)" name="1751">1751
            	-  
			</a></div>pN1: Metastasis in ipsilateral peribronchial and / or ipsilateral hilar lymph nodes, and intrapulmonary nodes including involvement by direct extension<div class="MetadataDisplay"></div>
                          <div class="ChangeDisplay"></div>
                          <div class="MetadataDisplay" style="display:inline">
         				&#xA0;<div class="reportText">
         			rptText:
         				</div>
                            <div class="metadataTextValue">pN1</div>
         		&#xA0;<div class="nameDiv">
                              <div class="name">name: </div>
                              <div class="metadataTextValue">
                                <div class="nameValue">LI_1751</div>
                              </div>
                            </div>
                          </div>
                          <div class="ChangeDisplay"></div>
                          <div style="display:inline" class="MetadataDisplay"></div>
                        </div>
                      </div>
                      <div class="Answer"><input type="radio" style="float:left" name="1748.100004300" value="1752.100004300,pN2: Metastasis in ipsilateral mediastinal and / or subcarinal lymph node(s)" onchange="&#xA;						javascript:SelectUnselectParents('q1748.100004300', this);&#xA;					" onblur="&#xA;						javascript:OnChoiceBlur('1752.100004300', this)&#xA;					"><div class="itemTitle">
                          <div style="display:inline" class="idDisplay"><a onClick="javascript:syncItem(this)" name="1752">1752
            	-  
			</a></div>pN2: Metastasis in ipsilateral mediastinal and / or subcarinal lymph node(s)<div class="MetadataDisplay"></div>
                          <div class="ChangeDisplay"></div>
                          <div class="MetadataDisplay" style="display:inline">
         				&#xA0;<div class="reportText">
         			rptText:
         				</div>
                            <div class="metadataTextValue">pN2</div>
         		&#xA0;<div class="nameDiv">
                              <div class="name">name: </div>
                              <div class="metadataTextValue">
                                <div class="nameValue">LI_1752</div>
                              </div>
                            </div>
                          </div>
                          <div class="ChangeDisplay"></div>
                          <div style="display:inline" class="MetadataDisplay"></div>
                        </div>
                      </div>
                      <div class="Answer"><input type="radio" style="float:left" name="1748.100004300" value="1753.100004300,pN3: Metastasis in contralateral mediastinal, contralateral hilar, ipsilateral or contralateral scalene, or supraclavicular lymph node(s)" onchange="&#xA;						javascript:SelectUnselectParents('q1748.100004300', this);&#xA;					" onblur="&#xA;						javascript:OnChoiceBlur('1753.100004300', this)&#xA;					"><div class="itemTitle">
                          <div style="display:inline" class="idDisplay"><a onClick="javascript:syncItem(this)" name="1753">1753
            	-  
			</a></div>pN3: Metastasis in contralateral mediastinal, contralateral hilar, ipsilateral or contralateral scalene, or supraclavicular lymph node(s)<div class="MetadataDisplay"></div>
                          <div class="ChangeDisplay"></div>
                          <div class="MetadataDisplay" style="display:inline">
         				&#xA0;<div class="reportText">
         			rptText:
         				</div>
                            <div class="metadataTextValue">pN3</div>
         		&#xA0;<div class="nameDiv">
                              <div class="name">name: </div>
                              <div class="metadataTextValue">
                                <div class="nameValue">LI_1753</div>
                              </div>
                            </div>
                          </div>
                          <div class="ChangeDisplay"></div>
                          <div style="display:inline" class="MetadataDisplay"></div>
                        </div>
                      </div>
                      <div style="clear:both;"></div>
                    </div>
                  </div>
                  <div class="question" id="q47348.100004300"><input type="hidden" class="TextBox" name="q47348.100004300" value="?Distant Metastases (pM)"><input id="maxcardinality" type="hidden" value=""><div class="QuestionInSection">
                      <div class="QuestionTitle collapsable_q">
                        <div style="display:inline" class="idDisplay"><a onClick="javascript:syncItem(this)" name="47348">47348
            	-  
			</a></div>?Distant Metastases (pM)<div style="display:inline-block" class="metadata"></div>
                        <div class="MetadataDisplay" style="display:inline-block"></div>
                        <div class="MetadataDisplay" style="display:inline">
         				&#xA0;<div class="reportText">
         			rptText:
         				</div>
                          <div class="metadataTextValue">Distant Metastases (pM)</div>
         		&#xA0;<div class="nameDiv">
                            <div class="name">name: </div>
                            <div class="metadataTextValue">
                              <div class="nameValue">Q_47348</div>
                            </div>
                          </div>
                        </div>
                        <div class="ChangeDisplay"></div>
                        <div class="MetadataDisplay"></div>
                        <div class="ChangeDisplay"></div>
                      </div><a class="QuestionReset" onclick="resetAnswer(this);return false" href="&#xA;								#&#xA;							">(reset)</a><div class="command"></div>
                      <div style="clear:both;"></div>
                      <div class="Answer"><input type="radio" style="float:left" name="47348.100004300" value="15998.100004300,?Not applicable - pM cannot be determined from the submitted specimen(s)" onchange="&#xA;						javascript:SelectUnselectParents('q47348.100004300', this);&#xA;					" onblur="&#xA;						javascript:OnChoiceBlur('15998.100004300', this)&#xA;					"><div class="itemTitle">
                          <div style="display:inline" class="idDisplay"><a onClick="javascript:syncItem(this)" name="15998">15998
            	-  
			</a></div>?Not applicable - pM cannot be determined from the submitted specimen(s)<div class="MetadataDisplay">
               &#xA0;<div class="omitWhenSel">ows </div>
                          </div>
                          <div class="ChangeDisplay"></div>
                          <div class="MetadataDisplay" style="display:inline">
         				&#xA0;<div class="reportText">
         			rptText:
         				</div>
                            <div class="metadataTextValue">Not applicable - pM cannot be determined from the submitted specimen(s)</div>
         		&#xA0;<div class="nameDiv">
                              <div class="name">name: </div>
                              <div class="metadataTextValue">
                                <div class="nameValue">LI_15998</div>
                              </div>
                            </div>
                          </div>
                          <div class="ChangeDisplay"></div>
                          <div style="display:inline" class="MetadataDisplay"></div>
                        </div>
                      </div>
                      <div>
                        <div class="ListNote">
                          <div style="display:inline" class="idDisplay"><a onClick="javascript:syncItem(this)" name="39210">39210
            	-  
			</a></div># Note: Most pleural (pericardial) effusions with lung cancer are a result of the tumor. In a few patients, however, multiple microscopic examinations of pleural (pericardial) fluid are negative for tumor, and the fluid is nonbloody and not an exudate. If these elements and clinical judgment dictate that the effusion is not related to the tumor, the effusion should be excluded as a staging descriptor.<div style="display:inline" class="MetadataDisplay">
                            <div class="MetadataDisplay" style="display:inline">
						&#xA0;<div class="reportText">
							rptText:
						</div>
                              <div class="metadataTextValue">{no text}</div>
					&#xA0;<div class="nameDiv">
                                <div class="name">name: </div>
                                <div class="metadataTextValue">
                                  <div class="nameValue">DI_39210</div>
                                </div>
                              </div>
                            </div>
                            <div class="ChangeDisplay"></div>
                          </div>
                        </div>
                        <div style="clear:both;"></div>
                      </div>
                      <div class="Answer"><input type="radio" style="float:left" name="47348.100004300" value="47746.100004300,pM1a: Separate tumor nodule(s) in contralateral lobe; tumor with pleural or pericardial nodules or malignant pleural (or pericardial) effusion#" onchange="&#xA;						javascript:SelectUnselectParents('q47348.100004300', this);&#xA;					" onblur="&#xA;						javascript:OnChoiceBlur('47746.100004300', this)&#xA;					"><div class="itemTitle">
                          <div style="display:inline" class="idDisplay"><a onClick="javascript:syncItem(this)" name="47746">47746
            	-  
			</a></div>pM1a: Separate tumor nodule(s) in contralateral lobe; tumor with pleural or pericardial nodules or malignant pleural (or pericardial) effusion#<div class="MetadataDisplay"></div>
                          <div class="ChangeDisplay"></div>
                          <div class="MetadataDisplay" style="display:inline">
         				&#xA0;<div class="reportText">
         			rptText:
         				</div>
                            <div class="metadataTextValue">pM1a</div>
         		&#xA0;<div class="nameDiv">
                              <div class="name">name: </div>
                              <div class="metadataTextValue">
                                <div class="nameValue">LI_47746</div>
                              </div>
                            </div>
                          </div>
                          <div class="ChangeDisplay"></div>
                          <div style="display:inline" class="MetadataDisplay"></div>
                        </div>
                      </div>
                      <div class="Answer"><input type="radio" style="float:left" name="47348.100004300" value="47823.100004300,pM1b: Single extrathoracic metastasis in a single organ (including involvement of a single nonregional node)" onchange="&#xA;						javascript:SelectUnselectParents('q47348.100004300', this);&#xA;					" onblur="&#xA;						javascript:OnChoiceBlur('47823.100004300', this)&#xA;					"><div class="itemTitle">
                          <div style="display:inline" class="idDisplay"><a onClick="javascript:syncItem(this)" name="47823">47823
            	-  
			</a></div>pM1b: Single extrathoracic metastasis in a single organ (including involvement of a single nonregional node)<div class="MetadataDisplay"></div>
                          <div class="ChangeDisplay"></div>
                          <div class="MetadataDisplay" style="display:inline">
         				&#xA0;<div class="reportText">
         			rptText:
         				</div>
                            <div class="metadataTextValue">pM1b</div>
         		&#xA0;<div class="nameDiv">
                              <div class="name">name: </div>
                              <div class="metadataTextValue">
                                <div class="nameValue">LI_47823</div>
                              </div>
                            </div>
                          </div>
                          <div class="ChangeDisplay"></div>
                          <div style="display:inline" class="MetadataDisplay"></div>
                        </div>
                      </div>
                      <div class="Answer"><input type="radio" style="float:left" name="47348.100004300" value="45951.100004300,pM1c: Multiple extrathoracic metastases in single organ or in multiple organs" onchange="&#xA;						javascript:SelectUnselectParents('q47348.100004300', this);&#xA;					" onblur="&#xA;						javascript:OnChoiceBlur('45951.100004300', this)&#xA;					"><div class="itemTitle">
                          <div style="display:inline" class="idDisplay"><a onClick="javascript:syncItem(this)" name="45951">45951
            	-  
			</a></div>pM1c: Multiple extrathoracic metastases in single organ or in multiple organs<div class="MetadataDisplay"></div>
                          <div class="ChangeDisplay"></div>
                          <div class="MetadataDisplay" style="display:inline">
         				&#xA0;<div class="reportText">
         			rptText:
         				</div>
                            <div class="metadataTextValue">pM1c</div>
         		&#xA0;<div class="nameDiv">
                              <div class="name">name: </div>
                              <div class="metadataTextValue">
                                <div class="nameValue">LI_45951</div>
                              </div>
                            </div>
                          </div>
                          <div class="ChangeDisplay"></div>
                          <div style="display:inline" class="MetadataDisplay"></div>
                        </div>
                      </div>
                      <div style="clear:both;"></div>
                      <div class="question" id="q16013.100004300"><input type="hidden" class="TextBox" name="q16013.100004300" value="?Specify Site(s) (if applicable)"><input id="maxcardinality" type="hidden" value=""><div class="QuestionInListItem">
                          <div class="QuestionTitle collapsable_q">
                            <div style="display:inline" class="idDisplay"><a onClick="javascript:syncItem(this)" name="16013">16013
            	-  
			</a></div>?Specify Site(s) (if applicable)<div style="display:inline" class="MetadataDisplay">
                              <div class="MetadataDisplay" style="display:inline-block">
               &#xA0;<div class="minCard">min: </div>
                                <div class="metadataTextValue">0</div>
                              </div>
                              <div class="MetadataDisplay" style="display:inline">
         				&#xA0;<div class="reportText">
         			rptText:
         				</div>
                                <div class="metadataTextValue">Site(s)</div>
         		&#xA0;<div class="nameDiv">
                                  <div class="name">name: </div>
                                  <div class="metadataTextValue">
                                    <div class="nameValue">Q_16013</div>
                                  </div>
                                </div>
                              </div>
                              <div class="ChangeDisplay"></div>
                              <div class="MetadataDisplay">
         		&#xA0;<div class="ResponseUnits">dt: </div>
                                <div class="metadataTextValue">string</div>
         		&#xA0;	</div>
                              <div class="ChangeDisplay"></div>
                            </div><input type="text" class="TextBox" name="16013.100004300" value=""></div>
                          <div class="command"></div>
                          <div style="clear:both;"></div>
                          <div style="clear:both;"></div>
                        </div>
                      </div>
                    </div>
                  </div>
                  <div style="clear:both"></div>
                </td>
              </tr>
            </table>
          </div>
          <div id="s15672.100004300">
            <div class="mustImplement"></div><input id="maxcardinality" type="hidden" value=""><table class="HeaderTable" align="center" id="s15672.100004300">
              <tr>
                <td>
                  <div class="TopHeader collapsable">
                    <div class="notRequired">+</div>
                    <div style="display:inline" class="idDisplay"><a onClick="javascript:syncItem(this)" name="15672">15672
            	-  
			</a></div>ADDITIONAL FINDINGS<div style="display:inline" class="MetadataDisplay">
                      <div class="MetadataDisplay" style="display:inline">
					&#xA0;<div class="mustImplement">mI: </div>false
					&#xA0;<div class="minCard">min: </div>
                        <div class="nameValue">0</div>
					&#xA0;<div class="nameDiv">
                          <div class="name">name: </div>
                          <div class="nameValue">S_15672</div>
                        </div>
                      </div>
                      <div class="ChangeDisplay"></div>
                    </div>
                  </div>
                  <div style="clear:both"></div>
                  <div class="question" id="q45910.100004300"><input type="hidden" class="TextBox" name="q45910.100004300" value="Additional Findings"><input id="maxcardinality" type="hidden" value=""><div class="QuestionInSection">
                      <div class="mustImplement"></div>
                      <div class="QuestionTitle collapsable_q">
                        <div class="notRequired">+</div>
                        <div style="display:inline" class="idDisplay"><a onClick="javascript:syncItem(this)" name="45910">45910
            	-  
			</a></div>Additional Findings<div style="display:inline-block" class="metadata"></div>
                        <div class="MetadataDisplay" style="display:inline-block">
               &#xA0;<div class="minCard">min: </div>
                          <div class="metadataTextValue">0</div>
                        </div>
                        <div class="MetadataDisplay" style="display:inline">
               &#xA0;<div class="mustImplement">mI: </div>
                          <div class="metadataTextValue">false</div>
         		&#xA0;<div class="nameDiv">
                            <div class="name">name: </div>
                            <div class="metadataTextValue">
                              <div class="nameValue">Q_45910</div>
                            </div>
                          </div>
                        </div>
                        <div class="ChangeDisplay"></div>
                        <div class="MetadataDisplay"></div>
                        <div class="ChangeDisplay"></div>
                      </div><a class="QuestionReset" onclick="resetAnswer(this);return false" href="&#xA;								#&#xA;							">(reset)</a><div class="command"></div>
                      <div style="clear:both;"></div>
                      <div class="Answer"><input type="checkbox" style="float:left;" name="45910.100004300" value="1800.100004300,None identified" onchange="&#xA;						javascript:SelectUnselectParents('q45910.100004300', this)&#xA;					" onblur="&#xA;						javascript:OnChoiceBlur('1800.100004300', this)&#xA;					"><div class="itemTitle">
                          <div style="display:inline" class="idDisplay"><a onClick="javascript:syncItem(this)" name="1800">1800
            	-  
			</a></div>None identified<div class="MetadataDisplay">
               &#xA0;<div class="sds">sds </div>
                          </div>
                          <div class="ChangeDisplay"></div>
                          <div class="MetadataDisplay" style="display:inline">
         		&#xA0;<div class="nameDiv">
                              <div class="name">name: </div>
                              <div class="metadataTextValue">
                                <div class="nameValue">LI_1800</div>
                              </div>
                            </div>
                          </div>
                          <div class="ChangeDisplay"></div>
                          <div style="display:inline" class="MetadataDisplay"></div>
                        </div>
                      </div>
                      <div class="Answer"><input type="checkbox" style="float:left;" name="45910.100004300" value="16012.100004300,Atypical adenomatous hyperplasia" onchange="&#xA;						javascript:SelectUnselectParents('q45910.100004300', this)&#xA;					" onblur="&#xA;						javascript:OnChoiceBlur('16012.100004300', this)&#xA;					"><div class="itemTitle">
                          <div style="display:inline" class="idDisplay"><a onClick="javascript:syncItem(this)" name="16012">16012
            	-  
			</a></div>Atypical adenomatous hyperplasia<div class="MetadataDisplay"></div>
                          <div class="ChangeDisplay"></div>
                          <div class="MetadataDisplay" style="display:inline">
         		&#xA0;<div class="nameDiv">
                              <div class="name">name: </div>
                              <div class="metadataTextValue">
                                <div class="nameValue">LI_16012</div>
                              </div>
                            </div>
                          </div>
                          <div class="ChangeDisplay"></div>
                          <div style="display:inline" class="MetadataDisplay"></div>
                        </div>
                      </div>
                      <div class="Answer"><input type="checkbox" style="float:left;" name="45910.100004300" value="16000.100004300,Squamous dysplasia" onchange="&#xA;						javascript:SelectUnselectParents('q45910.100004300', this)&#xA;					" onblur="&#xA;						javascript:OnChoiceBlur('16000.100004300', this)&#xA;					"><div class="itemTitle">
                          <div style="display:inline" class="idDisplay"><a onClick="javascript:syncItem(this)" name="16000">16000
            	-  
			</a></div>Squamous dysplasia<div class="MetadataDisplay"></div>
                          <div class="ChangeDisplay"></div>
                          <div class="MetadataDisplay" style="display:inline">
         		&#xA0;<div class="nameDiv">
                              <div class="name">name: </div>
                              <div class="metadataTextValue">
                                <div class="nameValue">LI_16000</div>
                              </div>
                            </div>
                          </div>
                          <div class="ChangeDisplay"></div>
                          <div style="display:inline" class="MetadataDisplay"></div>
                        </div>
                      </div>
                      <div class="Answer"><input type="checkbox" style="float:left;" name="45910.100004300" value="1801.100004300,Metaplasia (specify type)" onchange="&#xA;						javascript:SelectUnselectParents('q45910.100004300', this)&#xA;					" onblur="&#xA;						javascript:OnChoiceBlur('1801.100004300', this)&#xA;					"><div class="itemTitle">
                          <div style="display:inline" class="idDisplay"><a onClick="javascript:syncItem(this)" name="1801">1801
            	-  
			</a></div>Metaplasia (specify type)<div class="MetadataDisplay"></div>
                          <div class="ChangeDisplay"></div>
                          <div class="MetadataDisplay" style="display:inline">
         				&#xA0;<div class="reportText">
         			rptText:
         				</div>
                            <div class="metadataTextValue">Metaplasia (type)</div>
         		&#xA0;<div class="nameDiv">
                              <div class="name">name: </div>
                              <div class="metadataTextValue">
                                <div class="nameValue">LI_1801</div>
                              </div>
                            </div>
                          </div>
                          <div class="ChangeDisplay"></div>
                          <div style="display:inline" class="MetadataDisplay"></div>
                          <div class="MetadataDisplay">
               &#xA0;<div class="responseRequired">respReq: </div>
         		&#xA0;<div class="ResponseUnits">dt: </div>
                            <div class="metadataTextValue">string</div>
         		&#xA0;	</div>
                          <div class="ChangeDisplay"></div><input type="text" class="AnswerTextBox" name="45910.100004300" value="" onkeydown="&#xA;							javascript:SelectChoiceOnKeyPress('1801.100004300', this, event)&#xA;						" onblur="&#xA;							javascript:SelectUnselectChoiceOnBlur('1801.100004300', this)&#xA;						"></div>
                      </div>
                      <div class="Answer"><input type="checkbox" style="float:left;" name="45910.100004300" value="16002.100004300,Diffuse neuroendocrine hyperplasia" onchange="&#xA;						javascript:SelectUnselectParents('q45910.100004300', this)&#xA;					" onblur="&#xA;						javascript:OnChoiceBlur('16002.100004300', this)&#xA;					"><div class="itemTitle">
                          <div style="display:inline" class="idDisplay"><a onClick="javascript:syncItem(this)" name="16002">16002
            	-  
			</a></div>Diffuse neuroendocrine hyperplasia<div class="MetadataDisplay"></div>
                          <div class="ChangeDisplay"></div>
                          <div class="MetadataDisplay" style="display:inline">
         		&#xA0;<div class="nameDiv">
                              <div class="name">name: </div>
                              <div class="metadataTextValue">
                                <div class="nameValue">LI_16002</div>
                              </div>
                            </div>
                          </div>
                          <div class="ChangeDisplay"></div>
                          <div style="display:inline" class="MetadataDisplay"></div>
                        </div>
                      </div>
                      <div class="Answer"><input type="checkbox" style="float:left;" name="45910.100004300" value="1802.100004300,Inflammation (specify type)" onchange="&#xA;						javascript:SelectUnselectParents('q45910.100004300', this)&#xA;					" onblur="&#xA;						javascript:OnChoiceBlur('1802.100004300', this)&#xA;					"><div class="itemTitle">
                          <div style="display:inline" class="idDisplay"><a onClick="javascript:syncItem(this)" name="1802">1802
            	-  
			</a></div>Inflammation (specify type)<div class="MetadataDisplay"></div>
                          <div class="ChangeDisplay"></div>
                          <div class="MetadataDisplay" style="display:inline">
         				&#xA0;<div class="reportText">
         			rptText:
         				</div>
                            <div class="metadataTextValue">Inflammation (type)</div>
         		&#xA0;<div class="nameDiv">
                              <div class="name">name: </div>
                              <div class="metadataTextValue">
                                <div class="nameValue">LI_1802</div>
                              </div>
                            </div>
                          </div>
                          <div class="ChangeDisplay"></div>
                          <div style="display:inline" class="MetadataDisplay"></div>
                          <div class="MetadataDisplay">
               &#xA0;<div class="responseRequired">respReq: </div>
         		&#xA0;<div class="ResponseUnits">dt: </div>
                            <div class="metadataTextValue">string</div>
         		&#xA0;	</div>
                          <div class="ChangeDisplay"></div><input type="text" class="AnswerTextBox" name="45910.100004300" value="" onkeydown="&#xA;							javascript:SelectChoiceOnKeyPress('1802.100004300', this, event)&#xA;						" onblur="&#xA;							javascript:SelectUnselectChoiceOnBlur('1802.100004300', this)&#xA;						"></div>
                      </div>
                      <div class="Answer"><input type="checkbox" style="float:left;" name="45910.100004300" value="45112.100004300,Fibrosis (identify if discernable pattern)" onchange="&#xA;						javascript:SelectUnselectParents('q45910.100004300', this)&#xA;					" onblur="&#xA;						javascript:OnChoiceBlur('45112.100004300', this)&#xA;					"><div class="itemTitle">
                          <div style="display:inline" class="idDisplay"><a onClick="javascript:syncItem(this)" name="45112">45112
            	-  
			</a></div>Fibrosis (identify if discernable pattern)<div class="MetadataDisplay"></div>
                          <div class="ChangeDisplay"></div>
                          <div class="MetadataDisplay" style="display:inline">
         				&#xA0;<div class="reportText">
         			rptText:
         				</div>
                            <div class="metadataTextValue">Fibrosis</div>
         		&#xA0;<div class="nameDiv">
                              <div class="name">name: </div>
                              <div class="metadataTextValue">
                                <div class="nameValue">LI_45112</div>
                              </div>
                            </div>
                          </div>
                          <div class="ChangeDisplay"></div>
                          <div style="display:inline" class="MetadataDisplay"></div>
                          <div class="MetadataDisplay">
         		&#xA0;<div class="ResponseUnits">dt: </div>
                            <div class="metadataTextValue">string</div>
         		&#xA0;	</div>
                          <div class="ChangeDisplay"></div><input type="text" class="AnswerTextBox" name="45910.100004300" value="" onkeydown="&#xA;							javascript:SelectChoiceOnKeyPress('45112.100004300', this, event)&#xA;						" onblur="&#xA;							javascript:SelectUnselectChoiceOnBlur('45112.100004300', this)&#xA;						"></div>
                      </div>
                      <div class="Answer"><input type="checkbox" style="float:left;" name="45910.100004300" value="16001.100004300,Emphysema" onchange="&#xA;						javascript:SelectUnselectParents('q45910.100004300', this)&#xA;					" onblur="&#xA;						javascript:OnChoiceBlur('16001.100004300', this)&#xA;					"><div class="itemTitle">
                          <div style="display:inline" class="idDisplay"><a onClick="javascript:syncItem(this)" name="16001">16001
            	-  
			</a></div>Emphysema<div class="MetadataDisplay"></div>
                          <div class="ChangeDisplay"></div>
                          <div class="MetadataDisplay" style="display:inline">
         		&#xA0;<div class="nameDiv">
                              <div class="name">name: </div>
                              <div class="metadataTextValue">
                                <div class="nameValue">LI_16001</div>
                              </div>
                            </div>
                          </div>
                          <div class="ChangeDisplay"></div>
                          <div style="display:inline" class="MetadataDisplay"></div>
                        </div>
                      </div>
                      <div class="Answer"><input type="checkbox" style="float:left;" name="45910.100004300" value="1803.100004300,Other (specify)" onchange="&#xA;						javascript:SelectUnselectParents('q45910.100004300', this)&#xA;					" onblur="&#xA;						javascript:OnChoiceBlur('1803.100004300', this)&#xA;					"><div class="itemTitle">
                          <div style="display:inline" class="idDisplay"><a onClick="javascript:syncItem(this)" name="1803">1803
            	-  
			</a></div>Other (specify)<div class="MetadataDisplay"></div>
                          <div class="ChangeDisplay"></div>
                          <div class="MetadataDisplay" style="display:inline">
         				&#xA0;<div class="reportText">
         			rptText:
         				</div>
                            <div class="metadataTextValue">{no text}</div>
         		&#xA0;<div class="nameDiv">
                              <div class="name">name: </div>
                              <div class="metadataTextValue">
                                <div class="nameValue">LI_1803</div>
                              </div>
                            </div>
                          </div>
                          <div class="ChangeDisplay"></div>
                          <div style="display:inline" class="MetadataDisplay"></div>
                          <div class="MetadataDisplay">
               &#xA0;<div class="responseRequired">respReq: </div>
         		&#xA0;<div class="ResponseUnits">dt: </div>
                            <div class="metadataTextValue">string</div>
         		&#xA0;	</div>
                          <div class="ChangeDisplay"></div><input type="text" class="AnswerTextBox" name="45910.100004300" value="" onkeydown="&#xA;							javascript:SelectChoiceOnKeyPress('1803.100004300', this, event)&#xA;						" onblur="&#xA;							javascript:SelectUnselectChoiceOnBlur('1803.100004300', this)&#xA;						"></div>
                      </div>
                      <div style="clear:both;"></div>
                    </div>
                  </div>
                  <div style="clear:both"></div>
                </td>
              </tr>
            </table>
          </div>
          <div id="s17870.100004300">
            <div class="mustImplement"></div><input id="maxcardinality" type="hidden" value=""><table class="HeaderTable" align="center" id="s17870.100004300">
              <tr>
                <td>
                  <div class="TopHeader collapsable">
                    <div class="notRequired">+</div>
                    <div style="display:inline" class="idDisplay"><a onClick="javascript:syncItem(this)" name="17870">17870
            	-  
			</a></div>SPECIAL STUDIES<div style="display:inline" class="MetadataDisplay">
                      <div class="MetadataDisplay" style="display:inline">
					&#xA0;<div class="mustImplement">mI: </div>false
					&#xA0;<div class="minCard">min: </div>
                        <div class="nameValue">0</div>
						&#xA0;<div class="reportText">
							rptText:
						</div>{no text}
					&#xA0;<div class="nameDiv">
                          <div class="name">name: </div>
                          <div class="nameValue">S_17870</div>
                        </div>
                      </div>
                      <div class="ChangeDisplay"></div>
                    </div>
                  </div>
                  <div style="clear:both"></div>
                  <div>
                    <div class="NoteText">
                      <div style="display:inline" class="idDisplay"><a onClick="javascript:syncItem(this)" name="30023">30023
            	-  
			</a></div>Note: For reporting cancer biomarker testing results, the CAP Lung Biomarker Template should be used. Pending biomarker studies should be listed in the Comments section of this report.<div style="display:inline" class="MetadataDisplay">
                        <div class="MetadataDisplay" style="display:inline">
						&#xA0;<div class="reportText">
							rptText:
						</div>
                          <div class="metadataTextValue">{no text}</div>
					&#xA0;<div class="nameDiv">
                            <div class="name">name: </div>
                            <div class="metadataTextValue">
                              <div class="nameValue">DI_30023</div>
                            </div>
                          </div>
                        </div>
                        <div class="ChangeDisplay"></div>
                      </div>
                    </div>
                    <div style="clear:both;"></div>
                  </div>
                  <div style="clear:both"></div>
                </td>
              </tr>
            </table>
          </div>
          <div class="question" id="q1804.100004300"><input type="hidden" class="TextBox" name="q1804.100004300" value="?Comment(s)"><input id="maxcardinality" type="hidden" value=""><div class="QuestionInSection">
              <div class="QuestionTitle collapsable_q">
                <div style="display:inline" class="idDisplay"><a onClick="javascript:syncItem(this)" name="1804">1804
            	-  
			</a></div>?Comment(s)<div style="display:inline-block" class="metadata"></div>
                <div class="MetadataDisplay" style="display:inline-block">
               &#xA0;<div class="minCard">min: </div>
                  <div class="metadataTextValue">0</div>
                </div>
                <div class="MetadataDisplay" style="display:inline">
         				&#xA0;<div class="reportText">
         			rptText:
         				</div>
                  <div class="metadataTextValue">Comment(s)</div>
         		&#xA0;<div class="nameDiv">
                    <div class="name">name: </div>
                    <div class="metadataTextValue">
                      <div class="nameValue">Q_1804</div>
                    </div>
                  </div>
                </div>
                <div class="ChangeDisplay"></div>
                <div class="MetadataDisplay">
         		&#xA0;<div class="ResponseUnits">dt: </div>
                  <div class="metadataTextValue">string</div>
         		&#xA0;	</div>
                <div class="ChangeDisplay"></div>
              </div><input type="text" class="TextBox" name="1804.100004300" value=""><div class="command"></div>
              <div style="clear:both;"></div>
              <div style="clear:both;"></div>
            </div>
          </div>
          <div style="clear:both"></div>
          <div class="SubmitButton"><input type="submit" id="send" value="Submit" onclick="javascript:openMessageData(1);return false;"></div>
        </form>
      </div>
    </div>
  </body>
</html>"/>
                </attachment>
                <format>
                    <system value="http://ihe.net/fhir/ValueSet/IHE.FormatCode.codsystem"/> 
                    <code value="urn:ihe:pcc:crc:2008"/> 
                    <display value="Cancer Registry Content (CRC)"/> 
                </format>
            </content>
        </DocumentReference>

        </resource>
        <request> 
            <method value="POST"/> 
            <url value="DocumentReference"/> 
        </request>
    </entry>
    <!-- Observation 1 -->
    <entry> 
    <Observation xmlns="http://hl7.org/fhir">
   <identifier>
      <system value="https://CAP.org"></system>
      <value value="LungSurgCCO.357_1.0.0.DRAFT_sdcFDF0542f5b8-31e0-43c1-b7d2-eb24fd14da6a.ver1#76436.100004300"></value>
   </identifier>
   <status value="final"></status>
   <code>
      <coding>
         <system value="https://CAP.org"></system>
         <code value="76436.100004300"></code>
         <display value="Patient ID Type"></display>
      </coding>
   </code>
   <subject>
      <reference value="Patient/6754"></reference>
   </subject>
   <performer>
      <reference value="Practitioner/pathpract1"></reference>
   </performer>
   <valueCodeableConcept>
      <coding>
         <system value="https://CAP.org"></system>
         <code value="76634.100004300"></code>
         <display value="OHIP"></display>
      </coding>
   </valueCodeableConcept>
   <derivedFrom>
      <reference value="DocumentReference/LungSurgCCO.357_1.0.0.DRAFT_sdcFDF0542f5b8-31e0-43c1-b7d2-eb24fd14da6a.ver1"></reference>
   </derivedFrom>
</Observation>
        <request> 
            <method value="POST"/> 
            <url value="Observation"/> 
        </request>
    </entry>
    <!-- Observation 2 -->
    <!-- Provenance -->
</Bundle>

