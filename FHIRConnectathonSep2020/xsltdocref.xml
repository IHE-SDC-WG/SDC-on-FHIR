<Bundle xmlns="http://hl7.org/fhir">
   <type value="transaction"></type>
   <entry>
      <fullUrl value="urn:uuid:d726de9a-cb6e-45ea-ba88-92e0ef606530"></fullUrl>
      <resource>
         <Patient xmlns="http://hl7.org/fhir">
            <identifier>
               <system value="urn:system"></system>
               <value value="JoelAlexPatient"></value>
            </identifier>
            <name>
               <family value="Rodriguez"></family>
               <given value="Jose"></given>
            </name>
            <gender value="male"></gender>
         </Patient>
      </resource>
      <request>
         <method value="PUT"></method>
         <url value="Patient?identifier=urn:system|JoelAlexPatient"></url>
      </request>
   </entry>
   <entry>
      <fullUrl value="urn:uuid:732f7edd-a19d-48b9-ac60-6cfc21d268c2"></fullUrl>
      <resource>
         <DocumentReference xmlns="http://hl7.org/fhir">
            <text>
               <div xmlns="http://www.w3.org/1999/xhtml">This DocumentReference was created by the Infoway Parser for form Adrenal.Bx.Res.129_3.002.011.RC1_sdcFDF9b148136-0bb3-43b9-94a3-8296c30acc9e/ver1</div>
            </text>
            <masterIdentifier>
               <system value="https://cap.org"></system>
               <value value="Adrenal.Bx.Res.129_3.002.011.RC1_sdcFDF9b148136-0bb3-43b9-94a3-8296c30acc9e/ver1"></value>
            </masterIdentifier>
            <status value="current"/>
            <subject>
               <reference value="urn:uuid:d726de9a-cb6e-45ea-ba88-92e0ef606530"></reference>
            </subject>
            <date value="2020-09-10T14:10:01.092+00:00"></date>
            <content>
               <attachment>
                  <contentType value="text/plain"></contentType>
                  <data value=""></data>
               </attachment>
            </content>
         </DocumentReference>
      </resource>
      <request>
         <method value="POST"></method>
         <url value="DocumentReference"></url>
      </request>
   </entry>
   <entry>
      <fullUrl value="urn:uuid:732f7edd-a19d-48b9-ac60-6cfc21d268c2"></fullUrl>
      <resource>
         <DocumentReference xmlns="http://hl7.org/fhir">
            <text>
               <div xmlns="http://www.w3.org/1999/xhtml">This DocumentReference was created by the Infoway Parser for form Adrenal.Bx.Res.129_3.002.011.RC1_sdcFDF9b148136-0bb3-43b9-94a3-8296c30acc9e/ver1</div>
            </text>
            <masterIdentifier>
               <system value="https://cap.org"></system>
               <value value="Adrenal.Bx.Res.129_3.002.011.RC1_sdcFDF9b148136-0bb3-43b9-94a3-8296c30acc9e/html"></value>
            </masterIdentifier>
            <status value="current"/>
            <subject>
               <reference value="urn:uuid:d726de9a-cb6e-45ea-ba88-92e0ef606530"></reference>
            </subject>
            <date value="2020-09-10T14:10:01.092+00:00"></date>
            <relatesTo>
               <code value="transforms"/>
               <target value="urn:uuid:d726de9a-cb6e-45ea-ba88-92e0ef606530"></target>
            </relatesTo>
            <content>
               <attachment>
                  <contentType value="text/plain"></contentType>
                  <data value=""></data>
               </attachment>
            </content>
         </DocumentReference>
      </resource>
      <request>
         <method value="POST"></method>
         <url value="DocumentReference"></url>
      </request>
   </entry>
   <entry>
      <fullUrl value="urn:uuid:9fb3f0af-0e8f-4052-b779-8ea2c396d314"></fullUrl>
      <resource>
         <Observation xmlns="http://hl7.org/fhir">
            <identifier>
               <system value="https://CAP.org"></system>
               <value value="Adrenal.Bx.Res.129_3.002.011.RC1_sdcFDF9b148136-0bb3-43b9-94a3-8296c30acc9e/ver1#2118.100004300"></value>
            </identifier>
            <status value="final"></status>
            <code>
               <coding>
                  <system value="https://CAP.org"></system>
                  <code value="2118.100004300"></code>
               </coding>
            </code>
            <subject>
               <reference value="urn:uuid:d726de9a-cb6e-45ea-ba88-92e0ef606530"></reference>
            </subject>
            <valueCodeableConcept>
               <coding>
                  <system value="https://CAP.org"></system>
                  <code value="2119.100004300"></code>
                  <display value="Adrenal gland"></display>
               </coding>
            </valueCodeableConcept>
            <derivedFrom>
               <reference value="urn:uuid:732f7edd-a19d-48b9-ac60-6cfc21d268c2"></reference>
            </derivedFrom>
         </Observation>
      </resource>
      <request>
         <method value="POST"></method>
         <url value="Observation"></url>
      </request>
   </entry>
   <entry>
      <fullUrl value="urn:uuid:b4334dcf-3117-4af0-b5f0-138187985e6b"></fullUrl>
      <resource>
         <Observation xmlns="http://hl7.org/fhir">
            <identifier>
               <system value="https://CAP.org"></system>
               <value value="Adrenal.Bx.Res.129_3.002.011.RC1_sdcFDF9b148136-0bb3-43b9-94a3-8296c30acc9e/ver1#42554.100004300"></value>
            </identifier>
            <status value="final"></status>
            <code>
               <coding>
                  <system value="https://CAP.org"></system>
                  <code value="42554.100004300"></code>
                  <display value="Procedure"></display>
               </coding>
            </code>
            <subject>
               <reference value="urn:uuid:d726de9a-cb6e-45ea-ba88-92e0ef606530"></reference>
            </subject>
            <valueCodeableConcept>
               <coding>
                  <system value="https://CAP.org"></system>
                  <code value="2121.100004300"></code>
                  <display value="Adrenalectomy, partial"></display>
               </coding>
            </valueCodeableConcept>
            <derivedFrom>
               <reference value="urn:uuid:732f7edd-a19d-48b9-ac60-6cfc21d268c2"></reference>
            </derivedFrom>
         </Observation>
      </resource>
      <request>
         <method value="POST"></method>
         <url value="Observation"></url>
      </request>
   </entry>
   <entry>
      <fullUrl value="urn:uuid:aba32906-c5a2-4c37-a378-77748f622e39"></fullUrl>
      <resource>
         <Observation xmlns="http://hl7.org/fhir">
            <identifier>
               <system value="https://CAP.org"></system>
               <value value="Adrenal.Bx.Res.129_3.002.011.RC1_sdcFDF9b148136-0bb3-43b9-94a3-8296c30acc9e/ver1#52756.100004300"></value>
            </identifier>
            <status value="final"></status>
            <code>
               <coding>
                  <system value="https://CAP.org"></system>
                  <code value="52756.100004300"></code>
                  <display value="Specimen Laterality"></display>
               </coding>
            </code>
            <subject>
               <reference value="urn:uuid:d726de9a-cb6e-45ea-ba88-92e0ef606530"></reference>
            </subject>
            <valueCodeableConcept>
               <coding>
                  <system value="https://CAP.org"></system>
                  <code value="56812.100004300"></code>
                  <display value="Bilateral"></display>
               </coding>
            </valueCodeableConcept>
            <derivedFrom>
               <reference value="urn:uuid:732f7edd-a19d-48b9-ac60-6cfc21d268c2"></reference>
            </derivedFrom>
         </Observation>
      </resource>
      <request>
         <method value="POST"></method>
         <url value="Observation"></url>
      </request>
   </entry>
   <entry>
      <fullUrl value="urn:uuid:a1698605-7629-4df7-bce2-7fb28f447648"></fullUrl>
      <resource>
         <Observation xmlns="http://hl7.org/fhir">
            <identifier>
               <system value="https://CAP.org"></system>
               <value value="Adrenal.Bx.Res.129_3.002.011.RC1_sdcFDF9b148136-0bb3-43b9-94a3-8296c30acc9e/ver1#59852.100004300"></value>
            </identifier>
            <status value="final"></status>
            <code>
               <coding>
                  <system value="https://CAP.org"></system>
                  <code value="59852.100004300"></code>
                  <display value="Histologic Type (Notes C through E)"></display>
               </coding>
            </code>
            <subject>
               <reference value="urn:uuid:d726de9a-cb6e-45ea-ba88-92e0ef606530"></reference>
            </subject>
            <valueCodeableConcept>
               <coding>
                  <system value="https://CAP.org"></system>
                  <code value="2117.100004300"></code>
                  <display value="Adrenal cortical carcinoma"></display>
               </coding>
            </valueCodeableConcept>
            <derivedFrom>
               <reference value="urn:uuid:732f7edd-a19d-48b9-ac60-6cfc21d268c2"></reference>
            </derivedFrom>
         </Observation>
      </resource>
      <request>
         <method value="POST"></method>
         <url value="Observation"></url>
      </request>
   </entry>
   <entry>
      <fullUrl value="urn:uuid:e0c2c022-67b1-46d1-bdef-afa61e2cfafe"></fullUrl>
      <resource>
         <Observation xmlns="http://hl7.org/fhir">
            <identifier>
               <system value="https://CAP.org"></system>
               <value value="Adrenal.Bx.Res.129_3.002.011.RC1_sdcFDF9b148136-0bb3-43b9-94a3-8296c30acc9e/ver1#59852.100004300"></value>
            </identifier>
            <status value="final"></status>
            <code>
               <coding>
                  <system value="https://CAP.org"></system>
                  <code value="59852.100004300"></code>
                  <display value="Histologic Type (Notes C through E)"></display>
               </coding>
            </code>
            <subject>
               <reference value="urn:uuid:d726de9a-cb6e-45ea-ba88-92e0ef606530"></reference>
            </subject>
            <valueCodeableConcept>
               <coding>
                  <system value="https://CAP.org"></system>
                  <code value="44449.100004300"></code>
                  <display value="Adrenal cortical carcinoma, myxoid type"></display>
               </coding>
            </valueCodeableConcept>
            <derivedFrom>
               <reference value="urn:uuid:732f7edd-a19d-48b9-ac60-6cfc21d268c2"></reference>
            </derivedFrom>
         </Observation>
      </resource>
      <request>
         <method value="POST"></method>
         <url value="Observation"></url>
      </request>
   </entry>
   <entry>
      <fullUrl value="urn:uuid:ae6ac5e5-bb5f-4ed7-8b21-ce1afb6b50ed"></fullUrl>
      <resource>
         <Observation xmlns="http://hl7.org/fhir">
            <identifier>
               <system value="https://CAP.org"></system>
               <value value="Adrenal.Bx.Res.129_3.002.011.RC1_sdcFDF9b148136-0bb3-43b9-94a3-8296c30acc9e/ver1#49275.100004300"></value>
            </identifier>
            <status value="final"></status>
            <code>
               <coding>
                  <system value="https://CAP.org"></system>
                  <code value="49275.100004300"></code>
                  <display value="Histologic Grade (Notes C through E)"></display>
               </coding>
            </code>
            <subject>
               <reference value="urn:uuid:d726de9a-cb6e-45ea-ba88-92e0ef606530"></reference>
            </subject>
            <valueCodeableConcept>
               <coding>
                  <system value="https://CAP.org"></system>
                  <code value="48634.100004300"></code>
                  <display value="High grade (&gt; 20 mitoses / 50 high-power fields)"></display>
               </coding>
            </valueCodeableConcept>
            <derivedFrom>
               <reference value="urn:uuid:732f7edd-a19d-48b9-ac60-6cfc21d268c2"></reference>
            </derivedFrom>
         </Observation>
      </resource>
      <request>
         <method value="POST"></method>
         <url value="Observation"></url>
      </request>
   </entry>
   <entry>
      <fullUrl value="urn:uuid:d76563c9-1eba-4a2d-bafc-db0198c25927"></fullUrl>
      <resource>
         <Observation xmlns="http://hl7.org/fhir">
            <identifier>
               <system value="https://CAP.org"></system>
               <value value="Adrenal.Bx.Res.129_3.002.011.RC1_sdcFDF9b148136-0bb3-43b9-94a3-8296c30acc9e/ver1#40496.100004300"></value>
            </identifier>
            <status value="final"></status>
            <code>
               <coding>
                  <system value="https://CAP.org"></system>
                  <code value="40496.100004300"></code>
                  <display value="Tumor Weight (Note B)"></display>
               </coding>
            </code>
            <subject>
               <reference value="urn:uuid:d726de9a-cb6e-45ea-ba88-92e0ef606530"></reference>
            </subject>
            <valueCodeableConcept>
               <coding>
                  <system value="https://CAP.org"></system>
                  <code value="44761.100004300"></code>
                  <display value="Specify weight (g)"></display>
               </coding>
            </valueCodeableConcept>
            <derivedFrom>
               <reference value="urn:uuid:732f7edd-a19d-48b9-ac60-6cfc21d268c2"></reference>
            </derivedFrom>
         </Observation>
      </resource>
      <request>
         <method value="POST"></method>
         <url value="Observation"></url>
      </request>
   </entry>
   <entry>
      <fullUrl value="urn:uuid:2224f520-43bf-4870-b019-7f5d4eb8af5a"></fullUrl>
      <resource>
         <Observation xmlns="http://hl7.org/fhir">
            <identifier>
               <system value="https://CAP.org"></system>
               <value value="Adrenal.Bx.Res.129_3.002.011.RC1_sdcFDF9b148136-0bb3-43b9-94a3-8296c30acc9e/ver1.51265.100004300"></value>
            </identifier>
            <status value="final"></status>
            <code>
               <coding>
                  <system value="https://CAP.org"></system>
                  <code value="51265.100004300"></code>
                  <display value="Tumor Extension"></display>
               </coding>
            </code>
            <subject>
               <reference value="urn:uuid:d726de9a-cb6e-45ea-ba88-92e0ef606530"></reference>
            </subject>
            <derivedFrom>
               <reference value="urn:uuid:732f7edd-a19d-48b9-ac60-6cfc21d268c2"></reference>
            </derivedFrom>
            <component>
               <code>
                  <coding>
                     <system value="https://CAP.org"></system>
                     <code value="52315.100004300"></code>
                     <display value="Tumor invades into extra-adrenal structures (specify)"></display>
                  </coding>
               </code>
            </component>
         </Observation>
      </resource>
      <request>
         <method value="POST"></method>
         <url value="Observation"></url>
      </request>
   </entry>
   <entry>
      <fullUrl value="urn:uuid:1d55a2ca-642e-499f-a6a7-4aaaeafd1c27"></fullUrl>
      <resource>
         <Observation xmlns="http://hl7.org/fhir">
            <identifier>
               <system value="https://CAP.org"></system>
               <value value="Adrenal.Bx.Res.129_3.002.011.RC1_sdcFDF9b148136-0bb3-43b9-94a3-8296c30acc9e/ver1.42474.100004300"></value>
            </identifier>
            <status value="final"></status>
            <code>
               <coding>
                  <system value="https://CAP.org"></system>
                  <code value="42474.100004300"></code>
                  <display value="Lymphovascular Invasion (Note F)"></display>
               </coding>
            </code>
            <subject>
               <reference value="urn:uuid:d726de9a-cb6e-45ea-ba88-92e0ef606530"></reference>
            </subject>
            <derivedFrom>
               <reference value="urn:uuid:732f7edd-a19d-48b9-ac60-6cfc21d268c2"></reference>
            </derivedFrom>
            <component>
               <code>
                  <coding>
                     <system value="https://CAP.org"></system>
                     <code value="59454.100004300"></code>
                     <display value="Large vessel, vena cava (including when identified clinically)"></display>
                  </coding>
               </code>
            </component>
         </Observation>
      </resource>
      <request>
         <method value="POST"></method>
         <url value="Observation"></url>
      </request>
   </entry>
   <entry>
      <fullUrl value="urn:uuid:5bec20ec-087a-48b8-b49b-130400f22ea5"></fullUrl>
      <resource>
         <Observation xmlns="http://hl7.org/fhir">
            <identifier>
               <system value="https://CAP.org"></system>
               <value value="Adrenal.Bx.Res.129_3.002.011.RC1_sdcFDF9b148136-0bb3-43b9-94a3-8296c30acc9e/ver1#2153.100004300"></value>
            </identifier>
            <status value="final"></status>
            <code>
               <coding>
                  <system value="https://CAP.org"></system>
                  <code value="2153.100004300"></code>
                  <display value="Margins"></display>
               </coding>
            </code>
            <subject>
               <reference value="urn:uuid:d726de9a-cb6e-45ea-ba88-92e0ef606530"></reference>
            </subject>
            <valueCodeableConcept>
               <coding>
                  <system value="https://CAP.org"></system>
                  <code value="2155.100004300"></code>
                  <display value="Involved by tumor"></display>
               </coding>
            </valueCodeableConcept>
            <derivedFrom>
               <reference value="urn:uuid:732f7edd-a19d-48b9-ac60-6cfc21d268c2"></reference>
            </derivedFrom>
         </Observation>
      </resource>
      <request>
         <method value="POST"></method>
         <url value="Observation"></url>
      </request>
   </entry>
   <entry>
      <fullUrl value="urn:uuid:86679791-0289-45e3-b181-41c3b53f68c7"></fullUrl>
      <resource>
         <Observation xmlns="http://hl7.org/fhir">
            <identifier>
               <system value="https://CAP.org"></system>
               <value value="Adrenal.Bx.Res.129_3.002.011.RC1_sdcFDF9b148136-0bb3-43b9-94a3-8296c30acc9e/ver1#26365.100004300"></value>
            </identifier>
            <status value="final"></status>
            <code>
               <coding>
                  <system value="https://CAP.org"></system>
                  <code value="26365.100004300"></code>
                  <display value="?Specify Margin(s), if possible"></display>
               </coding>
            </code>
            <subject>
               <reference value="urn:uuid:d726de9a-cb6e-45ea-ba88-92e0ef606530"></reference>
            </subject>
            <valueCodeableConcept>
               <coding>
                  <system value="https://CAP.org"></system>
                  <code value="26366.100004300"></code>
                  <display value="Specify margin(s)"></display>
               </coding>
            </valueCodeableConcept>
            <derivedFrom>
               <reference value="urn:uuid:732f7edd-a19d-48b9-ac60-6cfc21d268c2"></reference>
            </derivedFrom>
         </Observation>
      </resource>
      <request>
         <method value="POST"></method>
         <url value="Observation"></url>
      </request>
   </entry>
</Bundle>
